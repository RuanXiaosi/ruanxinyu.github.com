<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RuanXinYu&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/efaf7255d0acf18755aba4ade84c6294</icon>
  <subtitle>路漫漫其修远兮，吾将上下而求索</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ruanxinyu.github.io/"/>
  <updated>2019-02-08T08:55:30.708Z</updated>
  <id>http://ruanxinyu.github.io/</id>
  
  <author>
    <name>阮新宇</name>
    <email>1096421257@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>014：行为设计学：零成本改变</title>
    <link href="http://ruanxinyu.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%A1%8C%E4%B8%BA%E8%AE%BE%E8%AE%A1%E5%AD%A6-%E9%9B%B6%E6%88%90%E6%9C%AC%E6%94%B9%E5%8F%98/"/>
    <id>http://ruanxinyu.github.io/posts/读书笔记/行为设计学-零成本改变/</id>
    <published>2019-02-07T08:36:12.000Z</published>
    <updated>2019-02-08T08:55:30.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容概述"><a class="markdownIt-Anchor" href="#内容概述"></a> 内容概述</h1><p>改变三部曲：指挥骑象人（看似心生抵触，实则方向不明），激励大象（看似懒于改变，实则精疲力尽）和营造路径（看似是人的问题，实则为情境问题）。</p><h1 id="文章剖析"><a class="markdownIt-Anchor" href="#文章剖析"></a> 文章剖析</h1><p>成功的改变包含三个要素：<code>理智</code>，<code>情感</code>和<code>情境</code>。</p><p><strong>三个不可不知的事实</strong>：</p><ol><li>看似是人的问题，实则为情境的问题：要想劝人少吃点爆米花，不用考虑对方是否理解，也不用关心他们态度会怎么样，只要拿小一点的桶装爆米花就可以了。</li><li>一个脑，两条心：我们的情感面像一头大象，理智面像是骑象人。大象渴望及时行乐，骑象人擅长超越当下，深谋远虑，未雨绸缪。大象的长处是掌握着爱，怜悯，同情和忠诚等诸多情感，提供能量和动力朝目标前进，是改变得以实现的重要因素。骑象人的缺陷是往往过度分析，过度思考，从而造成原地踏步，停滞不前。大象抗拒不从，骑象人原地空想，两者都会让改变遥遥无期。</li><li>看似懒于改变，实则精疲力尽：自控力是可耗尽的有限资源，想要改变，往往意味着修改已经自然而然形成习惯的动作，因此需要骑象人监督，而这会消耗自我控制力。假如骑象人和大象对于前进方向存在分歧，骑象人可以在短时间内掌握方向-用尽全力拽住缰绳，迫使大象服从，但是骑象人不可能长时间跟一头庞然大物拔河，他总会有精疲力尽的时候。</li></ol><p><strong>改变三部曲</strong>：</p><ol><li><strong>指挥骑象人</strong>：看似心生抵触，实则方向不明，因此必须提供清晰明确的方向（低脂牛奶案例）</li><li><strong>激励大象</strong>：看似懒于改变，实则精疲力尽（饼干与萝卜实验）</li><li><strong>营造路径</strong>：看似是人的问题，实则为情境问题</li></ol><h2 id="指挥骑象人"><a class="markdownIt-Anchor" href="#指挥骑象人"></a> 指挥骑象人</h2><ol><li><strong>找出亮点</strong>：找出成功案例，复制推广亮点（越南妈妈故事、聚焦解决短期治疗方案）</li><li><strong>制定关键举措</strong>：无须高瞻远瞩，着眼于关键步骤（低脂牛奶，亚美运输4条原则）</li><li><strong>指明目标</strong>：预先指明方向和原因大有益处（成为三年级学生、英国石油公司杜绝枯井）</li></ol><p>骑象人有很多长处，会思考，会分析，会规划未来蓝图，但是它有一个糟糕的弱点，就是倾向于原地打转。骑象人喜欢再三考虑，反复分析，更糟的是骑象人分析对象往往都是麻烦，而不是亮点。骑象人会觉得到处都是问题，然后患上分析瘫痪症，除非指明方向清晰的知识否则骑象人会无穷无尽的原地打转。（想想为什么可以以行促知）</p><p><strong>1. 找到亮点</strong></p><p>从亮点入手，可以避免“非我发明”所带来的疑虑。</p><p>找出特例，复制经验。（成功是成功之母）</p><p>骑象人再分析问题时，总是寻求规模与其一直的解决方案，但是很多时候问题和解决办法的规模是不对等的，小办法，可以实现大改变。</p><p>寻找亮点，也就是在问：“怎样做才有用？怎样才能多做一点？”。但是现实生活中我们更多的将精力放在问题本身，问题聚焦：“哪里出了问题？怎么才能解决问题？”。因为我们对坏比对好要敏感很多。</p><blockquote><p>某一天，女儿带回成绩单，1科优秀，3科良好，1科不及格，身为服务，你的关注点在哪儿，你会怎么教育孩子？</p></blockquote><p>我们的骑象人不应该聚焦在问题上，而应该聚焦对策。我们必须把分析负面问题的考古式办法，转变为寻求亮点，传播亮点的解决思路。</p><p><strong>2. 制定关键举措</strong></p><p>选项越多，越疲惫。看似抗拒改变或者反对改变，实则行动方向不明。</p><p>改变意味着自动驾驶变为手动驾驶，决策瘫痪的成因不光是众多选项让人眼花缭乱，还有含糊不清，暧昧不明的状态。（想想定制目标的SMART法则）</p><p>方向不明是改变的大敌，要想成功改变，就必须把模糊不清的目标转化为具体实在的行动。你应该努力朝低脂牛奶运动靠齐，避免重蹈事物金字塔的覆辙。</p><p>改变始于个人层面的决策和行为，但是个人层面时长内心交战，冲突不断，因而也最难实现。惰性加决策瘫痪，让人不免想要沿用原先得办法，继续走老路。</p><p>你不可能制定每一步棋着，也无需定制所有的棋着，关键在于定制关键举措。</p><p><strong>3. 指明目标</strong></p><p>当你在描述一个引人注意的终点时，也是在帮助骑象人克服它的一个重大缺陷：在分析中迷失的倾向。（想想为什么大目标比小目标更容易实现？）指明方向后，骑象人会开始把力气滑倒如何到达终点上，而不是聚焦在小问题上。</p><p>聪明目标（SMART目标）具有明确性，但是缺少情感共鸣，难以激励大象。因此比较适用于稳定的环境，而不适合变革时期，因为聪明目标已经预先假定这个终点具有追求价值。聪明目标假定了情感因素，当不能激发情感共鸣。</p><p>想要让目标打动大象，走进心坎，决不能指望聪明目标。<strong>“终点明信片”具有双重效用：告知骑象人去往何处，晓示大象此行的价值。</strong></p><p>在自我控制的关头，人人都摇身一变，成了善于钻空子的律师，我们总是将失败自我合理化，因此我们必须将目标中含糊不清的因素剔除干净，制定非黑即白的目标，不留回旋余地。</p><p>非黑即白目标一点都不激励人心，只能100%的限制人。而且非黑即白的目标指制定关键措施，没有描述终点图景。终点明信片提供情感力量，而非黑即白目标具有消灭自我合理化倾向的优势。</p><p>长期目标要与短期关键步骤相结合，改变开始后，不要执迷于中间的旅途，真正重要的是一个有利的开始，一个有利的结尾，然后赶快上路。</p><h2 id="激励大象"><a class="markdownIt-Anchor" href="#激励大象"></a> 激励大象</h2><ol><li><strong>找到感觉</strong>：仅停留在知道层面未必能改变，必须形成感觉（手套展、化疗电子游戏、沃特斯向塔吉特员工展示服装样品）</li><li><strong>缩小改变幅度</strong>：分解改变步骤，消除大象的恐惧（5分钟房间拯救行动，联邦政府采购改革）</li><li><strong>影响他人</strong>：建立新认同感，灌输成长心态（员工创新者、初中生数学成绩猛增）</li></ol><p><strong>1. 找到感觉</strong></p><p>传统模式下顺序是：分析-&gt;思考-&gt;该百年；对于巨大的改变，正确的顺序是：看见-&gt;感觉-&gt;改变。</p><p>试图用分析论证的方法来消除惰性和冷漠，无异于扔给溺水者一只灭火器。</p><p>“再生任务”游戏。改变不是源于理解，而是源于感觉，那种感觉就是：我能做到，我的人生由我做主。（反馈）</p><p>人们推动改变失败，常常会归咎于他人对事物缺乏了解。当我们碰到需要该百年他人行为的情况时，第一反应总是改变别人。事实上，改变失败，往往不是理解出了问题。</p><p>积极错觉是一个棘手的问题，大家都认为自己最了解自己，高估自己。可以通过别人的视角来打破。</p><p><strong>2. 缩小改变幅度</strong></p><p>鼓励人们采取行动的办法之一，就是让对方感觉自己距离目标越来越近了。要让一头不情愿的大象迈开脚步，你必须缩小改变幅度。</p><p>缩小改变幅度的方法之一是限制资源投入，比如5分钟家务。要想激发改变，你必须主动设定里程碑，将官僚惰性转变为前进的动力。</p><p>从0到10量化奇迹。打造早期成功，其实正是打造希望，希望是激励大象的动力。将奇迹予以量化的另外一个好处是消除整个过程的神秘感。借助奇迹标尺，你总会清楚自己下一步该往哪儿走，也确切了解下一场小胜利将是什么。你会不断前进，更棒的是，你对自己保持前进的能力越来越有信心了。</p><p>小目标，小胜利，触发积极行为。小胜利应当具备两个特点：其一，他们具有意义；其二，他们触手可及。</p><p><strong>3. 影响他人</strong></p><p>影响他人，让人们得到成长。认同是影响人们决策方式的关键因素。</p><p>人们愿意培养新的认同感，只是认同感的培养要从小处开始，比如创新者的身份。</p><p>新认同感的生根发芽可以很快完成，但是开枝散叶却极为艰难。因为，当你试图改变自己或者引领改革时，一定不饿避免的会出现失败，而失败势必会让人本能的想要逃跑。</p><p>如何处理呢？你必须建立起对失败的预期，具有成长心态。</p><p>真正的改变，能够持续下去的改变，往往是前进三步，再后退两步。要创造并延续改变，采取行动就必须像教练员，而不是守门员，必须接纳成长心态。</p><p>成长心态看似让人关注失败，甚至鼓励人寻求失败，实际上却是对乐观情绪的坚守。成长心态是对抗失败主义的缓冲，并且把失败包装成改变过程中不可避免的自然产物。</p><h2 id="营造路径"><a class="markdownIt-Anchor" href="#营造路径"></a> 营造路径</h2><ol><li><strong>调整环境</strong>：情境影响行为，设法改变环境（机架空间取消呼叫转接系统、亚马逊一键下单功能、简化在线工时表）</li><li><strong>培养习惯</strong>：形成习惯则不费力，设法鼓励培养习惯（设定行动触发扳机、节食者每天多喝两碗汤、使用检查清单）</li><li><strong>召集同伴</strong>：行为有传染力，设法号召众人（医院“自由空间”、在小费盒里预先投钱）</li></ol><p>基本归因错误，人们总是把行为归咎于个人性格，而不是其自身所处的环境。</p><p><strong>1. 调整环境</strong></p><p>看似是人的问题，实则为情境问题。不管你的角色是什么，都可以或多或少掌控所处的情境。一键式调整，改变路径，就能改变行为。</p><p>战胜自我能够带个人满足感。所谓的战胜自我是指骑象人战胜大象。</p><p>使用哈顿矩阵可以帮助人们系统性的梳理问题，重点思考意外的3个阶段：事件前，事件中，事件后。</p><p><strong>2. 培养习惯</strong></p><p>环境可以强化或者淡化习惯，但是养成习惯并不完成取决于环境因素，也与人的心理休戚相关。</p><p>预设决定，触发下一步行动。（相当于认为设计《习惯的力量》里描述的触发点）行为触发扳机并不完美，但绝对是促进改变立即发生的简单手段。</p><p>培养习惯和调整环境可以相辅相成，让行为更加持之以恒。</p><p>清单，检查表。</p><p><strong>3. 召集同伴</strong></p><p>从众效应，行为会传染。当你指挥大象走在不熟悉的路径上时，大象很可能会追随其他的同伴的脚步。</p><h1 id="行为指南"><a class="markdownIt-Anchor" href="#行为指南"></a> 行为指南</h1><p>以行促知，以知促行，不是非此即彼，而要骑象人和大象双管双下，这样才能知行合一，最后营造良好的路径，实现零成本改变。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内容概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#内容概述&quot;&gt;&lt;/a&gt; 内容概述&lt;/h1&gt;
&lt;p&gt;改变三部曲：指挥骑象人（看似心生抵触，实则方向不明），激励大象（看似懒于改变，实则精疲力尽）和营造路径（看似是人的问题，实则为情境问
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>013：如何戒掉坏习惯（古川武士）</title>
    <link href="http://ruanxinyu.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A6%82%E4%BD%95%E6%88%92%E6%8E%89%E5%9D%8F%E4%B9%A0%E6%83%AF/"/>
    <id>http://ruanxinyu.github.io/posts/读书笔记/如何戒掉坏习惯/</id>
    <published>2019-02-06T14:36:12.000Z</published>
    <updated>2019-02-06T15:37:26.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容概述"><a class="markdownIt-Anchor" href="#内容概述"></a> 内容概述</h1><p>戒掉坏习惯包含禁欲期，动力缺乏期，平稳期和倦怠期4个阶段。在禁欲期要克服千难万险，在动力缺乏期要制定成功范例，在稳定期要提高实践率，在倦怠期要为方针设置变化。</p><h1 id="文章剖析"><a class="markdownIt-Anchor" href="#文章剖析"></a> 文章剖析</h1><p>所谓的坏习惯，是指禁不住眼前的诱惑或是诱惑的驱使，从长远来看会带来负面影响的习惯。劣币驱逐良币，坏习惯也会驱逐好习惯。</p><p>如果说《坚持，一种可以养成的习惯》是养成好习惯的方法，那么《如何戒掉话习惯》就是甩掉坏习惯的方法。</p><p>为什么总是戒不掉坏习惯？</p><ol><li>习惯引力的法则</li><li>意识与无意识的平衡</li><li>欲望与理性的斗争</li></ol><p>无法甩掉习惯是因为这一习惯具有肯定性的意义，某些欲望被坏习惯满足，比如说放松，忘记烦恼，缓解压力。因此我们需要确定我们为什么要戒掉这个坏习惯，那么这个坏习惯对应的肯定性意义怎么办，是放弃还是通过别的方式弥补。即《习惯的力量》里的奖励部分。</p><p>养成习惯，相比于结果，我们要将目光聚焦于行动本身，因为我们要坚信只要重复的做到，我们的习惯就会养成。</p><p>戒掉坏习惯分为4个阶段：<code>禁欲期</code>，<code>动力缺乏期</code>，<code>平稳期</code>，<code>倦怠期</code>。</p><p>分阶段有什么好处呢？</p><ol><li>有全局观，可以从高处俯视从戒掉习惯到养成习惯的过程</li><li>我们知道我们处于何种阶段，并且针对应得使用对策</li><li>里程碑的作用，每个阶段达成后可以获得成就感</li></ol><p>意志力是可以培养的，并且是有限的，并且在能量匮乏的时候意志力会更差，所以我们要尽量在早晨意志力高的时候处理，通过不断达成目标来锻炼意志力，同时多锻炼。更多可以参考《自控力》。</p><p>寻找核心理由，可以从三个方面入手：危机感，快感，期待感。最好将核心理由写在纸上，让自己随时能够看到。</p><h2 id="禁欲期"><a class="markdownIt-Anchor" href="#禁欲期"></a> 禁欲期</h2><p>禁欲期是一段很痛苦的过程，所以每天都要调整心态，以饱满的精神投入其中，不要因为昨天的失败而纠结苦恼。</p><blockquote><p>这个过程千万不要同时养成多个习惯，另外要保持心态的积极乐观，如果一直有负面情绪，后续也会很麻烦的</p></blockquote><ol><li>营造杜绝诱惑的环境：设想所有可能的诱惑；减少或消除这些诱惑</li><li>将行为可视化</li><li>给破罐子破摔设置上限：设想会陷入破罐子破摔的思考模式的场景；思考受挫的对策；</li></ol><h2 id="动力缺乏期"><a class="markdownIt-Anchor" href="#动力缺乏期"></a> 动力缺乏期</h2><ol><li>制定成功范例，设定必胜模式</li><li>制定例外规则</li><li>通过持续开关提升动力</li></ol><h2 id="平稳期"><a class="markdownIt-Anchor" href="#平稳期"></a> 平稳期</h2><p>提高实践率，这一时期不允许自己有例外的情况发生，要努力追求最好的成果。</p><ol><li>回顾过去的行动，从失败案例中吸取教训，并再次强化预防对策和成功范例。</li><li>彻底斩断坏习惯，将行动率提升至100%</li></ol><h2 id="倦怠期"><a class="markdownIt-Anchor" href="#倦怠期"></a> 倦怠期</h2><p>方针：设置变化方式原地踏步</p><ol><li>注入刺激：更新内容；更新替代方案</li><li>计划下一个习惯</li></ol><h1 id="行为指南"><a class="markdownIt-Anchor" href="#行为指南"></a> 行为指南</h1><p>针对每一种需要养成的习惯制定针对性的设计每个阶段的策略，列出详细的执行列表，打印出来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内容概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#内容概述&quot;&gt;&lt;/a&gt; 内容概述&lt;/h1&gt;
&lt;p&gt;戒掉坏习惯包含禁欲期，动力缺乏期，平稳期和倦怠期4个阶段。在禁欲期要克服千难万险，在动力缺乏期要制定成功范例，在稳定期要提高实践率，
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>012：坚持，一种可以养成的习惯（古川武士）</title>
    <link href="http://ruanxinyu.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%9D%9A%E6%8C%81%EF%BC%8C%E4%B8%80%E7%A7%8D%E5%8F%AF%E4%BB%A5%E5%85%BB%E6%88%90%E7%9A%84%E4%B9%A0%E6%83%AF/"/>
    <id>http://ruanxinyu.github.io/posts/读书笔记/坚持，一种可以养成的习惯/</id>
    <published>2019-02-05T07:25:43.000Z</published>
    <updated>2019-02-06T14:36:33.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容概述"><a class="markdownIt-Anchor" href="#内容概述"></a> 内容概述</h1><p>不同类型的习惯所需的时长不一样，习惯养成包含反抗期，不稳定期和倦怠期三个阶段，针对不同习惯的不同阶段采取不同的策略可以使习惯更容易达成。</p><h1 id="文章剖析"><a class="markdownIt-Anchor" href="#文章剖析"></a> 文章剖析</h1><p>成功不是一种行为，而是一种习惯。</p><p>所谓习惯就是“不以来意志或者毅力，把自己想要拆徐的事情引导到如每天刷牙般轻松的状态”。</p><p>人类有95%的行为是在无意识中进行的，而大部分的无意识行动都是通过习惯产生的。一旦某种行动化为习惯，就可以通过较少的劳动获得较大的成果。</p><p>习惯就是将重复的行动转化为无意识的行动，而不需要意识层面的思考，这是大脑适应环境的一种能力，从进化角度讲的话就是为了节省能量。</p><p>人类具有对抗新变化，维持现状的倾向，从进化角度讲，这是最有利的，可以避免危险。因而会产生习惯引力，不管是培养好习惯还是改变坏习惯，都是改变，大脑都会阻挠以保持现状。所以很容易出现三分钟热度。</p><p>习惯养成与火箭升空的过程类似，前期需要摆脱引力，脱离引力后就只需要少量的能量就能够前进。</p><p>首先，不要指望21天就能搞定所有习惯。不同类型的习惯所需的时间是不一样的。同时如果你在养成习惯的过程中，一直有负面的情绪，那么所需要的时间会更长。</p><ol><li><strong>行为习惯</strong>：每天规律的行为，比如读书、写日记等，大约1个月</li><li><strong>身体习惯</strong>：与身体节奏相关的习惯，比如减肥、运动、早起、戒烟等，大概需要3个月</li><li><strong>思考习惯</strong>：与思考能力相关的习惯，比如正面思考、逻辑能力、乐观心态等，大概需要6个月</li></ol><blockquote><p>养成习惯的时候不要有负面情绪，这个要调整。另外确定好你想坚持哪些习惯，优先级是什么，你想通过多久达到。同时注意短期，中期和长期习惯的搭配。</p></blockquote><p>习惯的养成分为：<code>反抗期</code>，<code>不稳定期</code>和<code>倦怠期</code>。</p><p>预防失败的三个原则是：</p><ol><li>锁定一个习惯，不要同时培养多个习惯，不要急于求成</li><li>坚持有效的行动，行动规则越简单越好</li><li>不要太在意结果，相信你的行为能够达到结果，然后坚持就好，相信积累的作用</li></ol><h2 id="反抗期"><a class="markdownIt-Anchor" href="#反抗期"></a> 反抗期</h2><p>反抗期的重心放在“撑下去”上就好，就是说每天持续行动很重要。克服该阶段可以采用如下两种方式：</p><p><strong>以婴儿学步开始</strong></p><blockquote><p>补充内容可以参考《微习惯》这本书</p></blockquote><p>绝不勉强，从小处开始行动。这样的好处是：行动压力小；引发动力。但是无论你把行动的门槛降到多低，请一定要注意每天都积累一小步。</p><p>细分行为有两个维度：<code>细分时间</code>，1分钟，5分钟，10分钟等；<code>细分步骤</code>，月度一页书，写一行日记等。</p><p>设定最低标准并不意味着不能做高于标准的行动。</p><p>在反抗期无论多小的目标，对于培养习惯都有相当大的意义。所以一定要<strong>每天持续执行</strong></p><p><strong>简单记录</strong></p><p>记录能够用于客观的分析并了解问题，减少不确定性，提高动力。成就感。</p><p>记录的工具和规则一定要简单，同时一定要每天记录，每天记录能够将这件事内化到脑子中，否则你可能都会忘了这事。</p><h2 id="不稳定期"><a class="markdownIt-Anchor" href="#不稳定期"></a> 不稳定期</h2><p>在通过反抗期之后我们要将难度提升到自己本来要求的成程度。</p><p>不稳定期的对策有：<code>模式化</code>；<code>设定例外规则</code>；<code>设定持续开关</code>。</p><p><strong>行为模式化</strong></p><p>行为模式化指：在固定的<code>时间</code>，<code>地点</code>和<code>方式</code>执行你的习惯。可以减少选择和思考，便于大脑更好的内化到潜意识中。</p><p>如果你不在某一个时间做某一件事情就觉得浑身不对劲的话，那你就成功的培养了该习惯。</p><p><strong>设定例外规则</strong></p><p>设定例外规则不是为了宠溺自己，而是为了让计划保持弹性。这样可以减少在特殊情况无法完成所造成的压力。</p><p>设定特例规则的步骤：首先，考虑有哪些例外情况；其次，考虑应对方式，比如回退到婴儿学步的方式（优先），第二天加倍完成，设定特殊的日子光明正大的中断。</p><p><strong>设定持续开关</strong></p><p>持续开关就是能产生积极行动的方法，根据<code>产生快感</code>和<code>回避痛苦</code>两种情感分为糖果型开关和处罚型开关。</p><blockquote><p>糖果型开关可以参考《行为设计学：打造巅峰体验》</p></blockquote><h2 id="倦怠期"><a class="markdownIt-Anchor" href="#倦怠期"></a> 倦怠期</h2><p>倦怠期需要<strong>引入变化</strong>，可以通过<code>改变环境</code>或者利用不同的<code>持续开关</code>等方法，在一成不变的状态下加上变化。同时可以在该阶段<strong>计划培养下一个习惯</strong>。</p><p>添加变化时需要注意一下几点：</p><ol><li>以一举两得的角度思考问题，串并行，附加效果</li><li>准备多种选择</li><li>不要轻易改变模式或者规则</li></ol><h1 id="行为指南"><a class="markdownIt-Anchor" href="#行为指南"></a> 行为指南</h1><ol><li>对每个习惯进行分类，然后通过甘特图将各中习惯和阶段安排好，然后以微习惯的模式启动并坚持。</li><li>提前预想习惯养成的困难点，以及如何应对</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内容概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#内容概述&quot;&gt;&lt;/a&gt; 内容概述&lt;/h1&gt;
&lt;p&gt;不同类型的习惯所需的时长不一样，习惯养成包含反抗期，不稳定期和倦怠期三个阶段，针对不同习惯的不同阶段采取不同的策略可以使习惯更容易达
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>011：行为设计学：打造峰值体验</title>
    <link href="http://ruanxinyu.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%A1%8C%E4%B8%BA%E8%AE%BE%E8%AE%A1%E5%AD%A6-%E6%89%93%E9%80%A0%E5%B3%B0%E5%80%BC%E4%BD%93%E9%AA%8C/"/>
    <id>http://ruanxinyu.github.io/posts/读书笔记/行为设计学-打造峰值体验/</id>
    <published>2019-02-04T23:04:43.000Z</published>
    <updated>2019-02-05T05:19:51.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容概述"><a class="markdownIt-Anchor" href="#内容概述"></a> 内容概述</h1><p>行为设计基于人类思维习惯的研究，间接的设计干扰，影响行为和决策。人们对于一段经历的评价取决于两个时刻：<code>峰值</code>（最好和最坏的时刻 ）和<code>结尾</code>。打造峰值时刻大致包含4中情感：<code>欣喜感</code>，<code>认知感</code>，<code>荣耀感</code>和<code>连接感</code>。</p><h1 id="文章剖析"><a class="markdownIt-Anchor" href="#文章剖析"></a> 文章剖析</h1><p>我们的生活是由一个个时刻丈量的，而决定性时刻则会在我们的回忆中长久持续存在。决定性时刻是指一段既令人难忘又意义重大的短暂体验。</p><p>峰值定律：人们会根据两个关键的时刻来评判一段体验的好坏：一是，最好或是最坏的时刻，即峰值时刻；二是，结尾。</p><p>瞬间思维，辨识哪些时机是值得投入时间和精力的。三种值得凸显的事件是：转变事件，里程碑事件和低谷事件。</p><h2 id="欣喜时刻"><a class="markdownIt-Anchor" href="#欣喜时刻"></a> 欣喜时刻</h2><p>所谓的欣喜时刻就是超越平日之上的体验。欣喜时刻就是峰值时刻。</p><p>进攻而非防守，为消费者提供满意的体验，先填平低谷，再搭建高峰。因为负面评论比比正面评论更有影响力，因此管理层经常过于专注于填补小漏洞，而不是专注于打造峰值体验。</p><p>可以通过如下三种方式在一个时刻中加入欣喜因素：</p><p><strong>1. 提升感官感受</strong></p><p>提升感官感受指的是将现实世界的“音量调高”，让事物从视觉，味觉，听觉或是感觉上超过寻常。</p><p><strong>2. 加入刺激性</strong></p><p>提升刺激性是指添加一些有助于提升效率的压力，比如比赛，截止日期，承诺等</p><p><strong>3. 突破脚本</strong></p><p>颠覆人们对于一段体验的预期，与其说是一种出乎意料，更应该是一种战略上的惊喜。</p><p>新鲜感能够改变我们对时间的感知，惊喜能够使时间延长。记忆隆起，15-30岁，时间都去哪儿了，时间为什么过得那么快，因为你的生活越来越老套。大脑的记笔记功能。</p><h2 id="认知时刻"><a class="markdownIt-Anchor" href="#认知时刻"></a> 认知时刻</h2><p>如果一个人生活中的决定性时刻并不满是欣喜，反而充满了痛苦，该怎么办？认知时刻能让我们产生认识和改变。有两种方式打造认知时刻：</p><ol><li>选择让他人被现实绊倒</li><li>如果我们需要对自己产生更深刻的理解时，我们可以选择突破认知</li></ol><p><strong>1. 被现实绊倒</strong></p><p>案例：孟加拉乡村的卫生改革，帕尔默在设计课程时用到的“逆向整合设计”</p><p>真相让人觉醒。当你得到一个未曾预料，却从打心眼里知道是正确的顿悟的时候，你就与现实产生了碰撞。这个决定性时刻，能够在须臾之间改变你看待世界的方式。</p><p>如何设计被现实绊倒：</p><ol><li>明确认知：领导人知道自己想要分享的真相是什么</li><li>用时简短：这些真相很快就能让人警醒</li><li>由受众自己发现：真相是作为听众的人们自己发现的</li></ol><p>如果你有一个好的解决方式，想说服比人？我们可以采用这种方法，关注于问题，而不是解决方案。若是不能理解问题，我们就不会重视解决方案，我们可以通过放大某个问题或者蔚海的真实情况，从而点燃认知。</p><p><strong>2. 认知突破</strong></p><p>从冒险和失败中认识自己，突破认知，所以首先需要正确认识失败，同时要用于走出舒适区。</p><p>认识自我，想明白自己要什么，理解自己的能力，是一个持续一生的过程，而这也是一个缓慢的过程，若想加速理解自我，一个重要的方式就是突破认知。</p><p>鼓励我们突破自我的往往是别人，而不是我们自己，所以我们要多结交高人，拓宽视野，站在更高的层次之上。</p><p><strong>助推突破认知的方法</strong>：<code>高标准+信心</code>和<code>方向+支持</code></p><p>让失败成为轻松的谈资。父亲每次在餐桌上都会问：“你们这周都经历了哪些失败”。我们每周总结的时候是不是也可以这么问问自己呢</p><p>走出去吧。尝试做些不同的事情。打开新的篇章。去冒险吧。这些建议都在暗示，成功已经是你囊中之物了。这个承诺并不完全正确。冒险是存在风险的。<strong>突破自我不一定能够给你带来成功，但是一定可以带来学习和成长。</strong></p><p>不突破自我，我们永远都别想知道我们自己的极限在哪儿。</p><h2 id="荣耀时刻"><a class="markdownIt-Anchor" href="#荣耀时刻"></a> 荣耀时刻</h2><p>欣喜时刻让我们超越平淡，认知时刻启发我们认识世界和自我，而荣耀时刻则记录我们最光彩的时刻：展现勇气，获得认可，战胜挑战。</p><p><strong>如何打造荣耀时刻</strong>？努力工作，投入精力，结果是你会变得更有才华，页更有成就，而这些反过来又会点燃你的荣耀感。正螺旋，兴趣是可以培养的。</p><p><strong>1. 认可他人</strong><br>真诚的认可和赞美，重要的并不是具体的方式，而在于是否真诚。另外频率也很重要，尽量一周一次，而不是一个月一次。</p><p>感谢信，面对面的感恩，这个在哈佛幸福课中也有提及。</p><p><strong>2. 设置里程碑</strong></p><p><strong>前瞻性策略</strong>：采用升级法，为目标设置关卡和层级<br><strong>回顾性策略</strong>：回顾以往，将那些你已经经历过，但可能没有注意到的里程碑时间挖掘出来</p><p>设置里程碑，里程碑式的目标本身就能给人带来激励。</p><p>触到里程碑的时候，荣耀感会油然而生，同时，这也应该激发人们为之庆贺，从而引发欣喜时刻。<strong>里程碑时间应该的陪峰值体验</strong></p><p><strong>3. 锻炼勇气</strong></p><p>暴露疗法的目的是控制恐惧。</p><p>事先存储默认反应，以便于在事到临头时能够不假思索的快速行动。勇气不仅仅是压制恐惧感，还包括掌握在危急情形之下该如何反应的知识。</p><p>练习勇气，缓解焦虑，勇气是有感染力的，勇于站出来，就会有人跟随你。</p><h2 id="连接时刻"><a class="markdownIt-Anchor" href="#连接时刻"></a> 连接时刻</h2><p>连接时刻能够将我们与他人联系在一起。我们感到温暖，团结，心心相印，且得到了认可。</p><p>想要团队中激发彼此产生联系，我们必须创造共同的意义：</p><ol><li>打造让大家步履一致的时刻</li><li>点明共有的难处</li><li>为之赋予意义</li></ol><p>共同经历过患难的小组成员会产生更为紧密的联系。在能够自愿选择面对困难，拥有一定的主动权，且困难有意义的情况下，人们会报以欢迎的态度。</p><p>使命感能够基础超越日常工作的行动。认知时刻和连接时刻都能够培养使命感。触及贡献一层的时候，你就触及了问题的核心。了解自己最终所做的贡献是什么，你就能够脱开代办清单的束缚。</p><p>人际关系不是通过时间的长短来衡量的，没有人确保人际关系会随着时间的推进而愈加深厚。那么，如何哪些行为可以促进感情更加深厚呢？</p><ol><li><strong>给予回应</strong>：回应包括理解，肯定和关心三个因素。</li><li><strong>你来我往</strong>：一方先分享一件事情，等待看另外一方是否也会分享一件事情作为回应。如果对方给出了回应，这便是一种理解，肯定和关心的表示。</li></ol><h1 id="行为指南"><a class="markdownIt-Anchor" href="#行为指南"></a> 行为指南</h1><ol><li>每周总结问问自己这一周都经历了哪些失败，经历了哪些突破脚本的事情给自己以惊喜？</li><li>工作中运用：<code>高标准+信心</code>和<code>方向+支持</code></li><li>说服别人采用被现实绊倒的方式</li><li>设置里程碑</li><li>通过打破脚本来脱离陈规旧习</li><li>突破自我，实现自己的极限</li><li>有意的在自己的私生活中打造峰值体验</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内容概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#内容概述&quot;&gt;&lt;/a&gt; 内容概述&lt;/h1&gt;
&lt;p&gt;行为设计基于人类思维习惯的研究，间接的设计干扰，影响行为和决策。人们对于一段经历的评价取决于两个时刻：&lt;code&gt;峰值&lt;/code&gt;
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>010：谁说你不能就坚持（程龙）</title>
    <link href="http://ruanxinyu.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%B0%81%E8%AF%B4%E4%BD%A0%E4%B8%8D%E8%83%BD%E5%9D%9A%E6%8C%81/"/>
    <id>http://ruanxinyu.github.io/posts/读书笔记/谁说你不能坚持/</id>
    <published>2019-02-04T02:09:23.000Z</published>
    <updated>2019-02-04T08:53:37.635Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容概述"><a class="markdownIt-Anchor" href="#内容概述"></a> 内容概述</h1><p>GALA能量环：确定自己的目标，然后行动，赋予意义，最后在实践中不断调整修正。</p><ol><li><code>G</code>（Goal 目标）：给坚持一个具体的方向和明确的理由，这是初心</li><li><code>A</code>（Action 行动）：进行大量而持续的行为，或因目标而行动，或因行动而发现目标</li><li><code>L</code>（Love 热爱）：在行动中产生热爱，持续质变，收获惊喜</li><li><code>A</code>（Adjustment 调整）：阶段性调整，战胜倦怠，修正方向，升级目标</li></ol><h1 id="目标goal"><a class="markdownIt-Anchor" href="#目标goal"></a> 目标：Goal</h1><ol><li>确定自己到底想要什么</li><li>将大目标分解为阶段性目标</li><li>设定有挑战但是可实现的目标</li><li>找到实现目标的标杆</li><li>成为别人的标杆</li><li>把超越对手设为标杆</li><li>把第一优先级留给最重要的事情</li></ol><p>一切改变的根源，来自我们大脑想要去改变，所以在做任何事情之前，先要让大脑确认这件事情是否很重要。</p><p>目标不要设置太多，否则一个目标出现问题很可能引发破窗效应，进而恶性循环。</p><p>跨界，斜杠青年，全栈工程师，首先先有一个精通领域，然后再跨。专注于打造长板，然后围绕该长板打造出专业木桶。而且长板的能力是可以迁移到其他板的。</p><p>来一句鸡汤：成功的路上并不拥挤，因为坚持的人并不多。</p><h1 id="行动action"><a class="markdownIt-Anchor" href="#行动action"></a> 行动：Action</h1><h2 id="我们应该做什么"><a class="markdownIt-Anchor" href="#我们应该做什么"></a> 我们应该做什么？</h2><ul><li>认清自己的现状</li><li>做事情我们需要关注两个问题：做这件事情可以给自己带来多少收益；这个收益是否可以积累。</li><li>去做有挑战的事情，走出生理和心理的舒适区，当你走到更高的层次之后再回过头看的时候认知是不一样的</li><li>每天HAIO（嗨喔）：<code>Health健康</code>：运动，健康和饮食；<code>Attitude心态</code>：控制情绪，正能量，不抱怨；<code>Input输入</code>，<code>Output输出</code></li></ul><p>那么是不是就意味着不用做无用之事呢，还是要认清边界，该主题得到的30天认知训练营中有很好的解读。</p><p>积极正向心态的培养方法是：从自己需要培养开始，从一次转念开始，从一次不抱怨开始，从一次收获正能量看是，从一次回归内心开始。嗯嗯，从现在开始。</p><p><strong>衡量输入是否有效的标准是是否进行有效的输出</strong>。你现在有哪些输出的渠道？</p><h2 id="如何让自己行动起来"><a class="markdownIt-Anchor" href="#如何让自己行动起来"></a> 如何让自己行动起来</h2><ol><li>先考虑要不要做，然后再去考虑怎么做到；当你纠结要不要做时，那就去做。必要时，逼自己一把，立刻马上开始。</li><li>降低启动成本</li><li>启动前不要想着追求完美，可以后续再快速迭代</li><li>创建自己的启动仪式，比如手环或者番茄闹弄都可以</li><li>设置截止时间点，根据完成所需要的时间来设置截止时间，而不是最后的交付时间，否则你总是会拖到最后一刻</li><li>愿意付费，购买动力，付费可以保证更好的质量</li><li>玩一把坚持当铺，类似的有很多累死挑战金的应用</li><li>把钻戒丢过栅栏：别丢太远，否则可能捡不回来；钻戒的分量要重，否则不想去捡</li></ol><h2 id="如何提升行动效率"><a class="markdownIt-Anchor" href="#如何提升行动效率"></a> 如何提升行动效率</h2><ol><li>从HAIO四个方面制定量变到质变的表，可以按月或者按周制定，每个方面控制在三项以内，同时需要确定优先级和核心计划，而不是所有的平分时间</li><li>行动中保持极致专注，心流</li><li>充分利用碎片时间，充分利用串并行，随时记录零碎的灵感</li></ol><p>决定我们是否脱颖而出的不是看了多少书，不是听了多少演讲，不是参加了多少培训，而是我们给这个世界输出了什么。</p><p>做问题的终结者，而不是问题的传递者。（边界是什么？）</p><p>过去的某一天积累和善行都将会作用于未来的所有作为，未来你的伯乐很可能就是若干前你不经意间提供帮助的那一位。（无用的事也许只是此时无用，局部无用全局有用）</p><h1 id="热爱love"><a class="markdownIt-Anchor" href="#热爱love"></a> 热爱：Love</h1><p>二社四感：社交，社群；参与感，责任感，成就感，愉悦感。</p><p><strong>社交</strong></p><p>你的朋友圈决定你的高度。如何与更优秀的人建立联系，情感账户，帮助别人，交换价值。如何去做：</p><ol><li>持续增加自身的那块长板，让自己成为细分领域的大牛</li><li>大牛需要的我愿意给</li><li>让自己成为社群领袖</li></ol><p><strong>社群</strong></p><p>社群是提升自己交换价值得好地方。成为社群领袖后，你的交换值就成为了自己和整个社群。借力用力。</p><p><strong>参与感</strong></p><p>优秀的领导者都具备一个能力：让别人认为他很重要，来赋予对方更多的参与感。可以通过结识负责人来提升自己的参与感，同时要积极主动。不是You can you up，而是you up you can。</p><p><strong>责任感</strong></p><p>要想获得更多的参与感，不管是在公司还是社群，不管做什么，都需要把自己身上的责任感激发出来。</p><p><strong>成就感</strong></p><p>成就感可以通过小事情上的成功积累，里程碑思维。关于获得成就感，请注意，不管你做什么，需要可以输出作品，并找到输出渠道。输出才能彰显你的价值，才能收获更多的成就感。</p><p><strong>愉悦感</strong></p><p>培养愉悦感的有效方式是：间接愉悦感带动直接愉悦感，也就是利用可以产生愉悦感的事带动想要做的事。</p><p><strong>如何实践</strong></p><p>围绕自己的第一优先级：</p><ol><li>通过’在行’APP或其他方式约谈相关的大牛</li><li>成为相关社区的一员，如坚持星球，头马</li><li>主动发言，主动要求承担更多的责任</li><li>尝试组建自己的相关小社群</li><li>输出自己的一件作品</li></ol><p><strong>案例</strong></p><p>当时之坚持，今日之热爱。</p><p><strong>婚姻</strong>：婚姻不能顺其自然，需要呵护，最重要的是要肯花时间，创造生活的小情趣，还得付出感情、创意和努力，及时发现和解决问题。</p><p><strong>育儿</strong>：坚持自己的态度，坚持亲子阅读，坚持亲子游戏，坚持运动，坚持把时间花在有趣的事情上。给于自由，创造环境，以身作则。</p><h1 id="调整adjustment"><a class="markdownIt-Anchor" href="#调整adjustment"></a> 调整：Adjustment</h1><p>坚持周期包括：兴奋期，衰退期，倦怠期，重启期，成就期，平静期。</p><p><strong>突破倦怠期的办法</strong>：</p><ol><li>困了累了，就休息一下，然后继续</li><li>给自己一个重新开始的机会，爬起来再战</li><li>调整目标，调整认知，重新赋予意义</li><li>调整行动，增加新鲜度</li><li>调整热爱，让二社四感成为坚持能量站，可以跟《如何想到又做到》相结合</li><li>升级格局和目标，快速的进入一个领域，然后迅速进入更高层级，站得更高看的更远</li><li>回顾GALA，与内心对话，勿忘初心</li></ol><h1 id="融会贯通"><a class="markdownIt-Anchor" href="#融会贯通"></a> 融会贯通</h1><p>坚持，是你在努力实现目标的过程中所留下的痕迹。<br>坚持，是你做成一件事之后分享给别人成功的原因。<br>坚持，是你在意义足够大及足够热爱前行动的过程。</p><p>初心为始，坚持为终。坚持的本质是踏实而认真，是平和而专注，是做出来的，而不是说出来的。</p><blockquote><p>当定下目标后，路人甲说：切，就凭他？<br>当开始行动后，路人甲说：咦，竟然开始了。<br>当行动顺利后，路人甲说：唉，好像还可以哦。<br>当目标实现后，路人甲说：WOW，你看，他就是行。</p><p>做好自己，质疑自然消失，华为终端</p></blockquote><p>四个过程都是需要在实践的过程中不断调整的，而不是一尘不变，这样这个GALA环才能流动，4个过程才能相互促进，形成正螺旋。</p><h1 id="行为指南"><a class="markdownIt-Anchor" href="#行为指南"></a> 行为指南</h1><p>不见见别人怎么做的，你还真以为你很努力啊，不要在低水平上努力，要提高层次。一定要多接触更多的牛人，否则连自己的目标都是属于低层次的。视野。</p><p>如果有两个影响因子，那么四象限是一种很好的说明方式。</p><p>增加自己的输出渠道，重视输出。</p><p>参与到坚持星球，头马社群， 学习DISC，建立自己的小社群，约谈大牛</p><p>不要认死理，在实践过程中一定要调整自己的目标和行动，多维度相互促进，共同进步。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内容概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#内容概述&quot;&gt;&lt;/a&gt; 内容概述&lt;/h1&gt;
&lt;p&gt;GALA能量环：确定自己的目标，然后行动，赋予意义，最后在实践中不断调整修正。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;G&lt;/code
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>我的2019年目标跟踪记录</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%88%90%E9%95%BF%E8%AE%B0%E5%BD%95/%E6%88%91%E7%9A%842019%E5%B9%B4%E7%9B%AE%E6%A0%87%E8%B7%9F%E8%B8%AA%E8%AE%B0%E5%BD%95/"/>
    <id>http://ruanxinyu.github.io/posts/成长记录/我的2019年目标跟踪记录/</id>
    <published>2019-02-04T02:01:50.000Z</published>
    <updated>2019-02-04T05:17:23.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目标跟踪记录表"><a class="markdownIt-Anchor" href="#目标跟踪记录表"></a> 目标跟踪记录表</h1><p><br><a href="/posts/成长记录/我的2019年目标跟踪记录/目标跟踪表.xlsx" title="=======点击下载《目标跟踪记录表》=======">=======点击下载《目标跟踪记录表》=======</a><br></p><h1 id="运动目标"><a class="markdownIt-Anchor" href="#运动目标"></a> 运动目标</h1><h2 id="01月份"><a class="markdownIt-Anchor" href="#01月份"></a> 01月份</h2><img src="/posts/成长记录/我的2019年目标跟踪记录/2019-02-04-12-16-38.png" title="[blog.ruanxinyu.cn]"><h1 id="阅读目标"><a class="markdownIt-Anchor" href="#阅读目标"></a> 阅读目标</h1><h2 id="01月份-2"><a class="markdownIt-Anchor" href="#01月份-2"></a> 01月份</h2><img src="/posts/成长记录/我的2019年目标跟踪记录/2019-02-04-13-17-18.png" title="[blog.ruanxinyu.cn]">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;目标跟踪记录表&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#目标跟踪记录表&quot;&gt;&lt;/a&gt; 目标跟踪记录表&lt;/h1&gt;
&lt;p&gt;&lt;br&gt;&lt;a href=&quot;/posts/成长记录/我的2019年目标跟踪记录/目标跟踪表.xlsx&quot; title=
      
    
    </summary>
    
      <category term="个人成长" scheme="http://ruanxinyu.github.io/categories/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/"/>
    
    
      <category term="个人成长" scheme="http://ruanxinyu.github.io/tags/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>009：时代之巅-互联网构建新经济（水木然）</title>
    <link href="http://ruanxinyu.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%97%B6%E4%BB%A3%E4%B9%8B%E5%B7%85-%E4%BA%92%E8%81%94%E7%BD%91%E6%9E%84%E5%BB%BA%E6%96%B0%E7%BB%8F%E6%B5%8E/"/>
    <id>http://ruanxinyu.github.io/posts/读书笔记/时代之巅-互联网构建新经济/</id>
    <published>2019-01-31T23:04:43.000Z</published>
    <updated>2019-02-03T08:09:36.852Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容概述"><a class="markdownIt-Anchor" href="#内容概述"></a> 内容概述</h1><p>中国发展模式从<code>权利+权利寻租者+政策</code>转向为<code>创新+自由竞争+激励</code>。互联网衍生的新经济模式正在瓦解传统资本，资本在裂变，金融泡沫存在风险，但是这其中很存在很多机会，未来中国差异化越来越大，未来的社会是一个高度分工和协作的有机体，让最合适的人做最合适的事，企业必须思考自己的核心竞争力是什么，如何围绕核心竞争力构建商业模式；个人应该遵守长板原理，构建自己的强者聚集效应。</p><h1 id="内容剖析"><a class="markdownIt-Anchor" href="#内容剖析"></a> 内容剖析</h1><h2 id="政商分家"><a class="markdownIt-Anchor" href="#政商分家"></a> 政商分家</h2><p>过去企业家会异化为官员的经纪人，官员的权力被变相经营，这叫做政经不分，政商不分。现在政商关系从混沌到二元制，这是中国最大的进步。</p><ol><li>政府只负责制定公平的游戏规则，当好裁判，是谓<code>政府善治</code>。</li><li>企业按现代企业制度要求不断创新，提高管理水平与核心能力，是谓<code>企业良治</code>。</li><li>包括消费者在内的社会成员和中介服务服务组织，自主负责，有效协调，是谓<code>社会自治</code>。</li></ol><p>中国经济正在由<code>权利驱动</code>切换为<code>创新驱动</code>。最好例子就是煤老板的发家。</p><p>低价是王道的价值观，摧毁了依靠传统路径打造品牌的信息，生产低质低价的产品变为最佳选择，假货丛生。这是中国经济主体制胜的关键，但是也造成品牌的没落。</p><h2 id="金融泡沫"><a class="markdownIt-Anchor" href="#金融泡沫"></a> 金融泡沫</h2><p>杠杆，房贷，P2P，股市，双杠杆。</p><p><strong>什么叫公正？</strong></p><ol><li>社会财富的分配向底层民众倾斜，抑制豪强的膨胀，从而刺激全社会消费潜力。</li><li>社会财富奖赏劳动创新，智慧创造价值，而非奖赏坑蒙拐骗资本运作和制度套利的人。</li></ol><p>资本是具有天然的扩张性，侵略性。资本掠夺财富的基本逻辑是先让大量货币涌入市场最高经济增长，提高劳动者的积极性，然后架空实体经济，迫使传统企业低价变卖资产，这次再来抄底收购，通过<code>一张一缩</code>变相侵占劳动阶层的财富。</p><p><strong>三个原则：</strong></p><ol><li>财富不能单向汇聚，必须循环供给。</li><li>实体产业是社会的根基，需要保证其发展。</li><li>创新型企业必须得到哺育。</li></ol><p><code>直升机撒钱</code>的主要目的是为了让民众有钱，目前主要有三种方式：</p><ol><li>制定最低工资标准</li><li>完善提高养老保险制度</li><li>调整税收政策，劫富济贫</li></ol><p>产能过剩，流通性变差，战争是消耗资本过剩的一个很好的方式。英国的鸦片战争，美国的波士顿倾茶事件，德国妄图吞并世界，日本侵略中国东北，美国发动的战争。对于当前的国际形势，中国必须做好突发情况的准备。</p><h2 id="危中有机"><a class="markdownIt-Anchor" href="#危中有机"></a> 危中有机</h2><p>飞猪理论有两个条件：经济处于上行期；行业属于红利期。2005年的房地产，2007年的股市，2010年的自媒体。</p><p>中国人生产什么，什么价格就跌，买什么，什么价格就涨。</p><p>对于企业来说，必须思考自己的核心竞争力是什么，如何围绕核心竞争力来构建商业模式。今后的企业战略不是目标做到多大多大，而是在行业里做精。</p><p>互联网供应链采用的是先消费后生产，是一种动态的，扁平的，网络化的组织结构，松散联合具有高度适应性，能够弥补传统组织个性的不足。</p><p>传统供应链是推动式的，由后面的环节推动前面的环节，互联网供应链是提拉式的需要依靠消费者的需求来拎起整个产业链。一个靠投资推动经济增长，一个是靠消费拉动经济增长，其本质是变经济由外力驱动为内力驱动。</p><p>中国自改革开放以来先后经历了三波商业革命：<code>释放人口红利</code>，<code>释放市场红利</code>，<code>释放个人红利</code>。</p><p>用多样化的产品去对接多元化的需求。拳头挡不住细沙，细沙遮不住流水。</p><h1 id="行为指南"><a class="markdownIt-Anchor" href="#行为指南"></a> 行为指南</h1><p>关注最新动态，抓住机会，及时退出，在规则中求生存。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内容概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#内容概述&quot;&gt;&lt;/a&gt; 内容概述&lt;/h1&gt;
&lt;p&gt;中国发展模式从&lt;code&gt;权利+权利寻租者+政策&lt;/code&gt;转向为&lt;code&gt;创新+自由竞争+激励&lt;/code&gt;。互联网衍生的新经
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>008：新零售时代-未来零售业的新业态（水木然）</title>
    <link href="http://ruanxinyu.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%96%B0%E9%9B%B6%E5%94%AE%E6%97%B6%E4%BB%A3-%E6%9C%AA%E6%9D%A5%E9%9B%B6%E5%94%AE%E4%B8%9A%E7%9A%84%E6%96%B0%E4%B8%9A%E6%80%81/"/>
    <id>http://ruanxinyu.github.io/posts/读书笔记/新零售时代-未来零售业的新业态/</id>
    <published>2019-01-27T15:04:43.000Z</published>
    <updated>2019-01-28T15:17:11.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容概述"><a class="markdownIt-Anchor" href="#内容概述"></a> 内容概述</h1><p>作者通过分析电商的困境，实体店为何崛起，零售如何变革，未来零售业如何发展以及根基是什么，以此详细的介绍了零售的发展路线以及应该如何应对，对于零售业具有很好的知道意义。</p><h1 id="内容剖析"><a class="markdownIt-Anchor" href="#内容剖析"></a> 内容剖析</h1><h2 id="新零售"><a class="markdownIt-Anchor" href="#新零售"></a> 新零售</h2><p>互联网确实是个好工具，我们不能否认，但更应该记住产品永生,两者万万不可本末倒置。一个成功的企业要懂得一个道理，首先客户要赢,其次合作伙伴要有,最后企业才会赢。利他,其实是最朴素的商业之道，也是产品的核心。</p><p>电子商务的本质是什么？是直接搭建了一座工厂和消费者之间的桥梁。而且他将所有的产品都呈现在消费者面前，让消费者去对比购买哪个便宜买哪个，哪个看上去靠谱就买哪个。</p><p>新零售就是基于大数据，云计算等新兴科技，以数据为驱动，以满足个性化需求为目的，借助体验式服务完成的点对点商业行为。</p><p><strong>新零售到底新在哪里？</strong></p><ol><li>利用新技术提升用户体验和运营效率，以改变用户的消费场景。</li><li>通过云计算完成数据收集分析，总结用户的购买行为，优化营销方案，进行精准的商品信息推送，关联。</li><li>运用新科技对供应链进行管理和控制，降低成本，提升效率，提升产品品质。</li></ol><p><strong>什么样的心理照可以长足发展？</strong></p><ol><li>加强体验服务，大数据关联。</li><li>实现个性需求，点对点消费。</li><li>打造高品质，强品牌的产品。</li></ol><p><strong>新零售的核心可以概括为4个关键点：</strong></p><ol><li>云计算，以消费大数据为前提。</li><li>个性化，以需求市场为出发点。</li><li>体验式，以情感或社群为纽带。</li><li>点对点，以消费而非批发为目的。</li></ol><h2 id="中国经济大势纵览"><a class="markdownIt-Anchor" href="#中国经济大势纵览"></a> 中国经济大势纵览</h2><p>1998年中国启动了住房改革。</p><p>2002年欧元诞生，世界加速一体化，中国正式加入WTO，向全世界输出产品，中国GDP增速驶入8%以上快速车道。三驾马车（出口内需和投资）开始飞驰。</p><p>2003年中国淘宝诞生。中国进入电子商务，同时也只是制造业陷入了低价竞争的恶性循环。</p><p>2007年美国发生的次贷危机，并在2008年9月份也变成了百年一遇的全球金融危机。2008年11月份中国推出了4万亿计划扩大内需。</p><p>2009年成为了房地产最火的一年。这一轮房价的飙升其实是投资拉动的。</p><p>2010年1月份等“国11条”到2011年1月份的“国八条”史上最严厉的房地产调控政策出台。</p><p>2011年楼市出现转折，中国GDP自2002年起的这一高速增长阶段已到这一年为止。</p><p>2012年到现在中国经济进入调整期，此时的三驾马车里只有围绕一个内需做文章。2012年互联网思维火了。</p><p>2013年称为互联网金融元年。2013年6月份余额宝上线，10月份微信支付功能上线，11月份十八届三中全会提出要发展普惠金融，鼓励金融创新，互联网金融首次进入决策范畴。一夜之间，各种P2P平台开始兴起。</p><p>2014年3月份互联网金融首次写入政府工作报告。</p><p>允许民营银行金融市场参与竞争，同时允许银行破产，2015年5月1日，中国出台存款保险条例，正式实施，最高可赔50万。2015之后很多暴利行业不再存在，民间金融问题开始爆发。</p><p>2015年12月供给侧改革一词横空出世。它的本质其实就是从生产端调节社会的供求关系，控制生产端无序的竞争，从而去产能消化库存，然后补短板。充分发挥国家宏观调控的能力。</p><p>2014年提出一带一路，2015年12月25日亚洲基础设施投资银行成立。2016年1月16日，亚投行进入运行状态。</p><p>2016年10月1日人民币正式加入SDR(特别提款权)货币篮子。</p><p>2017年以来，中国政府做出长远决策，推出两个庞大的经济引擎，新零售和雄安新区。</p><h2 id="电商的困境"><a class="markdownIt-Anchor" href="#电商的困境"></a> 电商的困境</h2><p>中国电商的典型模式有：<code>产业链模式</code>，<code>开放平台模式</code>，<code>行业细分模式</code>，<code>特卖模式</code>等。天猫是开放平台模式的代表京东是产业链模式的典范，唯品会属于特卖模式，聚美优品走的则是垂直细分模式。</p><p>刘强东的<code>十节甘蔗</code>理论，一个产品从创意、设计、研发、制造到定价5个环节应该由品牌商来做。然后接下来的营销、交易，仓储、配送与售后这5个环节应该由零售商来做。</p><p><strong>困境</strong></p><p>阿里巴巴双11只不过是提前收购了第4季度的销售额数据。目的是为了品牌和活跃用户数。活跃用户的下跌对电商平台来说是致命的。</p><p>京东商城盈利能力有限，盈利主要来自于挤占资金的贷款业务。增长进入瓶颈期。</p><p>苏宁实体店商业模式和电商其实类似，但是真正运营层面还是有实质性差别，即苏宁是类似百货也那样不做自营的电商则大多是自营。那么线上线下如何系统是一个难题。</p><p><strong>突围</strong></p><p>当前被认可的突围之路有两条，一是走出去，即<code>跨境电商</code>，二是走进来，即<code>农村电商</code>。跨境电商本质上无非就是把电商的模式继续往外延伸，电商遇到的瓶颈，跨界电商早晚也会遇到，因为跨境电商不涉及新技术新模式。农村电商的本质其实就是让中国更多偏僻角落里基金的好产品有机会进入千家万户。但是存在基础设施的短板。</p><p>围剿。中国电商巨头实现合纵连横，打击竞争对手。阿里与苏宁联手围剿京东。百度系的携程围剿阿里旅行。腾讯战营的美团围剿支付宝和口碑网。</p><p>中国电商将形成阿里巴巴系腾讯，京东系两个电商集团垄断的寡头格局。</p><p><strong>服务升级</strong></p><p>互联网流量红利已经消失，新的增长点是服务升级。</p><p><code>网红+直播+电商</code>本质是电视直销只不过从主持人单向输出变成主播与用户之间的互动沟通，本质上还是营销手段做用户转化，只是电商形式上的创新，不是本质方面的提升。</p><p><code>VR+体验+电商</code>这种体验式消费能够有效提升消费者的购买意愿,但是存在感官体验端的局限性和内容生产端的混乱无序。</p><h2 id="实体店的崛起"><a class="markdownIt-Anchor" href="#实体店的崛起"></a> 实体店的崛起</h2><p>传统零售的产业链条包括生产商，品牌商，百货商城，代理商，终端店。而库存和折扣是吞噬传统商业的两大黑洞。</p><p>传统零售的转折点在于电商的流量成本越来越高，人力物流成本也越来越高。因而线上和线下的成本会达到一个平衡。**过高的利润被消除过，低的效率会提高，过高的租金被降低，而同时过低的物流价格被抬升，这才是趋势。**商业的核心优势正在从价格变成服务，但是比拼起服务电商又怎么可能是实体店的对手。</p><p><code>消费升级</code>的本质是零售业已从一个交易的时代进入到一个关系的时代，商家可以在实体店上大动手脚，从而营造出一种无与伦比的消费场景。</p><p><code>需求升级</code>的本质是消费者从寻求对产品的满足感转型为寻求精神层面的满足感。</p><p>从空间角度来看无法替代的体验感，让实体店在电商面前优势无存。逛街仍然是消费者休闲的主要选项。实体店的核心功能是空间感，经营本质是商圈营销。通过提升体验感，进而让消费者获得存在感，参与感，获得感这才是实体店的核心优势。</p><p><strong>中国电商横行实体店办遍地哀嚎，可为什么日本美国欧洲的实体店就没有遭受到如此迫害？</strong></p><ol><li>日本商场具有最人性化的细节服务，贴心的基础设施，注重细节，以人为本打造极致的实体店用户体验。</li><li>美国在地租，物流成本，购物的便捷程度上，将电商难以生存的优势一网打尽。</li><li>欧洲实体店门店密集，注重差异化发展，注重精细化发展。</li></ol><p>当前阿里，京东，顺丰优选，小米自营店，亚马逊，当当都在布局线下。</p><h2 id="零售业的变革"><a class="markdownIt-Anchor" href="#零售业的变革"></a> 零售业的变革</h2><p>零售的本质就是无限拉近人与人之间距离的过程，而零售的计划其实就是人与人对接路径的不断优化。</p><p>零售业的革命性突破点在于传统意义上的资本主义社会的生产资料不具有可复制性，掌握在资本家手里，而到了互联网时代一切都是公开的共享的。传统的产业链结构是消费者面对渠道商，渠道商面对品牌商，品牌商面对生产商，生产商面对技术上，技术上，面对资本资本面对金融市场。而现在是品牌共赢，渠道共享，流量互通，生产者与消费者直接互动。</p><ol><li><strong>顶层设计公开化</strong>：未来平台化的公司就是把供应商，渠道商，店家等都拉进来，从上下游关系变成平行关系，变被动为主动。</li><li><strong>实体店资产证券化</strong>：以实体店未来所产生的现金流为偿付支持，通过结构化设计进行信用增级，在此基础上发行资产支持证券。</li><li><strong>双轨制管理经营模式</strong>：实体店的投资和经营管理分开，将投资收益与经营收益分开结算，投资者和经营者彼此取长补短形成利益共同体。</li><li><strong>产供销连为一体</strong>：本质是利用电商线上平台掌握消费者的需求数据，然后建立快速反应机制，实现小批量短周期的生产，缩短业务周期。</li><li><strong>利用合作直营模式</strong>：连锁企业将所有分店改为合作直营模式，将加盟店归为直营店，在反承包给加盟店，统一定价，实现实体店，网店，微店三店合一。</li><li><strong>利用大数据管理</strong>：数据将成为决策的重要影响因素。</li></ol><p>对于实体零售行业来说，增加文化体验就是拉高价格的办法。</p><p>金融思维简而言之就是推动资本依次流入最有效率的国家和地区，最有效率的产业，最有效率的企业，最有效率的项目，最有价值的个人，从而实现增值和扩张。</p><p>一切金融服务都是在为有资金的人理财为缺资金的融资，以增值为目标，以杠杆为手段以及用为基石，以风险为边界。信用尤其重要，因为它是启动杠杆的基础。</p><p>资产证券化和消费金融在未来具有整合发展的趋势，其本质是提高社会运作效率。</p><p>未来要实现同款同价，破除层层批发就要实现直营店加盟店和线上店的三店合一模式。三剑合一的最核心问题就是如何才能将加盟店直营化？加盟店直营的核心在于将终端的资产和品牌价值联动起来。将门店的收益权变为资产的唯一路径就是资产证券化。典型的例子就是海澜之家。</p><p>零售业的4个现代化：<code>直营店资产证券化</code>，<code>加盟店金融化</code>，<code>产品差异化</code>，<code>电商众筹化</code>。</p><p>未来公司做大的秘密只有一个，那就是平台化，平台化的本质就是商业从竞争时代跨入大协作时代。</p><h2 id="新零售-2"><a class="markdownIt-Anchor" href="#新零售-2"></a> 新零售</h2><p>未来的消费关系是消费者需要什么，生产者就生产什么。电子商务的本质是定制和外包。消费者开始主导供应链，这一链条的起点是消费者发起需求，由此形成定制，然后经历层层外包，分布式生产再由物流公司将产品送到消费者手中。</p><p>彻底解决零售的问题，必须要做到3点合1同款同价要消除层层批发和不同渠道不同价的问题。</p><p>中国经济主要分为三个阶段，第1个阶段是1992年至2002年为暴利时代。第2个阶段2003<sub>2012年从以销定产到保利时代。第3个阶段是2013</sub>2017年混沌时代。第4个阶段是从2017年起叫做厚利时代。</p><p><strong>厚利时代有7个特征：</strong></p><ol><li>文化溢价</li><li>消费精准化</li><li>市场细分化</li><li>一切以消费者的需求为出发点</li><li>从“互联网+”到“+互联网”</li><li>结构开放化</li><li>三点确定一个商业模式（你提供的服务是什么？你的消费者在哪里？你的通路该怎么建立？）</li></ol><h2 id="未来零售"><a class="markdownIt-Anchor" href="#未来零售"></a> 未来零售</h2><ol><li><strong>个性化本质</strong>：以人为本。</li><li><strong>个性化由来</strong>：心理需求。</li><li><strong>个性化渠道</strong>：大数据融合升华</li><li><strong>终极个性化</strong>：开发自己的产品</li></ol><p>现在处于产能过剩的时代，可以从两个方面为产品增值：</p><ol><li><strong>纵深化</strong>：将产品的某种功能做到极致，越来越娇越来越专注，服务于特定人群，引领行业的不断细分。</li><li><strong>定制化</strong>：为消费者量体裁衣，走个性化生产路线。</li></ol><h2 id="零售的根基"><a class="markdownIt-Anchor" href="#零售的根基"></a> 零售的根基</h2><p><strong>电商供应链的战略思路大体是：商流、物流、信息流，资金流四流合一；制造、零售、物流三业联动；线上、线下两线驱动；以用户价值为核心一键服务。所以，未来供应链竞争的核心聚焦于三点：用户体验，成本和效率。</strong></p><p>信息时代产品或服务开发及生产的速度，以及对市场的反应能力，是企业取得成功的关键。</p><p>以消费者为核心，以数据为驱动，以技术为载体。</p><h1 id="行为指南"><a class="markdownIt-Anchor" href="#行为指南"></a> 行为指南</h1><p>你提供的服务是什么？你的消费者在哪里？你的通路该怎么建立？ 以消费者为核心，以数据为驱动，以技术为载体。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内容概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#内容概述&quot;&gt;&lt;/a&gt; 内容概述&lt;/h1&gt;
&lt;p&gt;作者通过分析电商的困境，实体店为何崛起，零售如何变革，未来零售业如何发展以及根基是什么，以此详细的介绍了零售的发展路线以及应该如何应
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>007：世界在变软（水木然）</title>
    <link href="http://ruanxinyu.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E4%B8%96%E7%95%8C%E5%9C%A8%E5%8F%98%E8%BD%AF/"/>
    <id>http://ruanxinyu.github.io/posts/读书笔记/世界在变软/</id>
    <published>2019-01-26T03:04:43.000Z</published>
    <updated>2019-01-27T12:16:21.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容概述"><a class="markdownIt-Anchor" href="#内容概述"></a> 内容概述</h1><p>世界在变软，大工业时代是硬，数字时代是软。作者从商业，社会，人，价值，中国以及未来等方面对时代的演变从宏观上做了细致的对比和分析，以便于我们知晓未来的趋势所在。</p><h1 id="商业"><a class="markdownIt-Anchor" href="#商业"></a> 商业</h1><h2 id="迭代的时代"><a class="markdownIt-Anchor" href="#迭代的时代"></a> 迭代的时代</h2><p>以前乌鸦通过石子喝水，现在也许可以直接用吸管，这就是进步和创新的表现。</p><p>我消灭你，与你无关。降维打击。柯达的模拟相机被索尼的数字相机打败，索尼又被苹果智能手机蚕食，诺基亚被微软收购，中国手机厂商崛起。方便面之外卖，口香糖之手机娱乐，自行车铺之共享单车，小偷之移动支付。</p><p>每个行业都在整合，都在交叉，都在相互渗透，如果原来你一直认为获利的产品或者行业在另外一些人的手里突然变成一种免费的增值服务，你又如何竞争如何生存。有时候别人把你打败了，他连你是谁都不知道，他也许都不知道你的存在。</p><h2 id="新商业逻辑"><a class="markdownIt-Anchor" href="#新商业逻辑"></a> 新商业逻辑</h2><p>商业形态最大的变化是供应链的变化。公开化，共享化，平台化，制定化就是社会发展的大势所趋。</p><p>传统供应链从上到下由供应商，制造商，分销商，零售商和消费者组成的狭长的链状结构。这种方式有几个弊端，利润层层盘剥，效率层层衰减，库存问题，无法快速感知和响应消费者最新需求。</p><p>新供应链以网红经济为代表，是逆向的，扁平的，消费者需要什么生产者就生产什么，这是一个逆向生长的过程，而且中间的经销，营销环节都会被跨过。</p><p>传统企业最大的特点是计划性，而网红经济最大的特点是无计划性，并且网红经济具有社交媒体的属性，能从用户得到反馈，从而更好的利用大数据。</p><p>精确匹配是共享经济的本质。商业正在由物以类聚向人以群分过渡。</p><p>海量中小品牌正在崛起，他们专注于某一类别，具有垂直打通纵向整合的能力。他们的背后不是一家工厂，而这一个工厂集群能随时进行整合。而这种整合就是平台在背后做统筹运营。所有的共享平台的核心任务机制，平台上各个环节的企业进行授信，降低大家的磨合损耗的成本。而区块链的信任恰恰可以解决授信问题。</p><h2 id="商业秩序重组"><a class="markdownIt-Anchor" href="#商业秩序重组"></a> 商业秩序重组</h2><p>传统商业存在如下的问题（库存，折扣）：</p><ol><li>生产商成本越来越高，竞争越来越激烈，产品同质化严重，利润越来越低。</li><li>品牌商上下游三角债缠身，库存居高不下，电商冲击严重。</li><li>百货商城的经营者目前还停留在扩大营业面积，内部豪华装修的层次上经营成本大幅上升，经济效益递减。</li><li>代理商只是产品流通的中间环节，受制于品牌商的各种政策发言权受限，并且有库存问题。</li><li>终端电商折扣店居高不下，还得和电商拼价格。</li></ol><p>传统的商业模式是赚差价的逻辑。未来的商业模式是商品，应该直接从品牌商手里卖给消费者，然后从工厂到经销商等各个环节再来分配自己的利润，这里没有供货价，也没有供货折扣，而是由品牌商根据库存的仓位，统一制定零售成交价。</p><p>商家和消费者的关系正在从买卖关系升级为服务关系，未来比拼的将是深度服务的能力。社会转向“平台+个人”的结构。平台的价值就是通过运营能够精准的将生产者和消费者对接起来，实现点对点的服务。</p><p>在未来的价值链里，你要想获得价值，自己首先得有存在的价值。</p><h2 id="从打破到大立"><a class="markdownIt-Anchor" href="#从打破到大立"></a> 从打破到大立</h2><p>改革开放40年来的造富运动，从80年代的倒买倒卖，到90年代的建工厂，到2000年后的房地产，再到2001年后的互联网金融。</p><p>暴利时代已经过去，如下方式都有可能会造成反贫：</p><ol><li>楼是美梦破灭</li><li>资金链断裂和违约</li><li>廉价劳动力消失</li><li>同质化竞争和产能过剩</li><li>重污染高能耗企业结构调整</li><li>泡沫产业挤出效应</li><li>政策改变</li><li>资源枯竭</li></ol><p>所谓大破破的是旧规则。什么是旧规则在过去我们只讲目的，不讲手段，发展就是硬道理。很多是以牺牲诚信和道德为代价，为了改变这种粗放的发展方式，我们需要重新建立规则和秩序，这就是大立。</p><p>未来人与人之间最重要的一定是信用。我们首先迫切的需要重塑文化，其次是重建信用。做生意的基本逻辑是千方百计的寻找差价，而做事业的基本逻辑是创造社会价值的同时实现个人价值。互联网释放了我们的个性，此时的社会结构正在变得扁平柔软，有温度有情感。</p><p>未来的社会将实现按需定制，按兴趣组队，按人群服务，小批量制作，不断迭代。</p><h2 id="产业轮回"><a class="markdownIt-Anchor" href="#产业轮回"></a> 产业轮回</h2><p>工业对农业，互联网对工业，资本对互联网权力对资本，民众对权力。我们必须明白两点，一个是空间，你所处的上下游环节是什么？一个是时间，你收割或者是被收割的时间到了吗？</p><p>未来商业的本质可以总结为数一数二，不三不四，五五六六，七上八下，九九归一。任何一个行业都会诞生出两家综合性的平台性的公司会存在第3家第4家，但是一定会出现垂直细分的平台型公司，而且会纵向发展，最后有一个通路新公司进行整合，将合适的产品做到与之相应的消费人群。</p><h2 id="投资曲线"><a class="markdownIt-Anchor" href="#投资曲线"></a> 投资曲线</h2><p>投资有两个重要因素，一个是趋势，另外一个是节点。</p><p>虚拟产业包括线上的信息流，货币流，实体产业包括线下的产品流，人群流。虚拟产业和实体产业相辅相成。</p><ol><li>信息流与媒体电子商务等互联网产业为主</li><li>货币流与银行互联网金融等金融产业为主</li><li>产品由以制造业零售业等实体产业为主</li><li>人群流以实体店培训教育等服务业为主</li></ol><h1 id="社会"><a class="markdownIt-Anchor" href="#社会"></a> 社会</h1><h2 id="未来的城市"><a class="markdownIt-Anchor" href="#未来的城市"></a> 未来的城市</h2><p>工业时代遵循的逻辑是占有大于一切，关注的是有形产品的生产和流通，有形空间的占有和使用率。工业时代的思维是线性的，连续的，可预测的。</p><p>互联网时代遵循的逻辑是连接大于拥有，他不求占有实体产品和有形资产。互联网时代的思维是断点的突变的，不可预测的。</p><p>未来社会的核心财富将不再是产品，而是数据和信息谁满足了消费者的需求，谁掌握了消费数据，谁就可以制定新规则。未来贸易的核心是信息化调度而非传统的物理输送体系。未来的金融是建立在大数据和信用基础上的普惠支持，而非传统的银行抵押模式。</p><p>从现在开始，每个人每一座城市都需要一场自我革命，没有一种商业模式是长存的，没有一种竞争力是永恒的，没有一种资源是稳固的，没有永远的落后，也没有永远的领先。</p><p>在古代每个城市都会建立一道护城河，用来保护自己在互联网时代，开放化，共享化，平台化，流动化才是大势所趋。</p><h2 id="未来的教育"><a class="markdownIt-Anchor" href="#未来的教育"></a> 未来的教育</h2><p>人类该如何修行才能成为地球上真正的主宰者，这是未来教育要研究的问题。现代教育的本质无非是一场教育资源的争夺。未来的教育绝不是所谓名校名师名额的争夺，而是一场人类思想的赛跑，真正能胜出的人不是最有钱的家长，而是最能读懂这个时代的家长。这个时代正在播去我们一件件华丽的外衣，他要的是你真正的情操和最原始的本真，而不是你的学历背景。</p><p>未来是超级个体的时代。教育的意义是挖掘每个人的潜能与天赋，然后不断强化，让每个人发现自我拯救自我成为最好的自己。教育的时间边界也将越来越模糊，最先学会自律的人将最先走向成功。先是自我认知，再是自律，最后是自信，这是教育过程中人格形成路线。</p><p>未来不再有最好的大学，未来只有更适合个人的课程组合，这些课程组合是定制化的，学习中心取代的是学校课程组合，取代的是老师统一授课。而文凭和学历都将消失，教育培养的不再是善于考试的优等生，而是大批创造者，创新者。</p><h2 id="未来阶层"><a class="markdownIt-Anchor" href="#未来阶层"></a> 未来阶层</h2><p>在以前我们的财富是跟劳动时间直接成正比的，可以通过积累原始资本来实现财富。在数字经济时代，连接改变了社会财富的分布，互联网正在加剧贫富分化，大数据，人工智能正在增强赢者通吃的效应。</p><p>在古代土地是最重要的资产。后来机器变成了最重要的资产。在未来数据将成为最重要的资产。</p><p>未来世界被设计成3层：<code>顶层上流</code>，<code>中层中产</code>和<code>底层</code>。第1层世界的人从一个场合到另外一个场合交换共享资源。第2层世界的人工作之余，还要把时间用在技能培养和自我提升上。第3层世界的人在充斥着各种垃圾信息的互联网上度过，用廉价的食品喂饱自己，又被廉价的社交媒体消耗掉。</p><p>人工智能将产生大量无用阶级，指的就是底层。</p><p>未来拥有大量财富和控制数据的人将优先获得机会，他们不断的改变自己，从而使自己获得平常人难以拥有的权利和机会。</p><h2 id="未来的稳定"><a class="markdownIt-Anchor" href="#未来的稳定"></a> 未来的稳定</h2><p>世界唯一不变的就是变化，稳定的本质就是你拥有化变化为不变的能力。未来没有稳定的工作，只有稳定的能力。真正的稳定是你到哪儿都有饭吃，牛叉的人到哪儿都不彷徨。</p><p>未来是平台+个人。这是一场人性的解放，因为我们可以自我支配时间，选择自己钟情的服务和消费者人们之间开始独立，互需，这将促进人与人之间的人格平等。</p><p><code>你是谁</code>？<code>你有什么特长</code>？<code>你能为这个世界做什么</code>？弄清楚这三个问题后，在不断加强自己在某一方面的能力，然后强化到以不变应万变，这才是未来稳定生活之道。</p><h1 id="人"><a class="markdownIt-Anchor" href="#人"></a> 人</h1><h2 id="三种思维"><a class="markdownIt-Anchor" href="#三种思维"></a> 三种思维</h2><p>思维差距是在认知差别基础上增加了行为和习惯元素。</p><ol><li>普通人成群化，精英个体化，王者孤独。</li><li>普通人关注对错，精英关注利弊，王者关注整体。</li><li>普通人注重关系，精英注重规则，王者注重平衡。</li><li>普通人被引导，精英善学习，王者善总结。</li><li>普通人做事，精英做模式，王者做局。</li><li>普通人要安慰，精英要真相，王者要希望。</li></ol><p>普通人看别人短处，看当下，要养家糊口。静音看别人好处，看趋势，谈回报。王者看别人长处，看必然，看空间。人与人的区别就其本质是格局的区别，提升自己的格局才是人生逆袭的必然途径。</p><h2 id="无用阶层"><a class="markdownIt-Anchor" href="#无用阶层"></a> 无用阶层</h2><p>奶头乐战略：该战略包括发展一些低俗产业，特别是泛指那一类让人着迷，低成本能够使人满足的低娱乐内容。这种娱乐十分受欢迎，由于生活辛苦的大众对此需求很高，使其不知不觉的沉溺于享乐与安逸中，从而丧失上进心和深度思考能力。</p><p>人类存在的价值在于能给世界提供两大资源，智慧和劳动力，而劳动力正在被人工智能一点点取代。我们现在能做的就是形成和完善自己的独立思考能力，对各种低俗文化坚决抵制，然后在自己的领域不断深耕和精进。</p><h2 id="定位与热爱"><a class="markdownIt-Anchor" href="#定位与热爱"></a> 定位与热爱</h2><p>社会的组成<code>企业+员工</code>迈向<code>平台+个人</code>的时候，意味着资本正在走向<code>裂变</code>的时代。</p><p>热爱将是互联网时代的第一生产力。由于各种平台和连接的产生，社会的每一个需求和价值都被精准高效的对接起来，尤其是个性化的产品和个性化的需求。于是人的长处决定了人的价值，以前我们都拼命补短板，今后我们需要不断提升长处。未来我们只需要专注于将某一方面做到极致，便可释放出巨大的生产力。</p><p>互联网时代是一个人性回归的时代，我们需要坦诚的面对自己的内心，我究竟是谁，我可以做哪些有意义的事情。</p><ol><li>今后最好的投资是自我投资。</li><li>短板理论失效，长板理论诞生，一定要成为某细分市场的佼佼者。</li><li>兴趣至上，情怀至上，理想之上。</li><li>别人浮躁，你淡定。别人喧哗，你思考。</li><li>适合你做的事，只要开始想干什么时候都不晚。</li></ol><h2 id="人性与伦理"><a class="markdownIt-Anchor" href="#人性与伦理"></a> 人性与伦理</h2><p>一个健康的人的任何一种行为，都是服务于服务于他自己的目的的，这就叫做人性。</p><p>无论你是谁掌握了什么资源，积累了多少产业，总有一种变革针对你，总有一款危机会降落在你身上。没有一种模式是长存的，没有一种竞争力是永恒的，我们所有的经验和积累随时都有可能被颠覆，被清零。</p><p>浮躁是这个社会和时代高速发展阶段的副产品。未来我们会越来越焦虑，会越来越孤独。在效率最大化的思维主导下，人们已经进入了无利不往的状态，对待事物越来越冷静现实理性麻木活得像一台是了既定程序的机器。</p><h1 id="价值"><a class="markdownIt-Anchor" href="#价值"></a> 价值</h1><h2 id="顺势而动"><a class="markdownIt-Anchor" href="#顺势而动"></a> 顺势而动</h2><p>同样是画家，为什么梵高等人终生贫困潦倒，毕加索却如此富有，原来毕加索不仅是一位绘画天才，还是一位营销达人。</p><p>成功有三大因素：<code>天时</code>，<code>地利</code>，<code>人和</code>。天时是指你能借助时代的力量吗？弟弟是指你的努力和勤奋程度如何？人和是指你的天分特长是否能得到发挥。</p><p>一个人一生有三次心理成长期。第一次是发现自己不是世界中心，第二次是发现自己不能改变世界，第三次是认清现实后依然热爱世界。</p><h2 id="诚信无价"><a class="markdownIt-Anchor" href="#诚信无价"></a> 诚信无价</h2><p>穷人积累财富的轨迹是：努力工作-&gt;挣工资-&gt;消费-&gt;储蓄。</p><p>富人积累财富的轨迹是: 努力打拼-&gt;创造利润-&gt;想办法向银行借钱-&gt;用负债的方式理财创业。</p><p>负债也是一种能力。吸纳财富的最好办法就是不断给自己塑造诚信，使自己成为人心所向之地。</p><p>财务的本质无非是两个字诚信水往低处流，但是财富永远都往高处走，哪个高处呢？当然是信用的高处。</p><p>金融战争的本质无非是抢占全球信用的制高点。</p><h2 id="阶层流通"><a class="markdownIt-Anchor" href="#阶层流通"></a> 阶层流通</h2><p>中国人的财富形式经历了<code>粮票（花钱的权利）</code>-&gt; <code>存款（现金数字）</code>-&gt; <code>房产（固定资产）</code>-&gt; <code>估值（虚拟资产）</code> 4个阶段。</p><p>未来社会越来越共享化，公开化，公共化。财富在合理的状态是，你拥有的并不是一款的钞票，而是拥有支配资源的能力，然后需要让资源继续流向最有能力的人身上才能实现财富增值，同时也能成全了他人。</p><p>接下来的机会在哪里？答案是：一定要做某个细分领域的第一。要专注专注再专注，要充分认识自己，发掘自己，坚持做某一细分领域的第一，哪怕是一个非常小的领域，能做到这一步你就不再平凡。未来那些基于平台之上的小众兴趣，小众价值观，小众梦想，小众爱好都将被成全。每个人都有逆袭的机会，当下才是最好的时代。</p><h2 id="触点"><a class="markdownIt-Anchor" href="#触点"></a> 触点</h2><p>生意二字以前的本质是买卖，未来的本质是美好生活，人类要做的不是机器的傀儡，也不是产品的跟随者，而是生活的主导者，未来不再由生产者和消费者之分，我们都是生活者。</p><p>只有实现了个性化定制，才能解决社会的根本问题，定制化带来的多元化，生活因多元而美好。</p><p>全世界的工业有三种模式，第1种是福特模式-流水线模式，第2种是丰田模式-产业链模式，第3种是海尔提出的全新商业模式-生态圈模式。</p><p>合伙人模式目的是取代传统的雇佣制，以此来充分调动全民生产的积极性。（通证经济）</p><p>传统时代流通为王，互联网时代流量为王，物联网时代一定是触点为王。创造者的最大优势在于它能让价值在自己身上放大，能创新能创造未来，只有这样的人才能立于不败之地。</p><h2 id="共享经济"><a class="markdownIt-Anchor" href="#共享经济"></a> 共享经济</h2><p>在互联网时代不是奇货可居，而是奇货可租。在不久的将来，</p><p>一件物品的所有权和使用权是分离的，未来我们交易的更多的是物品的使用权，而不是所有权。</p><p>一件物品究竟属于谁并不重要，重要的是我们每个人都可以使用它。所以在未来一切资产都会变得更廉价，而唯一变得更昂贵的东西就是你的创造力。</p><h1 id="大象无形-中国软实力"><a class="markdownIt-Anchor" href="#大象无形-中国软实力"></a> 大象无形-中国软实力</h1><p>物质匮乏的时代已经过去，我们已经处于产能严重过剩的时代。现在的重点不是生产而在于分配。那么中国能做的是什么呢？那就是以互联网和各种新技术为基础，提供各种能使世界物质分配更加均衡合理的应用工具，进而开创出一种更加合理，健康，和谐的价值分配体系。</p><p>中国从输出产品已经转换为输出模式。曾经我们只要把美国的互联网模式照搬过来，就可以获得成功（<code>US cpoied to China</code>），而如今大量的中国互联网公司开始向海外反向输出商业模式（<code>China copied to US</code>）。</p><p>中国新四大发明：<code>高铁</code>，<code>网购</code>，<code>共享单车</code>，<code>移动支付</code>。</p><p>国与国之间的竞争分为三大阶段，第1个阶段为资源的竞争，第2个阶段为制度的竞争，第3个阶段为文化的竞争。中国人口红利在消失的同时，中国的文化红利制度红利却在悄然积累着新的能量。在一带一路的国际大战略中，中国不仅仅要向外输出产品和应用工具更需要输出自己的文化和文明。文化传播讲究的是潜行默化，寓教于乐，未来以旅游为载体的文化项目会越来越多，旅游已经成为促进文化开放，促进文化交流的大平台。</p><p>中国的世界级的领导力形成主要有如下三个方面：</p><ol><li>人口众多，因而市场和规模巨大，有能力吸引来自全球的优秀企业家技术和资金。</li><li>中国的政治社会制度，使得它能够比西方国家更快更有效的做出决策，并加以贯彻实施。</li><li>在动荡的年代，全球需要全球化日益深化，需要国内总需求被提振，也需要新的工业革命和新一轮的基础设施建设，调动各种资源。</li></ol><p>第1次工业革命发生在英国，英国与其邻国法国最先抓住的机会，是最老牌的资本主义国家。</p><p>第2次工业革命中的美国和德国成为资本主义国家的后起之秀同英法老牌资本主义工业国家产生抗衡。</p><p>第3次工业革命源于美国和苏联在航空航空航天，原子能，生物科技，计算机等领域的相互争霸。</p><p>第4次工业革命就是当下是以中美为首的两大国家在互联网，大数据，云计算，人工智能等方面的相互竞争与发展。</p><h1 id="关于未来"><a class="markdownIt-Anchor" href="#关于未来"></a> 关于未来</h1><p>美国主导的世界经济结构分为三个阶段<code>资源国</code>，<code>生产国</code>和<code>消费国</code>。</p><p>中国设计的新世界秩序的代表是一带一路，亚投行，自贸区，高铁技术援助等。其中一带一路是通路和桥梁，亚投行是金融支持自贸区，是新规则的嘉羿窗口，高铁技术可以帮助资源国进行资源优化和整合。</p><p>美国版的全球结构是自上而下的三个层级的金字塔结构，而中国版的全球结构是平等的，去中心化的结构。</p><p>人类迄今为止共经历了4波全球化，分别是航海时代，殖民时代，霸权时代，多极时代。多极化，平台化，开放化就是第4轮全球化的重要特征，也是历史的大势所趋。协作，共享，开放是新一轮全球化的大势所趋。</p><p>区块链正在引领我们从个人信任制度，信任，步入数据信任的时代。互联网是用来传递信息的，还是区块链子是用来传递价值的。人类正在从信息互联网过渡到价值互联网的伟大时代。</p><p>矛盾是推动一切事物进步的根本力量，历史也不例外。每次拐点已到来，崭新的事物都会解决原来的矛盾，但同时也会带来新的矛盾。</p><h1 id="软实力的60个体现"><a class="markdownIt-Anchor" href="#软实力的60个体现"></a> 软实力的60个体现</h1><ol><li>对于每个中国人来说，传统奋斗的五大关键词背景、学历、资源、人脉、资历;今后奋斗的五大关键词知识、创新、独立、个性、理想。以前是“学好数理化，不如有个好爸爸”，现在是“有个好爸爸，不如自己有文化”，中国的“新知识分子”将重登历史舞台。</li><li>中国一大批有“匠心”的人的社会地位将获得提升，诸如那些脚踏实地的工匠、程序员、设计师、剧、作家、艺术家等。因为互联网已经把社会的框架搭建完成，剩下的就是灵魂填充，所以即便是在普通岗位工作的人们，他们的社会地位也将获得提升，获得尊重。</li><li>以前，资源是一个人最大的财富;未来，信用才是一个人最大的财富。人与人之间的信任程度决定着一个社会的运转效率。在大数据的推动之下，未来规范人们行为的不再仅仅是法律，还有信用。“水往低处流，财往高处走”，信用值越高的地方越容易聚财失信者将寸步难行，同时，懂得自律的人最先得到自由。</li><li>这是一个机会和选择都看起来更多的时代，所以比善于选择更重要的是善于舍弃，真正的高手都具备一种深思熟虑后做出选择的战略能力</li><li>以前，我们的对手总是在身边或同行里“冒”出来，未来是跨界打劫、迅速迭代的时代，竟争变成了社会化的大竞争，你永远不知道你的对手在什么时刻、从什么方向“冒”出来。你唯一能做的就是居安思危、时刻准备着。</li><li>以前，社会上的大部分人都过着朝九晚五的生活，未来的工作形态将越来越短平快，支付报酬越来越直接与结果挂钩，所以独立的人会越来越多。这些人更善于迎接各种变化和挑战，无论到哪儿都能很快找到自己的位置，和大家协作共事，当然也能独当面，这就是一个人的兼容性。未来没有稳定的工作，只有稳定的能力，真正的能力是你到哪里都有饭吃。</li><li>未来社会，男性和女性的分工会越来越模糊，男性和女性的性格差异也会越来越小，很多女性可以独当一面，很多男性也可以做细腻的工作。</li><li>未来互联网平台最大的价值空间在哪里呢?那就是能给大家赋能。</li><li>中国正在兴起大量自由职业者，社会的基本结构从“公司+员工”，变成了“平台+个人”。每个人都将冲破传统枷锁的束缚获得重生的机会，关键就看你是否激发出了自身潜在的能量</li><li>未来的社会，分工越来越完善，细分领域越来越多，纵向发展是人发挥价值的一大趋势，每个人都在自己的领域专注而努力，人会越来越孤独，每个人创造的价值也都能被精准核算。人与人互相干涉的情况会越来越少，大家不必恶语相向，做好自己就是对世界最大的回报。</li><li>未来的社会，人与人之间会有一定的界限感，最好的关系是欣赏彼此的长处，懂得对方的不容易，互相欣赏和关注。守住自己的界限，不侵犯他人的界限，大家彼此独立</li><li>未来不会再有“贫困人口”，但会产生大量的“无用人口”。因为在人工智能时代，只启动哪怕20%的人，社会就可以良好运转</li><li>比能赚钱更重要的是让自己值钱。人人都在赚钱，但不是人人都值钱。赚钱是外在的短期行为，个人价值的提升却是内在的长期结果。学会“赚钱”只是第一步，让自己“值钱”才是一个人真正的价值体现。在个体崛起的时代，一定要注意积累自己的个人品牌、信用及影响力。未来最好的投资是自我投资。</li><li>热爱才是第一生产力。你的热爱和兴趣决定了你所处的社会位置。未来，会有越来越多的“爱好”变得实用，越来越多的兴趣变得有价值。过去受限于市场规模不能成立的特色小生意，现在可以利用互联网找到精准客户;过去受限于信息障碍不能满足的个性化需求，也能利用互联网找到生产个体传统社会最敬重的有两样东西是经验，另一个是权威。而在未来的流动社会里，这两样东西最容易成为成功的阻碍。轻装上阵、一无所有反而更容易成功，所有的优势随时都可能会转化成劣势，所有的劣势也很容易成为优势，所以我们必须时刻都有种“归零”的心态。</li><li>劳动力阶层面临一场空前的危机，工厂里的蓝领正在被机器人所取代，写字楼里的白领正在被人工智能所取代。未来只有就是价值创造者。千万不要让自己成为一个重复劳动者，也不要只拥有一种技能，要让价值在自己身上放大，要敢于创新、能创造，才能立于不败之地。</li><li>未来可以分为三种格局，即做事一做势一做局。初级格局是做事，靠人和工具;中级格局是做势，靠管理和规则;高级格局是做局，靠系统和制度。</li><li>从现在开始，你要认清自己所处的人类历程的位置、经济周期的节点、行业变化趋势，在此基础上，再考虑自己的能力、努力和天分、机遇等因素。天时、地利、人和这三大因素中，天时最重要。</li><li>传统的金融，以银行抵押模式为主，服务的是大中型企业，用穷人的钱补贴富人。未来的金融，是建立在大数据和信用上的普惠支持，服务的是大量有价值的小微企业或个体。这就更好地顺应了个体崛起的大势所趋。</li><li>以前是“占有大于一切”，未来是“连接大于拥有”，最重要的不是你拥有了多少有形资源，而是你能配置和影响多少资源。衡量一个人的能量，就看他可以随时和多少人建立连接—万物皆不为我所有，但万物皆为我所用。</li><li>传统社会的核心财富是产品，而未来社会的核心财富是数据。谁连接了消费者的需求，谁掌握了消费数据，谁就可以制定新规则。</li><li>法治的最高境界是德治，德治的最高境界是无治。什么是无治?即依靠利益关联进行互相制衡。在互联网时代，每个人都与外界有无数个连接点，依靠这些连接点，每个人都将直接绑定自己的行为，贪婪、懒惰、无知作为人性的负面，都将被自然克制。</li><li>传统的发展路径是关注人们征服自然的进度和力度，追求的是人类单方面的物质增长。未来的社会发展思路是让人类与自然、人类与资源等协作发展，我们在构建一个命运共同体，这才是人类的可持续发展战略。</li><li>以前，现金流不如利润率重要;未来，现金流远比利润率重要。传统商业盈利的逻辑是赚差价，产品经过各个环节，每个环节都会加价然后再卖出，所以盈利模式是层层加价的模式。这是种侵吞关系，你的上下游环节究竟盈利多少你是不知道的。而未来，由于互联网的共有性和连接性，消费者有机会直接与各种品牌方接触，于是越来越多的消费者能够直接付钱给品牌方(生产方)，这就导致现金只是从各种渠道方和服务方经过了一下而已。</li><li>传统的教育是一刀切、标准化、单向填鸭式的应试教育这无形中磨灭了很多孩子的天赋。随着人们的觉醒，未来的教育将更加体现出因材施教、双向互动化的网络化教育。未来你的大脑能容纳多少知识要点真的不再重要了，因为人工智能，计算机的知识能让你随时取用，最重要的是你的融会贯通的能力，由一滴水看见大海，由一粒沙而感知世界，让学生从认知走向自信。</li><li>所谓“一流的企业做标准”这句话将不再成立，这是大工业时代的逻辑，所有产品都被整齐划一地生产出来，标准的制定者可以坐享其成。未来所有的标准只有一个，那就是能否满足消费者的需求。而消费者的需求一定是个性化、多元化的，它对企业有两方面比较高的要求:第一是提供定制化的能力(科技)，第二是对接消费者的能力(互联网)</li><li>“雇佣”时代已经彻底过去了，“合伙人”时代已到来。无论你愿意出多少钱，你都很难雇到一个优秀的人才，除非你跟他合伙。大胆、大度地把股份转让出去吧!海纳百川，有容乃大</li><li>中国电子商务进化论:B2B—B2C-C2C—C2B一C2F，即从商家对商家、商家对个人、个人对个人到个人对商家，最终是个人对工厂。未来每一件产品，在生产之前就知道它的顾客是谁。个性化时代到来，乃至跨国生产和定制，将彻底打破以美国为主导的全球产业链和贸易结构。</li><li>中国互联网的进化论路径:传统互联网一移动互联网一物联网。传统互联网就是PC互联网，它解决了信息对称;移动互联网解决了效率对接;物联网需要解决万物互联—数据自由共享、价值按需分配。各尽其才、各取所需，让每一个人都能找到与之相关联的人，然后进行各种合作。</li><li>互联网改变世界的方式，正在从“信息”革命升级到“效率”革命。上一个30年，世界诞生了很多的互联网企业，都是以信息分享”为价值的，比如 facebook谷歌、腾讯、百度、阿里巴巴等;但是眼下我们更需要真正解决世界物质的分配问题，需要把物品置于最需要它的位置，或者分配给最需要它的人。因此，未来的30年，将诞生一大批垂直的应用型软件或平台，能够更好地分配世界的物质资源，解决产能过剩的问题，创造更加普世的价值。</li><li>中国媒体的进化路径:传统媒体一新媒体一自媒体一信息流。媒体正在由集中走向发散，由统一走向制衡。自媒体的兴起将对传统媒体形成有益的补充，它将使中国的话语权开始裂变，而未来人人都是一个自媒体，信息流的产生将使媒体消亡。</li><li>中国营销业态的进化论方式，即媒介为王一技术为王一内容为王一产品为王。传统广告总是依靠媒介的力量去影响人，比如央视的招投标。后来的互联网广告开始依靠技术实现精准投放，比如按区域、按收入、按时段投放。再后来的社交媒体的崛起使好的广告能自发传播，而未来最好的广告一定是产品本身，最好的产品也一定具备广告效应</li><li>中国商业的盈利方式先后经历了暴利时代一薄利时代一厚利时代三个阶段。暴利时代存在于改革开放初期，当时产品紧缺需求激增，而且信息不对称;后来电子商务的兴起，产能过剩，导致商家恶性竞争，开始打价格战、促销战，于是进入到了薄利阶段;而今后的产品开始走个性化、定制化和个体化路线，产品的增值空间被打开，从而步入厚利阶段。</li><li>未来的一切内容都将开放化，版权效益将进入增值模式，而不是出售模式。所谓的内容为王，其实就是一切中介、渠道都会被边缘化。平台作为基础设施也可以被取代，只有价值创造者才是永恒的。</li><li>做生意，以前的本质是“买卖”，未来的本质是“生活的意义”，未来不再有消费者，我们都是生活者。未来商业的本质，如果用三个字概括，那就是“被需要”;如果用两个字概括，那就是“奉献”;如果用一个字概括，那就是“爱&quot;</li><li>中国的产业结构可以总结为:一维的传统产业一二维的互联网产业一三维的智能科技产业。一维世界正在推倒重建(实体经济的重组)，二维世界已被划分完毕(BAT掌控)，三维世界正在形成。高维挑战低维总有优势，降维打击几乎是必胜的，所以网店可以“冲击”实体店，而微信的对手一定会在智能领域诞生，真正的好戏还在后头。</li><li>中国当下的企业分为三个等级:三等企业做服务:二等企业做产品;一等企业做平台。企业的出路唯有升级为平台化，平台化的本质就是给创造者提供创造价值的机会，把自己变成一个价值创造的平台。未来所有的公司、企业、组织都将平台化。</li><li>原来中国的基本细胞是“企业”。社会上的每个“需求”和供给”往往都是由企业到企业来完成的，而今后中国的基本细胞是“个人”。供需双方很多都在个体化，中国的社会结构将越来越精密细致。可以做一个这样的比喻:如果把中国经济比作血液循环，那么今后它的毛细血管会更加丰富，输送和供氧能力会更加强大</li><li>原来的企业是横向发展，越做越大，涉及面越来越宽，因此企业越做越容易形成“同质化竞争”。今后的企业应该是纵向发展，越做越精，挖掘深庋越来越深。这种变化将使行业越来越垂直、协作越来越完善。于是社会越来越细分，结构越来越周密企业与企业之间、行业与行业之间的独立性越来越强，“差异化共存”成为商业主流。</li><li>中国的一线或新一线城市正在分层。老城区居民主要是本地“土著”，正在逐渐衰老;新城区居民作为城市新贵，是新兴力量的代表者;城乡结合区则以外来务工人员为主。与此同时，城市的富人区、租赁区也将越来越明朗</li><li>城市的“单中心”化正在被“多中心”化所取代。以前个城市的人会觉得逛街就要去某某商业繁华大街，所以那里寸土寸金。未来城市将出现多个区域的中心，多个中心交相辉映才是最好的发展势态，这将势必改变传统的房价格局。</li><li>中国城市格局正在改写。“北、上、广、深”正在变成北、上、深、杭”。传统贸易的衰落将广州拉下马，跨境电商的兴起将杭州扶上位，未来中国的城市格局应该是“北京的权力调控上海的金融运作+深圳的智能科技+杭州的电子商务”。</li><li>中国经济的增长动力先后是“权力驱动市场驱动”需求驱动”。最开始的改革开放由政府引导，所以权力发挥作用很重要;后来逐渐转换成了市场主导，但是导致无序化竟争，出现了产能过剩;今后一切生产都以消费者的需求为出发点，以创造价值为目标。</li><li>中国经济模式的进化路径:计划经济一市场经济一共享经济一共产经济。在“计划经济”阶段，中国实行“按计划生产，按计划消费”;后来开始发展“市场经济”，中国开始“按市场生产按利润分配”;而今后我们将以消费者的需求为出发点，开始遵守按消费生产，按价值分配”的原则;未来的中国一定会实现“按需求生产，按需求分配”，创造无限接近需求。</li><li>中国商业本质正在从“物以类聚”切换到“人以群分。原来社会结构按“物品”归类，未来社会按“人群”归类。相同爱好、相同志向的人很容易汇聚到一起。</li><li>中国商家和消费者的关系可以分为三个阶段，即买卖关系、服务关系和共生关系。以前买和卖是商业的基本逻辑，核心是“产品”，于是有了差价和利润;后来以满足消费者一切需求为基本逻辑，核心是“服务”，产品要虚拟化、增值化;未来商家和消费者的界限会越来越模糊，每个消费者都将成为一名生产者，价值共享。</li><li>中国互联网衍生出了三大新兴的经济形式，即个体经济共享经济和零工经济。“个体经济”体现为自由职业者大量兴起，象征着自由;“共享经济”是人们开始分享自己的资源，体现出资源共享;“零工经济”是人们利用互联网和移动技术快速匹配供需方，它象征着多样化。这三大新模式不断地蚕食主流的商业模式正在诞生新的商业文明。</li><li>中国经济正在先裂变后聚变。裂变指的是企业和组织大量断裂，很多自由职业者被释放，而同时这些自由个体又在不断地进行重组，共同完成某个项他们挥之则来、来则能战，灵活、独立又可高度协作。可以肯定的是，无论是裂变还是聚变，都可以释放很大的能量</li><li>随着中国经济重心进一步南移，粤港澳大湾区作为区域协同发展的先行者，有可能在中国下一轮增长中占据举足轻重的地位。南方地区将以工商业为主，北方地区将以劳动力和资源输出为主，这有利于中国产业结构的分层，进入区域协同发展阶段</li><li>今后将无差价可賺。由于传统社会的信息不对称，造成了供给”和“需求”始终是错位的，因此出现了一批商人去对接并从中谋利。而互联网搭建起的商业基础会越来越完善，今后供需双方可以随时精准连接。所有的中间环节都没有了，赚差价的逻辑也就不存在了。“经商”一词需要重新定义，传统思维彻底落伍了</li><li>中国商业角逐的核心先后经历了地段一流量—“粉丝”三个阶段，房地产经营的就是地段，传统互联网经营的就是流量自媒体经营的是“粉丝”。以前是没有调查就没有发言权，今后是没有“粉丝”就没有发言权。未来就是“影响力”和“号召力”之争，“核心粉丝”的瞬间联动是未来商业的“引力波</li><li>中国的互联网平台正由“跨界互联”迈向“兼并垄断”。平台一旦垄断市场就会自己制定这个行业的规则，就将书写新的秩序格局。虽然创新的机会越来越少，但合作过程中会产生聚变效应将使一大部分人受益</li><li>中国精神文明的红利期正在到来。传统的物质文明进展步伐已经开始放慢，因为工业化已经将社会各项硬性设施布局完善物质的野蛮增长期已经过去，而互联网又已经把所有的连接搭建完毕，柔性内容开始迅猛增长，新文化行业将是一个增长点。</li><li>传统社会注重的是生产效率，关注的是对有形空间的占有和使用效率;未来社会注重的是分配效率，关注的是价值节点的分布与连接。我们已经生产出来太多的产品，乃至进入了产能过剩的时代，未来最重要的不是你能生产什么，而是你能不能把最合适的东西送到最合适的人手中，使社会资源精准匹配、各归其位，这也是未来创业应该遵循的基本逻辑。</li><li>世界的本质无非就是一个大循环，它包含四股流体，即线上的货币流、信息流;线下的产品流、人群流。首先，我们要学会看大势，要把每一股流体的方向和趋势看透。然后踩准节点，每股流体都有N个节点，这就如人体有奇经八脉、关键穴位是一样的，商业的本质无非就是给世界把把脉、点点穴。</li><li>中国人的财富形式先后经历了票据(花钱的权利)一存款(现金数字)一房产(固定资产)一估值(虚拟财富)四个阶段，未来的财富形式一定是估值或市值，趋于虚拟和抽象，只是一个数字。即你拥有多少财富，并不代表你就可以随便动用这些财富，而是代表你有支配这些财富的权利，财富多少意味着调动资源的大小。究其本质，是整个社会越来越共享化、公开化、公共化。</li><li>中国未来将建立起一个伟大的“超级互联网公司”，将BAT收入囊中，通过高效协作和行业细分来优化配置社会的各种资源，包括各种大大小小的、边边角角的零部件，不浪费一颗螺钉、不放弃一个灵魂，将整个社会带入价值创造和吸收的大循环。这家“超级公司”的股东就是人民，CEO是政府，员工是公务员。</li><li>世界经济的发展永远都是两股势力的交融:金融和实体、线上和线下。两股势力一边交合一边延展，类似于DNA螺旋式延展，你上我下，或者我下你上;当下就是实体正在上位的时刻。所以现在的线上产业(电子商务、互联网)都跑到了线下(实体店商场)去抢占地盘，“互联网+”变成了“+互联网”。所谓的新金融、新零售、新制造无非就是这个意思。</li><li>未来线上的一切都是免费的，包括文章、书籍、视频、电影、音乐等，所有的创造者都会无私地分享自己的作品，所有的生产者都有机会展示自己的产品;未来线下的一切都是收费的，如影院、餐厅、演唱会、见面会等。究其本质，线上资源在公开化、共享化，而线下的场景和体验才是消费的重点。</li><li>人类社会的发展路径:部落社会一村落社会一家族社会家庭社会一个体社会。世界正变得越来越细致、周密。以前各种关系是面对面发生的，后来发展成了线对线，未来的世界是由各种“触点”(个体)构成的，个体崛起也就意味着各种“组织”的“下沉”，一切组织都必须下沉，把舞台留给“个人”。</li></ol><h1 id="行为指南"><a class="markdownIt-Anchor" href="#行为指南"></a> 行为指南</h1><p>找到自己的细分领域，然后做到极致。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内容概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#内容概述&quot;&gt;&lt;/a&gt; 内容概述&lt;/h1&gt;
&lt;p&gt;世界在变软，大工业时代是硬，数字时代是软。作者从商业，社会，人，价值，中国以及未来等方面对时代的演变从宏观上做了细致的对比和分析，以
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>006：如何想到又做到</title>
    <link href="http://ruanxinyu.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A6%82%E4%BD%95%E6%83%B3%E5%88%B0%E5%8F%88%E5%81%9A%E5%88%B0/"/>
    <id>http://ruanxinyu.github.io/posts/读书笔记/如何想到又做到/</id>
    <published>2019-01-24T14:04:43.000Z</published>
    <updated>2019-01-27T12:16:21.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容概述"><a class="markdownIt-Anchor" href="#内容概述"></a> 内容概述</h1><p>作者持久改变分为两步：首先确认你想改变的行为是哪一类型，然后运用改变这类行为所需的武器SCIENCE模型。行为分为自动行为，冲动行为和常见行为三种。SCIENCE模型包括：阶梯模型，社交磁力，要事为先，极度容易，行为在前，致命吸引和反复铭记。</p><img src="/posts/读书笔记/如何想到又做到/2019-01-26-07-36-15.png" title="[blog.ruanxinyu.cn]"><h1 id="文章剖析"><a class="markdownIt-Anchor" href="#文章剖析"></a> 文章剖析</h1><h2 id="武器1阶梯模型"><a class="markdownIt-Anchor" href="#武器1阶梯模型"></a> 武器1：阶梯模型</h2><p>要实现目标，就要先专注于迈出第一步，找到正确的第一步，把所有的精力都放在实现第一步上，然后花时间回顾你的进展，接着在第二步中重复这个过程。</p><blockquote><p>快速迭代，进入上螺旋，然后快速应用PDCA</p></blockquote><p>因为锚定效应的存在，当我们进行任务拆分时，大多数会想出3到10步，而全然不管目标是大是小，所以造成我们的行动不够小，难以迈开第一步。他们往往以为自己规划的就是达成目标的小步骤，但实际上他们设计的步骤相当大。</p><p><code>梦想</code>比目标更大，它一般要花三个月或者以上的时间才能达成，而且你此前从未实现过这一梦想。</p><p><code>目标</code>是人们定制的过渡计划，分为长期目标和短期目标，长期目标一般要1到3个月，短期目标一周到一个月的时间。</p><p><code>步骤</code>大多只需要不到一个星期来完成，是实现目标的道路上要逐一划掉的小任务。</p><p>一般而言，设定要花一个星期完整的目标，并规划出不到2天就能完成的步骤，是使用这套方法的关键。我们要专注于完成具体的小目标。</p><p><strong>为什么阶梯模型会有效？</strong></p><blockquote><p>因为人们会快而小的奖励赋予的价值高于延迟到来的大奖励。专注于小步骤，能让人们更快乐，更积极的继续尝试，因为他们得到了更多的奖励。</p></blockquote><p>阶梯模型有两个重要的组成部分:</p><ol><li>首先是使用模型来规划恰当的渐进步骤，目标和梦想</li><li>其次是回想</li></ol><blockquote><p>回想有利于建立自我效能感，即改变是可实现的。值得一提的是，只有在认为自己完成了当下步骤的时候，人们才应该回想上一部，否则可能会适得其反。</p></blockquote><p>阶梯模型不仅仅可以用于个人习惯改变，同时也可以应用于商业之中，比如说开发一款应用时，就应该考虑阶梯模型，提高参与度和留存率，让用户坚持使用产品。</p><h2 id="武器2社交磁力"><a class="markdownIt-Anchor" href="#武器2社交磁力"></a> 武器2：社交磁力</h2><p>这个强大的社群必定具有社交磁力。通过分享视频和群发信息的方式，召集具体的一个人或一群人，是建立社交磁力的一种途径。</p><blockquote><p>想要对成员产生持久的影响，就需要有足够多的人为社区提供力量，创造社交磁力。对于规模非常小的事情，需要每个人的付出，对于较大的事情来说，需要15%的参与者投入社交磁力的建设。</p></blockquote><p><strong>磁力社群需要具备六大要素：</strong></p><ol><li>信任需求：信任能够让大家更乐于学习和改变，保持开放的心态</li><li>融入需求：建立社交规范</li><li>自我价值的需求：提升自尊心和积极性</li><li>社交磁力的需求：不过社群成员没有改造到社交磁力，你就必须改变事情，让他满足成员的心理需求</li><li>得到奖励的需求</li><li>赋权需求：自我效能感，榜样和导师的引领</li></ol><p><strong>什么样的社群能够带来持久改变</strong></p><ol><li>确定适合的同伴榜样</li><li>让榜样发挥示范作用</li><li>开放社群</li></ol><p>社群里必须有15%左右的人是同伴榜样。</p><p>榜样的标准是，跟将要加入社群的其他人有着相同的人口统计特征和心理特征。</p><p>同伴榜样将自己的故事，分享给那些不愿意分享的社群成员，给对方点赞，以及别的方式，跟其他同伴进行互动，这就是我们创造社交磁力的方法。这是群成员都必然感受到来自同伴榜样的鼓励，希望自己改变的健康压力。重要的是，这是一种健康的压力，他让社群成员产生信任感，感受到来自他人的支持，而不是自己不参与就会受罚。</p><p>4类经常使用的榜样：<code>专家</code>，<code>名人</code>，<code>传播者</code>，<code>本土榜样</code></p><p>对于到来的新访客，你只应该为他们设定的初始目标：加入后的第一个星期内，为社群做些贡献。</p><p>信任，归属感，认同，建立更深层次的连接，这不是广告营销所能达到的。</p><h2 id="武器3要事为先"><a class="markdownIt-Anchor" href="#武器3要事为先"></a> 武器3：要事为先</h2><p>你认为最重要的东西对你选择做什么有着很大的影响，如果人们认为这件事很重要，他们就能坚持了。</p><p>人生头三件最重要的东西是<code>金钱</code>，<code>社会关系</code>和<code>健康</code>。金钱不如人们想象中的那样重要，而社会关系比人意识到的更重要。</p><p>牢固的社会关系，对实现幸福来说是最重要的因素。社群力量能够成为强效改变工具的原因，正是因为让人感觉和他人心心相连很重要。</p><p>生活可以让人们产生新的动机，新的做事理由，如果我们学会把焦点放在真正重要的事情上，哪怕是悲剧事件上，也能拥有幸福和快乐。</p><p>只是让人们理解，并感觉某件事重要，还不足以让他们坚持下去，眼下重要的事情到了明天或明年，说不定就不重要了。只有自己认为重要，然后才可以让别人相信，从对方角度考虑问题，并用阶梯模型，</p><p>未来自我干预法表明，哪怕奖励看起来遥远，人也可以改变自己的行为。加入社群也能提升重要程度。</p><p>你需要弄清楚怎样才能让事情变得足够重要，重要到你愿意为他而改变。</p><h2 id="武器4极度容易"><a class="markdownIt-Anchor" href="#武器4极度容易"></a> 武器4：极度容易</h2><p>人们总是希望事情很容易做，他们喜欢容易做的事情，也会坚持做那些极度容易的事情。面对障碍，很快就会放弃做某件事，反过来说，如果你学会了怎样消除障碍，就能很容易继续做下去。</p><p>我们可以通过<code>控制环境</code>，<code>限制选择</code>和<code>使用路线图</code>来让事情变得更容易。</p><p>改变环境，让它变得更易于做某事，就会让人们真的去做这件事。</p><p>人们总以为自己希望拥有更多的选择，但实际上选择太多会让一个人难以做事。</p><p>拥有行动计划，让人更容易，也更有可能去做一件事情。阶梯模型，通过小的步骤来达到目标。</p><p>知识诅咒，只会把事情弄得对别人太复杂，也会把事情弄得对自己的负责，反而让他们难以将自己的计划贯彻到底。</p><p>短线炒家效应，人们对自己，对其他人将来会怎样行事，也会做出过分自信的预测。</p><blockquote><p>极度容易这一武器跟清单可以很好的结合，比如每天2次冥想就可以拆分为2个每天一次冥想的步骤</p></blockquote><h2 id="武器5行为在前"><a class="markdownIt-Anchor" href="#武器5行为在前"></a> 武器5：行为在前</h2><p>将密码设置为代办事项，比如smile，这样每次输入密码就是一个暗示。</p><p>因为改变通常并不是一直告诉身体，要做出持久的改变，他始于先做出一些小小的行动改变，接着让意识反映出这种改变。</p><p>自我认同是这一改变过程的关键步骤。人们通常会根据自己怎么看待自己来决定是否做某一件事。</p><p><strong>神经记忆</strong></p><p>神经记忆可以让人们回顾自己过去的行为，看到自己的改变，从而坚持做之前没法做到的事情。也间接的说明坚持是一种可以坚持的习惯。</p><p>神经记忆，通过两种心理流程来让一个人坚持做事，第一人们相信如果没有非做不可的压力，自己仍然在做某件事，一定是因为这件事很重要，人们会坚持这种行为，以求与对自己重要的事情保持一致。第二，人们通过回顾过去做的事情来形成身份认同，也就是说人们会继续做某件事，是因为这是他们自我形象的一部分。也就是说认知和行为是相辅相成的。</p><p>神经记忆可以分为<code>行为</code>，<code>身体动作</code>，<code>生理及情绪</code>，<code>语言和认知</code>。</p><p>不必控制自己的想法，只要对自己的行为做一些小小的改变，你的意识就会跟着改变。</p><p>语言中的小小改变，能够影响人们对自己的看法以及行事方式。</p><p>如果人们总是某一活动时能够全神贯注，而不是频繁走神，他们就会更喜欢该活动。</p><p><strong>如何应用</strong></p><ol><li>想让孩子更懂得感恩，那就让孩子去做懂得感恩的人会做的事情。</li><li>想不再拖延那不妨创建一个治疗拖延的自助小组或者博客。</li><li>想更投入的享受当下生活，不妨去参加<strong>即兴表演课程</strong>。因为即兴表演的首要规则就是认同并遵从每个人的陈述。</li><li>想要更好的社交，与其改变自己希望与他人更亲近的想法，不如去做一些事情，让你变得跟他人更亲近。</li></ol><p>那些自愿决定去做的事，比如决定自己想要这份工作，而非那份工作，自己选定完成工作任务的日期，就会有更大概率坚持到底，实现预期。（<code>承诺的作用</code>）</p><p>让选择变得容易接受这种做法的关键在于要让人感觉是自己主动选择的。我们可以把选择范围缩小。</p><p>持久的行为，改变始于行为的实际的实体的变化，而不是思想中的变化。(<code>以行促知</code>)</p><h2 id="武器6致命吸引"><a class="markdownIt-Anchor" href="#武器6致命吸引"></a> 武器6：致命吸引</h2><p>如果人们做某件事感觉到了奖励，就会继续做下去，我们把这称为坚持一种行为的吸引力。</p><p>把无聊的事情变得有趣，具有奖励的性质有助于你坚持目标，不管你的目标是什么。</p><p>奖励必须拥有致命吸引力。普普通通的奖励和真正的诱人之物，其区别在于前者能让人做某件事一次，后者却让人克制不住的坚持做。</p><p>哪些事情最为重要？希望怎样得到奖励不同的人会有不同的想法，奖励和诱人奖励之间的区别在于，他对当事人来说是否重要。比较棘手的事要对自己和他人足够了解，才知道什么真正重要。</p><p><strong>提升吸引力的妙招</strong></p><ol><li>让做&quot;正确的事&quot;变得好玩</li><li>多用胡萝卜，少用大棒</li><li>别把金钱视为最佳奖励</li><li>光是教育不顶用</li><li>让活动本身变为奖励</li></ol><p>用诱人的奖励调动人们坚持做事，比用抗拒和惩罚更有效，因为恐惧诱发了消极行为。</p><p>人不需要用额外的奖励去做，本来就有感兴趣的事，如果你开始为这些活动附加奖励，人们说不定会认为这些活动不像自己想象的那么有趣，因为毕竟需要奖励才会有人去做。</p><p>不要光想着教育人，而是要调动人的心理和情绪，让他们坚持做事。</p><p>过于简单的引入某种游戏化激励机制大多都会以失败告终，失败的常见原因有如下几点：</p><ol><li>强调外在动机，却未能将内在动机包括在内</li><li>没有考虑玩家的动机</li><li>在原本应与合作创造或学习为重的环境下引入了竞争</li><li>主要侧重于管理目标而不是员工的动机。</li></ol><p><strong>如何应用</strong></p><p>“快修”指的是对人做某事的需求进行直接强化，“妙修”涉及间断奖励。确保自己完成步骤后，立即获得自己选择的奖励，在这里完成更多的步骤，你会继续得到奖励，但同时也逐渐减少奖励的量，不那么频繁的获得它，若有可能改为间接性的获得奖励，甚至在自己期待最低的时候才给自己奖励。</p><p>运用阶梯模型和极度容易模型，专注于目标的小步骤。然后不妨先为完成小步骤思考一种让人愉悦的奖励。</p><p>如果你能够理解随随便便的奖励跟真正诱人的奖励有什么区别，那么你就掌握了实现持久改变的力量。</p><h2 id="武器7反复铭记"><a class="markdownIt-Anchor" href="#武器7反复铭记"></a> 武器7：反复铭记</h2><p>大脑的可塑性指大脑改变并适应新环境的能力。反复自己能让行为变为习惯，一旦习惯建立起来，大脑便达到一种稳定的平衡状态并能够放松下来，如此一来习惯就变成了默认行为。关键点在于重复。</p><p>回顾自己的经历，你可能会发现自己的某些坚持失败了，但是那并不重要，重要的是你已经有了一些线索和步骤，当你下一次尝试改变时，就会让你更有可能坚持下去。</p><p>我们每天都要穿鞋，它已经深深铭刻在我们的大脑里了，无需太多努力，无需太多努力，我们就可以把平常穿的工作鞋换成跑鞋跑鞋与跑步自动配对，我们发现出门跑步越来越容易了。我们把这种称为<code>磁力行为</code>：<strong>实施某种行为（穿上跑鞋）可以变成磁铁，导致另一件相关且可取的行为（跑步）发生。</strong></p><h2 id="模型整合"><a class="markdownIt-Anchor" href="#模型整合"></a> 模型整合</h2><p>要想改变行为，不能只有一种武器，每一类行为都需要一套不同的武器组合来改变。哪一种武器更为适用，取决于人在做某件想要改变的事情时是否有意识，并且能不能对此做出改变。</p><p>创建持续变化的过程分为两步，首先确定你想改变的行为属于哪一种行为：<code>自动行为</code>，<code>冲动行为</code>，<code>常见行为</code>。接下来利用所需的武器来改变这种行为。</p><p><strong>自动行为</strong></p><p>自动行为指的是人们出于无意识作出的改变，自动行为的方法之一是使用条件反射。</p><p>如果你想改变自动行为，不妨使用极度容易和反复铭记的武器，如果可能行为在前和反复吸引也用上。借助其他可以改变有意识行为的武器，益处不会太多，当然也不存在坏处。</p><p><strong>冲动行为</strong></p><p>冲动行为是人们在受到内心强烈驱使或在愤怒的状态下所做的事。</p><p>冲动行为接近于自动行为，这意味着改变冲动行为和改变自动行为所需的力量非常接接近，利用极度容易，行为在前，致命吸引和反复铭记这种几种武器。但是由于人们在做冲动行为时是能察觉到的，所以另一些需要运用觉知的力量也能派上用场。</p><p><strong>常见行为</strong></p><p>常见行为是人们反复做的事情，至少在做的时候他们有部分时间是有意识的。</p><p>改变常见行为需要使用更多人对所作所为有意识时使用的武器。</p><h1 id="行为指南"><a class="markdownIt-Anchor" href="#行为指南"></a> 行为指南</h1><p>本书提供了一种可执行的步骤，首先确定行为类型，然后选择模型改变自己。很多我们知道很多方法，但是这些方法的边界在哪儿不清楚，所以造成要么不认同，要么用错了方向。本书相当于提供了一个分类，我们可以初步对号入座了解每种方法背后的原理，然后选择性的使用。</p><p>另外，当我们不知道怎么改变时，我们可以挨个套用7中模型，在套用的过程中，我们会对要改变的行为做细致的剖析，这也是有利于我们改变的。</p><p>那么，后续每次想改变一个行为，都先用该模型梳理一遍。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内容概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#内容概述&quot;&gt;&lt;/a&gt; 内容概述&lt;/h1&gt;
&lt;p&gt;作者持久改变分为两步：首先确认你想改变的行为是哪一类型，然后运用改变这类行为所需的武器SCIENCE模型。行为分为自动行为，冲动行为
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>005：子弹笔记</title>
    <link href="http://ruanxinyu.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%AD%90%E5%BC%B9%E7%AC%94%E8%AE%B0/"/>
    <id>http://ruanxinyu.github.io/posts/读书笔记/子弹笔记/</id>
    <published>2019-01-24T03:04:43.000Z</published>
    <updated>2019-01-27T12:16:21.422Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容概述"><a class="markdownIt-Anchor" href="#内容概述"></a> 内容概述</h1><p>作者主要从作用，结构和实践三部分描述子弹笔记。整理自己的想法到每日记录，阅读记录和未来记录等不同的集子，同时说明清单条目是如何在集子之间流转，如何更好的实现自己的目标。</p><h1 id="文章剖析"><a class="markdownIt-Anchor" href="#文章剖析"></a> 文章剖析</h1><p>子弹笔记术的使命是帮助人们认识自己应该如何利用生命中最宝贵的人生资源，时间和精力，剔除无意义的事，从而专注于有意义。</p><p>子弹笔记术能够帮助我们整理思绪，然后从客观的角度审视自己的想法，确定什么才是最重要的事情，并且便于以后的回顾。</p><p>剔除没有价值的事情之后，剩下的事情可以大致分为两类，需要做的事和想要做的事，一个是你的责任，一个是你的目标。</p><p>真正的效率，无关速度，而在于为真正重要的事情留出了多长时间，这便是子弹笔记的要义所在。</p><h2 id="快速记录"><a class="markdownIt-Anchor" href="#快速记录"></a> 快速记录</h2><p>记录的内容包括：<code>笔记</code>，<code>任务</code>和<code>事件</code>。也就是说子弹笔记中不仅包含你要做的事情，还包含了你生活的记录，这样便于后续反思回顾。</p><p>为什么用点表示任务呢，因为点可以轻松的转化为其他的标记。语句要简短明了，子弹语句。</p><p>可以通过*等特殊符号来标记，但是尽量少用以避免增加复杂度。</p><ol><li><code>-</code> 笔记</li><li><code>。</code>事件</li><li><code>▪</code> 任务</li><li><code>x</code> 完成的任务</li><li><code>&gt;</code> 迁移的任务</li><li><code>&lt;</code> 计划中的任务</li></ol><h2 id="集子"><a class="markdownIt-Anchor" href="#集子"></a> 集子</h2><p>为了归类以便管理，子弹笔记有四个集子：</p><ol><li><code>索引</code>：利用标题和页码定位内容</li><li><code>每日记录</code>：用于快速记录每一天的所有想法</li><li><code>月度记录</code>：本月时间安排和任务</li><li><code>未来记录</code>：本月意外的任务和事件</li></ol><p>月度记录可以记录每天的主要内容（日历页），也可以记录该月的目标（任务页）</p><p>未来记录的内容来自每日记录，需要每个月审视从而挪到月度记录中以便于实施落地。</p><p>任务迁移可以帮助我们停下来思考每个任务是不是有必要做以及优先级是什么，过滤掉无用的任务。</p><p>任务迁移主要是月底你准备好创建新的月度记录时进行。</p><h1 id="行为指南"><a class="markdownIt-Anchor" href="#行为指南"></a> 行为指南</h1><p>清单的作用不言而喻，重点在于如何管理自己的清单，本书给我最大的帮助是确定了一种比较好的标记和迁移方式，这个值得尝试一下。</p><p>对于清单是用app还是本子，我个人的看法是对于生活中的清单用app，因为没有固定的场所，更便于记录和查看；而对于工作，场所固定，我更建议使用本子，因为手抄写能能促进思考，能够更好的审视自己所做的事情。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内容概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#内容概述&quot;&gt;&lt;/a&gt; 内容概述&lt;/h1&gt;
&lt;p&gt;作者主要从作用，结构和实践三部分描述子弹笔记。整理自己的想法到每日记录，阅读记录和未来记录等不同的集子，同时说明清单条目是如何在集子
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>004：睡眠革命：如何让你的睡眠更高效</title>
    <link href="http://ruanxinyu.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%9D%A1%E7%9C%A0%E9%9D%A9%E5%91%BD%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%9D%A1%E7%9C%A0%E6%9B%B4%E9%AB%98%E6%95%88/"/>
    <id>http://ruanxinyu.github.io/posts/读书笔记/睡眠革命：如何让你的睡眠更高效/</id>
    <published>2019-01-12T03:04:43.000Z</published>
    <updated>2019-02-04T04:55:28.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容概述"><a class="markdownIt-Anchor" href="#内容概述"></a> 内容概述</h1><p>作者描述了生物钟的规律和睡眠类型，如何运用90分钟睡眠法提升睡眠效率，睡前热身和睡后的舒缓，如何处理日间休息，改造床铺和创建睡眠环境等睡眠修复的关键指标。然后距离说明如何利用R90修复睡眠问题。</p><h1 id="文章剖析"><a class="markdownIt-Anchor" href="#文章剖析"></a> 文章剖析</h1><p>人体由昼夜规律的生物钟和自我平衡的睡眠压力来调节睡眠。</p><p>对于生物钟来说，光线至关重要，我们可以通过模拟日出自然唤醒灯</p><p>清醒的时间越长，睡眠需求就积累的越多。</p><p>白天会分泌血清素，晚上会分泌褪黑素，而蓝光会影响褪黑素的分泌，所以晚上要注意不要玩电子设备。</p><p>我们在2-3点会进入一个质量最高的睡眠阶段。</p><h2 id="90分钟睡眠法"><a class="markdownIt-Anchor" href="#90分钟睡眠法"></a> 90分钟睡眠法</h2><p>8小时是每晚的人均睡眠时间，所以无需特别关注这个时长而给自己带来压力，我们的目的是休息好，而不是睡多久。我们通过90分钟时长的睡眠周期衡量睡眠，而不是睡了多少小时</p><p>睡眠分为打瞌睡，浅睡眠，深睡眠和快速眼动睡眠。</p><p>如果想提高睡眠修复的质量，那么设置固定时间的闹铃，正是我们能采取的最有效方式，不管什么时候睡，都固定时间起，这样行为能够成为习惯而被固化。</p><p>如果不困就上床或者没有准备好就上床，反倒容易睡不着，强制自己睡觉就是一种浪费，还不如利用这时间看书。</p><p>我们保证4-5个睡眠周期就行，不要连续3个晚上缺失睡眠周期。连续一周我们可以看看我们到底需要4个还是5个睡眠周期，但是正确每周保证4个晚上获得理想的睡眠时间。</p><p>一个晚上没有睡好没有什么问题，把睡眠放到一个更长的时间段中考虑，减少不必要的压力。</p><h2 id="睡前的例行程序"><a class="markdownIt-Anchor" href="#睡前的例行程序"></a> 睡前的例行程序</h2><p>你的睡前例行程序是指你为了确保你进入准备入睡的状态而进行的一系列工作。这些睡眠准备工作能够无缝的过渡到后面的睡眠周期。</p><ol><li>关闭电子产品，可以用冥想和阅读替换</li><li>保持凉爽的环境，可以冲一个温水澡（不是热水澡）</li><li>保持光线从明亮到昏暗</li><li>整理生活环境，准备明天的内容，清空你的大脑</li><li>梳理今日的生活，以助于睡眠时大脑更好的处理</li><li>保证安全，比如门窗</li><li>睡前运动，比如瑜伽，散步，伸展</li><li>采用鼻子呼吸</li></ol><h2 id="睡后的例行程序"><a class="markdownIt-Anchor" href="#睡后的例行程序"></a> 睡后的例行程序</h2><p>睡后的例行程序是为了确保所有花在睡前例行程序和随后的睡眠时间都没有白白浪费</p><ol><li>拉开窗帘，保持光线充足</li><li>补充水分</li><li>回归电子产品</li><li>丰盛的早餐</li><li>断粮</li><li>适度的挑战脑力</li><li>偷懒假，如果确实缺乏睡眠，可以先在固定时间起床做完该做的事情，然后回去继续睡觉</li></ol><h2 id="日间休息"><a class="markdownIt-Anchor" href="#日间休息"></a> 日间休息</h2><p>午后小睡，能量小睡，可控修复期（下午1-3点），不管是30分钟还是90分钟，都可以算作一周的睡眠周期。</p><p>晚间小睡（下午5-7点），最好不要虫偶古30分钟。</p><p>从长远看，日间小睡并不能替代夜间睡眠，因此R90方案给出的建议是：每周至少应该保证有4个晚上获得了理想的睡眠周期。</p><ol><li>番茄工作法</li><li>接水不要接满，可以经常去加水</li><li>冥想</li><li>远离电子设备</li></ol><h1 id="行为指南"><a class="markdownIt-Anchor" href="#行为指南"></a> 行为指南</h1><ol><li>不要在意某一晚上的睡眠时间，而注重每周的睡眠周期总数，每周至少4晚保证4-5个睡眠周期，对于6点起床的我来说就是得10：30或者12：00睡觉</li><li>睡觉前一定做冥想，然后看书，觉得困了再上床睡觉，尽量不要玩手机，读书笔记什么那么就尽量放在第二天早晨做，而不是晚上，或者下班前做也行</li><li>中午休息30分钟就足够，晚上吃完饭后可以休息一下，这样不至于把精力所有最好得时间留给工作，做自己的事情时也需要保证有足够的精力</li><li>每天晚上睡觉确保屋子没有光线，购买定时台灯，保证每天早晨的通过光唤醒自己</li><li>如果不困就不要强迫自己睡觉，把我好这机会好好阅读，提升能力</li><li>固定的起床时间，不管晚上睡了多久，都相同的时间点起床，可以将早晨要完成的事情完成后再休息一下</li><li>晚上睡觉前要做好睡觉的准备，收拾收拾东西，写笔记做好明天的安排</li><li>早晨起来通过开合跳激活身体，然后喝水</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内容概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#内容概述&quot;&gt;&lt;/a&gt; 内容概述&lt;/h1&gt;
&lt;p&gt;作者描述了生物钟的规律和睡眠类型，如何运用90分钟睡眠法提升睡眠效率，睡前热身和睡后的舒缓，如何处理日间休息，改造床铺和创建睡眠环境
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>【香帅的北大金融学课】第003周学习总结</title>
    <link href="http://ruanxinyu.github.io/posts/%E9%A6%99%E5%B8%85%E7%9A%84%E5%8C%97%E5%A4%A7%E9%87%91%E8%9E%8D%E5%AD%A6%E8%AF%BE/%E3%80%90%E9%A6%99%E5%B8%85%E7%9A%84%E5%8C%97%E5%A4%A7%E9%87%91%E8%9E%8D%E5%AD%A6%E8%AF%BE%E3%80%91%E7%AC%AC003%E5%91%A8%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://ruanxinyu.github.io/posts/香帅的北大金融学课/【香帅的北大金融学课】第003周学习总结/</id>
    <published>2019-01-09T06:38:48.000Z</published>
    <updated>2019-01-09T13:20:21.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本周学习内容ppt"><a class="markdownIt-Anchor" href="#本周学习内容ppt"></a> 本周学习内容PPT</h1><!-- encrypt start --><a href="/posts/香帅的北大金融学课/【香帅的北大金融学课】第003周学习总结/《香帅的北大金融学课》课件W3.pptx" title="=======点击下载PPT=======">=======点击下载PPT=======</a><br><img src="/posts/香帅的北大金融学课/【香帅的北大金融学课】第003周学习总结/2019-01-09-15-10-59.png" title="[blog.ruanxinyu.cn]"><!-- encrypt end --><h1 id="比特币的未来在哪里"><a class="markdownIt-Anchor" href="#比特币的未来在哪里"></a> 比特币的未来在哪里</h1><h2 id="语句摘录"><a class="markdownIt-Anchor" href="#语句摘录"></a> 语句摘录</h2><p>我们使用的这些货币，它们的真名叫做“法定货币”，也就是国家赋予某个银行（比如中央银行）的一种特许权力而发行的，它背后的关键是国家信用.</p><p>布雷顿森林会议上确定的美元的一统江湖地位，当时英国凯恩斯提出的是建立一个叫“银行券”的国际货币单位，用一定的权重包含各国的货币。</p><p>现代的货币是信用货币，货币价值的浮动完全取决于一个国家的实力和其他国家对于这个国家的信心。所以说没有国家信用加持的货币，即使可以完成计价、储藏、交换的功能，它也不能够成为通用的货币。</p><p>货币的发行，其背后的国家信用才是核心和关键。央银行通过拿到国家赋予的特定权力来进行货币发行的。</p><p>英王室把伦敦以及它周边地区银行券的发行权独家赋予给了英格兰银行，但是有一个条件，就是英格兰银行要为王室提供长期的、稳定的、低成本的战争融资。从这以后，英格兰银行发行的银行券就被正式地赋予了国家信用，成为了英国的法定货币。<br>这种国家赋予特定银行特许权力，垄断银行券发行的模式很快就显露了优势。一方面国家主导了法定货币的发行，它能够获得长期稳定的资金，国家的权力变得很大。另外一方面，政府可以通过货币的发行控制整个社会的信用规模，对经济进行调节和控制。很多人认为像英格兰银行垄断货币发行权这样一个金融创新，是英国在后来的长期战争中能够取得先机，成为全球霸主的关键因素之一。</p><h2 id="划重点"><a class="markdownIt-Anchor" href="#划重点"></a> 划重点</h2><blockquote><p>现代货币的概念中，国家信用才是关键和核心，没有国家信用支持的货币很难成为世界的主流。</p></blockquote><h2 id="课后习题"><a class="markdownIt-Anchor" href="#课后习题"></a> 课后习题</h2><blockquote><p>大家都知道欧元现在是全球货币体系中的第二大货币，仅次于美元，欧元的起点很高，很多人都曾经对它寄予厚望，希望它能够打破美元的垄断地位。那么你看一下今天全球政治经济的大格局，然后再结合今天的课程，你觉得靠欧元来打破美元垄断地位的想法现实吗？为什么？</p></blockquote><p>欧元是多个国家的信用，如果想打破美元的垄断地位，则信用必须要高于美国，而多国联合本身就存在信任问题，很容易闹矛盾和分歧，就类似于战国时期一样，从英国脱欧也能看出一些端倪，而且美国一定会挑拨离间，所以欧元很难挑战美元，但是如果中国能够持续稳定发展，人民币倒是有可能，因为中国的经济体量够大。</p><h2 id="课程原文"><a class="markdownIt-Anchor" href="#课程原文"></a> 课程原文</h2><!-- encrypt start --><img src="/posts/香帅的北大金融学课/【香帅的北大金融学课】第003周学习总结/2019-01-09-14-52-06.png" title="[blog.ruanxinyu.cn]"><!-- encrypt end --><h1 id="央行降准会影响你的钱包吗"><a class="markdownIt-Anchor" href="#央行降准会影响你的钱包吗"></a> 央行降准会影响你的钱包吗</h1><h2 id="语句摘录-2"><a class="markdownIt-Anchor" href="#语句摘录-2"></a> 语句摘录</h2><p>国家通过银行体系，调控整个社会的信用规模和经济冷热。如果把经济体看作一个农田的话，银行体系就像一个巨型的水利工程。在这里面，央行就是那个巨大的水库，它发行的法定货币就是水库里的水。那商业银行是什么呢？它是中途大大小小的送水站，直接影响着社会上的信贷规模和经济冷热。在这个水利工程里面有两个巨大的闸门，一个叫存款准备金，一个叫基准利率。</p><p>一笔100美元的存款，按照10%的存款准备金率流通，最后可以让我们整个社会流通的钱达到1000美元。</p><p>基础货币（M0），广义货币（M2）这种词。在这个例子里，100美元就是基础货币，1000美元就是广义货币，央行发行的这个货币就叫基础货币。</p><p>银行放贷的意愿和个人企业现金的持有量会影响到信用扩张的机制</p><h2 id="划重点-2"><a class="markdownIt-Anchor" href="#划重点-2"></a> 划重点</h2><blockquote><ol><li>存款准备金制度是银行体系、货币信用扩张的一个重要环节</li><li>存款准备金就是银行需要留存下来应对储户提现的资金。这个比例一高，货币扩张的能力就弱；这个比率低，货币扩张的能力就强</li><li>央行可以通过调节存款准备金率来调节我们整个社会的信用规模、经济冷热</li><li>银行放贷的意愿和社会现金的持有量都会影响到我们这个货币信用扩张的效果</li></ol></blockquote><h2 id="课后习题-2"><a class="markdownIt-Anchor" href="#课后习题-2"></a> 课后习题</h2><blockquote><p>刚才我们讲到，春节里大家的现金的持有量会大量地上升，然后导致我们整个社会货币扩张的规模缩小，但是现在的电子支付越来越在我们生活中占据主导地位，从2013年开始，微信红包、支付宝这样的移动支付工具，在我们生活中变得越来越重要。那你觉得，这些工具的出现会不会影响到我们整个社会货币扩张的机制呢？</p></blockquote><p>第三方支付的准备金与银行是不一样的，个人与企业手头的现金会介绍，但是能够加大资金的流通性，这个毋庸置疑，但是央行的调控能力会下降，而且央行的吸储能力也变差</p><h2 id="课程原文-2"><a class="markdownIt-Anchor" href="#课程原文-2"></a> 课程原文</h2><!-- encrypt start --><img src="/posts/香帅的北大金融学课/【香帅的北大金融学课】第003周学习总结/2019-01-09-14-54-15.png" title="[blog.ruanxinyu.cn]"><!-- encrypt end --><h1 id="为什么说基准利率是经济冷热的调节器"><a class="markdownIt-Anchor" href="#为什么说基准利率是经济冷热的调节器"></a> 为什么说基准利率是经济冷热的调节器</h1><h2 id="语句摘录-3"><a class="markdownIt-Anchor" href="#语句摘录-3"></a> 语句摘录</h2><p>存款准备金制度主要是控制了资金的量，而基准利率调整的是资金的价格，然后通过量、价同时控制的手段，整个社会的信用规模和经济冷热就能够被国家所控制了</p><p>基准利率就是一个市场上利率水平的风向标。各个金融机构，都根据这个标准来确定自己的贷款和存款利率。央行提高或者降低基准利率，就意味着提高或者降低整个社会的利率水平</p><p>加息控制经济过热是正确的，但是这么快速、猛烈的加息幅度就产生了负面后果。商业银行体系的杠杆效应可能将紧缩的效果放大了很多倍。1994年的经济硬着陆就是这样。</p><p>2004年美国下调基准利率到负利率，然后再加上布什政府还放宽了房地产抵押贷款的条件形成著名的次级贷款</p><p>90年代日本的房地产泡沫也是降息的产物，美、日、英、法、德几个国家签署了一个广场协议，内容就是说，要让美元贬值、让日元升值，影响出口，经济衰退，从而通过超低的贷款利率就刺激居民和企业的投资消费欲望，最后造成房地产泡沫。</p><h2 id="划重点-3"><a class="markdownIt-Anchor" href="#划重点-3"></a> 划重点</h2><blockquote><ol><li>现代经济最重要的就是信用扩张的功能，银行体系就是其中的关键角色。因为居民、企业机构都有投资的需求，需要从银行拿到贷款。而这种需求是和银行的利率水平密切相关的</li><li>央行可以通过调节基准利率的水平，调节整个社会的投资需求来控制经济的冷热。降息和加息，这是现代央行的最重要的武器</li><li>这个加息和降息的尺度其实非常难把握，过猛的加息可能会导致经济的突然崩盘，而过度的降息可能会导致经济泡沫</li></ol></blockquote><h2 id="课后习题-3"><a class="markdownIt-Anchor" href="#课后习题-3"></a> 课后习题</h2><blockquote><p>大家都知道，2017年年底开始，全球好像进入了一个加息的周期，各个央行都宣布要加息。假设说，我们中国的央行现在也宣布要上调基准利率，也就是说要加息的话，你会赶紧把手里的股票全部清盘吗？或者说你本来打算要买房子和车子的话，然后会因为加息而决定不买了吗？</p></blockquote><p>看自己的投资策略，加息幅度和公司的基本面，而不会一概而论,</p><h2 id="课程原文-3"><a class="markdownIt-Anchor" href="#课程原文-3"></a> 课程原文</h2><!-- encrypt start --><img src="/posts/香帅的北大金融学课/【香帅的北大金融学课】第003周学习总结/2019-01-09-15-00-11.png" title="[blog.ruanxinyu.cn]"><!-- encrypt end --><h1 id="学金融为什么要先了解宏观背景"><a class="markdownIt-Anchor" href="#学金融为什么要先了解宏观背景"></a> 学金融为什么要先了解宏观背景</h1><h2 id="语句摘录-4"><a class="markdownIt-Anchor" href="#语句摘录-4"></a> 语句摘录</h2><p>世界上从来就不存在独立的微观金融现象，它的背后一定有某种宏观层面的逻辑或者推动力</p><p>我们中国市场是一个强政府指导下的逐步开放的金融市场，所以政府在这个市场的影响力是很深的</p><p>银行体系有一个叫“窗口指导”的制度，就是国家如果希望银行多放贷，或者少放贷，央行就打个电话给四大行的行长，进行窗口指导</p><p>国家政策听上去像是套话，但都是有内在乾坤的，信息量丰富得不得了</p><p>不知宏观者无以谋微观，不知未来者无以谋当下，不知世界者无以谋中国</p><h2 id="划重点-4"><a class="markdownIt-Anchor" href="#划重点-4"></a> 划重点</h2><blockquote><p>1．首先，“微观金融现象”的背后一定有宏观层面的逻辑和推动力，其次，中国市场受政府政策影响大，不理解宏观，很难理解金融市场的规律和现象。所以我们会顺着宏观-中观-微观这个思路来进行学习，这样你可以“既见树木，又见森林”<br>2. 我们课程是阶段式的学习，类似金融分析师的整个学习逻辑，学完后你会在概念，框架，和实操三个不同层面理解和掌握金融知识</p></blockquote><h2 id="课后习题-4"><a class="markdownIt-Anchor" href="#课后习题-4"></a> 课后习题</h2><blockquote><p>很多人都可能听说过柳传志的故事。当时他在办公室里喝茶，读到《人民日报》，发现日报上第一次在头版头条出现了“私营经济”这种词，然后就果断地下海，创业，创立了联想企业。咱们中国在过去三十年里，很多成功的企业家都是敏锐地抓住了国家政策的转向，吻合了国家整个发展的大趋势，走向了成功之路。所以，我想请你回忆一下，你是不是有这种经历，在财经新闻、新闻联播，还有各种各样的媒体的报道中，曾经敏锐地嗅出过商业机会，还有投资机会，然后改变了你的人生？欢迎说出你的故事。</p></blockquote><blockquote><p>物联网，区块链</p></blockquote><h2 id="课程原文-4"><a class="markdownIt-Anchor" href="#课程原文-4"></a> 课程原文</h2><!-- encrypt start --><img src="/posts/香帅的北大金融学课/【香帅的北大金融学课】第003周学习总结/2019-01-09-15-01-48.png" title="[blog.ruanxinyu.cn]"><!-- encrypt end --><h1 id="本周问答银行加息会不会影响你的投资"><a class="markdownIt-Anchor" href="#本周问答银行加息会不会影响你的投资"></a> 本周问答：银行加息会不会影响你的投资</h1><h2 id="语句摘录-5"><a class="markdownIt-Anchor" href="#语句摘录-5"></a> 语句摘录</h2><blockquote><p>为什么说其他国家的经济复苏会导致美元贬值？</p></blockquote><p>出口加大，对美国形成贸易顺差，企业出口得到的美元，但是因为在本国消费不方便，最终又经过银行体系，所以造成本国货币升值，美元贬值。</p><blockquote><p>为什么美元升值，黄金的价格就会下跌呢？</p></blockquote><p>美元仍然是国际货币，但是黄金就不再作为货币的发行基础了，就是说黄金这时候已经不再是一个世界货币的地位，而是一种投资品的存在了。你就可以想象，从此以后美元就成了世界的货币之“锚”，也就是它成为了一个价值尺度，可以衡量其他所有投资品的价值。那么，美元升值，就意味着这个尺子变长了，那么相对来说，其他的投资品就短了。</p><h2 id="课程原文-5"><a class="markdownIt-Anchor" href="#课程原文-5"></a> 课程原文</h2><!-- encrypt start --><img src="/posts/香帅的北大金融学课/【香帅的北大金融学课】第003周学习总结/2019-01-09-15-03-22.png" title="[blog.ruanxinyu.cn]"><!-- encrypt end -->]]></content>
    
    <summary type="html">
    
      【注意】：该文章存在加密内容，请进入详情查看具体内容。&lt;br&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="经济" scheme="http://ruanxinyu.github.io/tags/%E7%BB%8F%E6%B5%8E/"/>
    
      <category term="香帅的北大金融学课" scheme="http://ruanxinyu.github.io/tags/%E9%A6%99%E5%B8%85%E7%9A%84%E5%8C%97%E5%A4%A7%E9%87%91%E8%9E%8D%E5%AD%A6%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>003：区块链-定义未来金融与经济新格局</title>
    <link href="http://ruanxinyu.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%8C%BA%E5%9D%97%E9%93%BE-%E5%AE%9A%E4%B9%89%E6%9C%AA%E6%9D%A5%E9%87%91%E8%9E%8D%E4%B8%8E%E7%BB%8F%E6%B5%8E%E6%96%B0%E6%A0%BC%E5%B1%80/"/>
    <id>http://ruanxinyu.github.io/posts/读书笔记/区块链-定义未来金融与经济新格局/</id>
    <published>2019-01-08T22:47:55.000Z</published>
    <updated>2019-01-27T12:16:21.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>本书从信任和互联网为起点讲述了区块链出现的必然。区块链的本质是一种去中心化的记账系统，而比特币则是这个系统上承载的“以数字形式存在”的货币，通过工作量证明来实现共识机制。区块链和互联网一样，能够减轻信息不对称问题，未来区块链协议也将如TCPIP协议一样成为基础协议并且具有分层结构。区块链将会在数字资产化，产业协同，互联网金融，共享经济，新媒体等方面都有新的机遇，比如说可以用于数字货币、众筹、清算审计、智能合约、版权和公证等。最后本文对底层的密码学、区块链、共识算法、侧链技术等做了介绍，并附有比特币和以太坊的白皮书。</p><h1 id="内容剖析"><a class="markdownIt-Anchor" href="#内容剖析"></a> 内容剖析</h1><p>文字作为人际交流的手段，承载的是信息；货币作为价值传输的载体，承载的信用。</p><p>从石币之岛可以看出，其背后是一套有信用记录以及信用记录的清算构成的体系，而当美元与黄金脱钩后，货币成为了记账货币，那么信用卡，支付宝，区块链等都有记账货币的特点。</p><p>去中心化记账如下两个难题，而区块链通过构造一个以竞争-记账-奖励为核心的经济系统，解决了去中心化记账的问题。</p><ol><li>账本数据的存储必须是去中心化的</li><li>记账行为必须是去中心化的</li></ol><p>只有在去中心化的结构下共识才是问题，而区块链的共识就是工作量证明。</p><p>去中心化和中心化并不是非此即彼的关系，而是相互依存结合的关系。</p><p>区块链由于价值的转移是通过脚本语言实现的，所以可以定义复杂的交易逻辑，从而实现智能合约，股权等更复杂的事情，这对于数字资产具有很大的意义</p><p>侧链实现链之间的价值转移。</p><p>区块链包括公有链，私有链和联盟链。</p><p>区块链和互联网都能一定程度的打破信息不对称的壁垒。区块链协议将会跟TCPIP协议一样，成为未来互联网的基础协议之一，并衍生出不同的层次。</p><p>区块链将带来挖矿，交易平台，钱包与支付，互联网金融，物联网，共享经济等方向带来机遇，区块链+是互联网+的升级版</p><p>区块链可以应用于众筹，，清算结算和审计，智能合约，版权与许可，公证与记录，保险行业，电子商务，医疗和政府等领域</p><h1 id="行为指南"><a class="markdownIt-Anchor" href="#行为指南"></a> 行为指南</h1><p>这本书用通俗的语言让你对区块链有一个简要的理解，包括底层技术和应用场景，也带出几个比价有用的资源：</p><ol><li><a href="https://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system/" target="_blank" rel="noopener">比特币白皮书</a></li><li><a href="https://ethfans.org/wikis/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6" target="_blank" rel="noopener">以太坊白皮书</a></li><li><a href="https://www.8btc.com/article/297397" target="_blank" rel="noopener">区块链大革命</a>，魏然出品，很有深度，<a href="https://www.8btc.com/author/17643" target="_blank" rel="noopener">专栏文章</a>都值得学习一下</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;本书从信任和互联网为起点讲述了区块链出现的必然。区块链的本质是一种去中心化的记账系统，而比特币则是这个系统上承载的“以数字形式存在”的货币，通过
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>我的能量词</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%88%90%E9%95%BF%E8%AE%B0%E5%BD%95/%E6%88%91%E7%9A%84%E8%83%BD%E9%87%8F%E8%AF%8D/"/>
    <id>http://ruanxinyu.github.io/posts/成长记录/我的能量词/</id>
    <published>2019-01-07T23:30:29.000Z</published>
    <updated>2019-02-04T02:19:04.236Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么叫能量词"><a class="markdownIt-Anchor" href="#什么叫能量词"></a> 什么叫能量词</h1><p>能量词是能够给与自己能量的语句，通过每天的重复抄写和朗读，从而达到改变自己潜意识，提升自己信心的目的。</p><p>能量词不需要一成不变，可以根据自身情况进行调整，但是当确定后一定要坚持足够长的时间，如果变化太频繁就很难进入潜意识。</p><h1 id="我的能量词"><a class="markdownIt-Anchor" href="#我的能量词"></a> 我的能量词</h1><blockquote><p>我有能力管理自己的心智和生活，我要做自己的主人。</p><p>我能够做到积极主动，以终为始，要事第一，双赢思维，知彼解及，综合综效，不断更新。</p><p>我能够保持心态平和，不抱怨，微笑对待他人和自己。</p><p>我信守承诺，说到就一定做到，我必须完成制定的锻炼和读书目标，保持自律的生活，每天成长。</p><p>我清楚的知道我想要的结果是什么，我只做与目标一致的行为，我必须注重优先级，抓住一切机会去达到我的目标。</p><p>把控好全局，营造好环境，管理好精力，提升效率，踏踏实实做好今天该做的事情。</p><p>加油，通过积累，我一定会实现我的人生梦想，改变家族，成为一个心智成熟之人。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么叫能量词&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#什么叫能量词&quot;&gt;&lt;/a&gt; 什么叫能量词&lt;/h1&gt;
&lt;p&gt;能量词是能够给与自己能量的语句，通过每天的重复抄写和朗读，从而达到改变自己潜意识，提升自己信心的目的。&lt;/p&gt;
&lt;p&gt;能
      
    
    </summary>
    
      <category term="个人成长" scheme="http://ruanxinyu.github.io/categories/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/"/>
    
    
      <category term="个人成长" scheme="http://ruanxinyu.github.io/tags/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>我的2019年目标</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%88%90%E9%95%BF%E8%AE%B0%E5%BD%95/%E6%88%91%E7%9A%842019%E5%B9%B4%E7%9B%AE%E6%A0%87/"/>
    <id>http://ruanxinyu.github.io/posts/成长记录/我的2019年目标/</id>
    <published>2019-01-07T23:30:29.000Z</published>
    <updated>2019-02-04T02:17:35.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总体目标"><a class="markdownIt-Anchor" href="#总体目标"></a> 总体目标</h1><p><strong>运动</strong>：<code>跑步350+公里</code>；<code>健身4000+分钟</code>；<code>冥想5000分钟</code></p><p><strong>读书</strong>：<code>阅读150+本书并输出读书笔记</code>；<code>整理并输出5+个得到专栏课程</code></p><h1 id="修订记录"><a class="markdownIt-Anchor" href="#修订记录"></a> 修订记录</h1><blockquote><p><strong>为什么会修订目标呢？</strong></p><p>答：修订的目的是为了更好的达到目标，只有在实践中不断调整才能更好的与自己融合，而且个人认知也在不断的升级，只要核心的目标不变，那么就可以不断的优化调整。</p></blockquote><p><strong>第1次修订：2019-02-03</strong></p><p>当前已经坚持四周，发现一些问题，有必要对目标做一次调整，逐步优化：</p><ol><li>跑步修订为每天一次，通过控制距离而不是频率来调节膝盖受伤的问题，避免选择困难，同时为了更好的利用跑步过程中的多巴胺</li><li>健身目标做更细致的分解，详细分析执行细节</li><li>冥想目标从3500分钟增加为5000分钟，同时补充执行细节</li><li>将确定的得到课程为改为5+个专题，不限制死课程内容，因为总是有新的课程出来。去除得到听书的目标，因为得到听书对我来说是泛读，暂不输出笔记，重点放在读书笔记上</li><li>得到课程处理模式采用整块时间集中输出，而不是安排到每一天</li></ol><h1 id="运动目标分解"><a class="markdownIt-Anchor" href="#运动目标分解"></a> 运动目标分解</h1><h2 id="跑步"><a class="markdownIt-Anchor" href="#跑步"></a> 跑步</h2><p><strong>目标：</strong> 跑步350+公里</p><p><strong>意义：</strong> 提升身体素质，促进保持良好的心理状态</p><p><strong>如何安排跑步的频率？</strong></p><blockquote><p>如果平均每次跑4公里，需要跑88次，一个月至少需要跑9次，即至少每3天一次:</p><ol><li>第一个月采用隔一天跑一次的策略，降低进入难度。后续每天跑一次，从而减少选择障碍，避免找借口。重点是每天跑步都可以调节自己的心态，这是一个正循环的开始。</li><li>允许某一天没有跑步，调整好心态，接受自己，然后继续坚持。重点在于积累，而不是一天的得与失。</li></ol></blockquote><p><strong>如果膝盖受伤了怎么办？</strong></p><blockquote><p>原则是先预防，后恢复：</p><ol><li>要防止膝盖受伤，前期里程一定控制住，至少连续两个月限制在4公里以内，相信循序渐进，也相信积累的力量。后续每天跑，可以参杂着1公里进行动态调节，策略是通过距离而不是频次来调节</li><li>如果膝盖确实受伤了，首先，连续一周将距离降为1公里，然后加大跑前和跑后的拉伸力度，同时加强跑步的核心训练，观察效果。原则是该跑还是继续跑，不用纠结是健康重要还是跑步重要的问题，控制好策略健康就不会出问题，不要找借口。</li></ol></blockquote><p><strong>是早晨跑还是晚上跑？</strong></p><blockquote><p>早晨和晚上都可以跑，也就是说一天有两次机会。但是做一个小的调整，不以具体时间来区分当天，而是前一天的晚上和当天的早晨算做当天的跑步，因为这两个时间段对于我来说是连续的，更便于安排。那么这就意味着有的时候一天早晚会跑两次，有时一整天都没有跑。要接受这种情况。这种调整的好处是：</p><ol><li>早晨的精力是最好的，这样宝贵的时间应该花在更多需要脑力的活动上，比如看书写笔记，晚上状态不好，恰好可以借跑步产生产生多巴胺</li><li>下班后精力和心态都消耗的差不多了，再加上加班，请朋友吃饭等各种事情，不确定性更大，如果早晨因为没有起来或者下雨没有跑，那么很容易造成无法完成当天的跑步任务</li><li>优先保证晚上跑步，可以反向的促进我更好的提前安排一天的工作项从而保证晚上的时间</li><li>晚上跑步可以更好的反思自己今天的所作所为</li></ol></blockquote><p><strong>因为特殊原因，当天没有跑步怎么办？</strong></p><blockquote><p>接受现实，调整心态，从现在重新做起出去跑，不要纠结于已经发生的事情，继续坚持才是最正确的选择。要接受不完美，相信积累的作用，从整体看，而不要陷入细节。</p><p>通过<code>2组深蹲，每组30个；2组开合跳，每组150个</code>来替代，这两个动作不受场地的限制，即使出差都能做，没有借口了吧，小样</p></blockquote><p><strong>如果晚上太晚了，去跑步的话影响睡觉怎么办？</strong></p><blockquote><p>确认是否超过10:30，如果早于10:30，则坚持今天跑，否则明天再跑；当然如果明天早晨有雨，那么今晚多晚都得去跑，一次跑太晚不会对健康有多大影响，所以不用又开始纠结健康和跑步哪个更重要的问题。</p></blockquote><p><strong>跑到一半的时候不想跑了怎么办？</strong></p><blockquote><p>如果是膝盖问题，允许跑一公里就停止，否则必须跑够2.5公里，这是底线，超过之后可以选择休息。</p></blockquote><p><strong>天气太冷怎么办？</strong></p><blockquote><p>提前买适合天冷的服装，以避免天冷成为借口</p></blockquote><p><strong>出差怎么办？</strong></p><blockquote><p>原则是跑步不能停。如果晚上下班早建议去一个附近的公园跑，边玩边跑；如果晚上下班晚或者是早晨，则在住的附近跑。</p></blockquote><p><strong>晚上吃饭太饱，不适合跑步怎么办？</strong></p><blockquote><p>原则是是否已经饭后一小时。如果已经饭后一小时，并且没有超过10:30，则继续跑，否则明早跑。需要提前安排好每天的事物防止这种事情发生，比如吃七分饱，比如先吃饭再加班。</p></blockquote><p><strong>跑前不想热身，跑后不想拉伸怎么办？</strong></p><blockquote><p>原则是跑前必须拉伸热身，跑后可以不拉伸，但是必须做两组靠墙小腿后侧拉伸</p></blockquote><h2 id="健身"><a class="markdownIt-Anchor" href="#健身"></a> 健身</h2><p><strong>目标：</strong> 健身4000+分钟</p><p><strong>意义：</strong> 跑步更主要用于产生多巴胺保持积极的状态，而健身则是针对于自身的职业和身体状况做定向的加强和调整，主要包括跑步拉伸，腰部，腹部，颈部</p><p><strong>如何选择keep中的运动？</strong></p><blockquote><ol><li>健身的目的是为了健康，所以必须放弃的项目有：瑜伽，俯卧撑，平板支撑。</li><li>聚焦于：基础拉伸，腰部，腹部，手臂，颈部，膝部。优先保证基础拉伸，腰部，腹部。</li><li>开合跳用于激活早起的身体，跑前热身用于防止跑步受伤，小飞燕用于腰部力量，卷腹用于腹部减脂和腹肌，弹力绳用于手臂力量。</li></ol></blockquote><p><strong>如何安排健身频率？</strong></p><blockquote><p>健身4000+分钟，意味着每个月400+分钟，每周100分钟，每天15分钟，一组最基础的运动组合（<code>拉伸、开合跳、小飞燕和卷腹</code>）也就12分钟，如果每天再加上跑前热身的8分钟，基本也就够了。所以每天一组基础训练是必须的，可以根据实际情况调整开合跳、小飞燕和卷腹的时长。</p></blockquote><p><strong>如何安排健身时间？</strong></p><blockquote><ol><li>早起一组运动包括：开合跳，小飞燕，卷腹，拉伸。控制在15分钟内搞定，快速激活身体，不要拖长战线，否则很容易做思想斗争浪费意志力。</li><li>中午一组开合跳，激活一下身体，否则饭后看书容易犯困</li><li>晚上弹力绳（暂时非必选）</li></ol></blockquote><p><strong>开合跳，小飞燕，卷腹的演进路径是什么样的？</strong></p><blockquote><p>开合跳每一个月一次调整，每次调整增加50个；小飞燕每两周一次调整，每次增加30秒；卷腹每2周调整一次，每次增加5个；</p></blockquote><p><strong>训练到一定程度后想更换训练项目怎么办？</strong></p><blockquote><p>每个训练周期为4周，4周之后重新评估，不允许临时更换，否则总是在做无谓的犹豫，健身是个积累的过程，先好好积累。</p></blockquote><p><strong>早晨没有按点起床，时间来不及怎么办？</strong></p><blockquote><p>开合跳，小飞燕和卷腹必须完成，其他的除非迟到，否则必须完成。运动优先级高于洗漱，高于早饭。如果仍旧来不及，中午不睡觉补回来。</p></blockquote><p><strong>晚上外出，遇到兴奋事情，和别人聊天等太晚，怎么办？</strong></p><blockquote><p>调整好心态，安抚好别人，做好自己。如果早晨和中午没有完成，则不管多晚，必须完成，不用纠结于健康和睡觉，偶尔一次不会出健康问题。更重要的是要提前预知到这种情况，然后在早晨和中午先把运动搞定，而不是最后将自己置于困境。</p></blockquote><p><strong>出差没有瑜伽垫怎么办？</strong></p><blockquote><p>开合跳，小飞燕，卷腹必须完成，因为可以不依赖于瑜伽垫。拉伸通过肩颈放松来替代。</p></blockquote><h2 id="冥想"><a class="markdownIt-Anchor" href="#冥想"></a> 冥想</h2><p><strong>目标：</strong> 冥想5000分钟</p><p><strong>意义：</strong> 冥想是心态上的锻炼，观察自己，认识自己，以达到平和的心态。冥想可以很好的疏解压力，提升专注力</p><p><strong>如何安排冥想频率？</strong></p><blockquote><p>冥想5000分钟意味着每个月500分钟，每周125分钟，每天18分钟，每天至少2组</p></blockquote><p><strong>什么时候做冥想？</strong></p><blockquote><p>早晨一组，晚上一组。晚上睡觉前是最好的冥想时间，早晨起床不要马上做，可以上班前做，否则会重新激起睡意，早晨的阅读和笔记效率会大打折扣。所有感觉情绪不佳或精力不足时均可以通过冥想恢复一下，典型的是晚上饭后。</p></blockquote><p><strong>如果早晨没早起，时间不够怎么办？</strong></p><blockquote><p>优先保证开合跳，小飞燕，卷腹，因为这三个耗时很短，但是冥想的优先级比早饭和梳洗的优先级高。如果真没有时间冥想可以先不做，可以挪到中午或者傍晚。其实重点在于早起啊，怎么能允许早晨没起来呢？没起来会打乱很多事情，然后会耗费很大的精力来重新协调。事情都尽量在固定的时间点完成，这样才能让身体记住，成为习惯。</p></blockquote><p><strong>厌倦了同一个冥想课程怎么半？</strong></p><blockquote><p>周期为两个月，两个月后可以重新评估。冥想的作用是什么，如果这点心态都搞不定，那还冥想个毛。</p></blockquote><p><strong>冥想容易睡着怎么办？</strong></p><blockquote><p>绝对不允许躺着冥想，其次冥想过程中挺直腰背，另外，跟着节奏走，注意聆听。如果真坐着睡着了，那就接受，可以尝试睁着眼，仰着头。</p></blockquote><p><strong>别人用异样的眼光看待你的冥想怎么办？</strong></p><blockquote><p>我知道我想要的是什么，我在做与我目标一致的行为，所以做好自己就行。别人也许没有体会过冥想的益处，所以大家看法都没有错，不要想着去改变别人。</p></blockquote><h1 id="读书目标分解"><a class="markdownIt-Anchor" href="#读书目标分解"></a> 读书目标分解</h1><h2 id="读书笔记"><a class="markdownIt-Anchor" href="#读书笔记"></a> 读书笔记</h2><p><strong>目标：</strong> 阅读150+本书并输出读书笔记</p><p><strong>意义：</strong> 提升认知能力，建立多元思维模型，输出并提升个人品牌和影响力</p><p><strong>如何安排读书时间？</strong></p><blockquote><p>阅读以周为检查维度，即每周保证4本书的量。150本书，每个月15本，意味着每2天1本，还需要输出读书笔记，一本书泛读30分钟，精度每小时50页则平均一本书4-5小时，读书笔记2-3小时，意味着每天需要花费4个小时。如果要保证每天4小时，那么抗干扰能力会非常弱，容易引起情绪上的问题，而且每周还要预留时间在得到专题上，以周为维度可以更充分的利用周末的时间。</p><p>读书笔记尽量在早晨和中午写，中午午休时间压缩到15-20分钟，必须早起，晚上睡前也需要阅读。</p></blockquote><p><strong>精神状态不行，看不进去怎么办？</strong></p><blockquote><p>冥想或运动调整心态之后继续，或者站着看，调整好心态，同时不要因为速度而影响心情</p></blockquote><p><strong>早晨起床后犯困怎么办？</strong></p><blockquote><p>开合跳等激活身体的运动必须做，然后站着看书，如果确实因为睡太晚而提不起精神，那么就写读书笔记，或者洗个热水澡之后再看。</p></blockquote><p><strong>选择纸质的书还是电子版的？</strong></p><blockquote><p>根据场景选择，在住处使用纸质书，在公司或者路上使用电子书，先不考虑墨水屏。外出时一定带一本纸质书</p></blockquote><p><strong>新发现一本特别想看的书怎么办？</strong></p><blockquote><p>每周总结本周的进度时同时确定下周的阅读书单，选择6本书，3本纸质书3本电子书，如果期间发现新的好书，可以先购买，花最多30分钟进行泛读，但是不允许中途换书单。本周的书单已经确定，那就不要朝三暮四影响自己。</p></blockquote><p><strong>如何输出读书笔记？</strong></p><blockquote><p>采取阶梯模型，前50篇不用在意输出质量，不用画思维导图，主要集中于内容的摘取，先输出积累经验，后续再重新评估制定策略。</p></blockquote><p><strong>如何提升效率？</strong></p><blockquote><p>1. 提高阅读速度； 2. 训练金字塔思维能力； 3. 运用测试，刻意练习提取能力</p></blockquote><p><strong>如何追踪读书进度？</strong></p><blockquote><p>每周统计进度，并对读书的书籍和笔记规整到表格，给自己一个直观的认知。</p></blockquote><h2 id="得到专题"><a class="markdownIt-Anchor" href="#得到专题"></a> 得到专题</h2><p><strong>目标：</strong> 整理并输出5+个得到专栏课程</p><p><strong>意义：</strong> 体系化学习，提升专业能力</p><p><strong>如何安排时间？</strong></p><blockquote><p>每周安排一天时间，停止阅读内容，专门处理得到专题</p></blockquote><p><strong>得到专栏的优先级是什么？</strong></p><blockquote><p>目前的优先级是：梁宁产品30讲，30天认知训练营2019。后续再重新评估优先级</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;总体目标&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#总体目标&quot;&gt;&lt;/a&gt; 总体目标&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;运动&lt;/strong&gt;：&lt;code&gt;跑步350+公里&lt;/code&gt;；&lt;code&gt;健身4000+分钟&lt;/code&gt;；&lt;
      
    
    </summary>
    
      <category term="个人成长" scheme="http://ruanxinyu.github.io/categories/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/"/>
    
    
      <category term="个人成长" scheme="http://ruanxinyu.github.io/tags/%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>002：写作是最好的自我投资</title>
    <link href="http://ruanxinyu.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%86%99%E4%BD%9C%E6%98%AF%E6%9C%80%E5%A5%BD%E7%9A%84%E8%87%AA%E6%88%91%E6%8A%95%E8%B5%84/"/>
    <id>http://ruanxinyu.github.io/posts/读书笔记/写作是最好的自我投资/</id>
    <published>2018-12-26T04:35:37.000Z</published>
    <updated>2019-01-27T12:16:21.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述及导图"><a class="markdownIt-Anchor" href="#概述及导图"></a> 概述及导图</h1><p><strong>本书阐述了写作在互联网时代的红利，分析了大家不愿意动笔的原因与解决方式。结合屏读的特点该书阅读所需要的思维方式，然后逐步分析文章的标题，结构，行文，写故事等方面的技巧，最后结合职场行文、新媒体写作和爆款文来实例进一步说明前文的观点。</strong></p><img src="/posts/读书笔记/写作是最好的自我投资/2018-12-26-21-40-40.png" title="[blog.ruanxinyu.cn]"><h1 id="内容剖析"><a class="markdownIt-Anchor" href="#内容剖析"></a> 内容剖析</h1><p>在未来社会，最重要的资产是影响力，而构成影响力的最好两种方式是<code>演讲</code>和<code>写作</code>。</p><p>写作是一种更大范围的公开表达。会表达的人是这个时代最大的红利收获者。工资代表你的过去，品牌代表你的未来。</p><p>写作可以消化知识，提升思维，建立品牌，是一个一举多得的事情。写作需要刻意练习，需要有大量的输入，保持对社会的敏感度。</p><p>写作要克服完美主义，先行动写起来，一次性写完，不要马上回头修改，保持一段时间再修改，根据问题列表来优化文章内容，可以<code>先模仿后创新</code>，建立<code>里程碑</code>，做好预期。</p><p>屏读的特点是：<code>速度快</code>，<code>频次高</code>，<code>碎片化</code>。读者越来越没有耐心，兴奋点越来越高，吃鸡游戏会火也有类似的原因。</p><p>写作需要有：<code>用户思维</code>、<code>产品思维</code>和<code>社交思维</code>。站在读者的角度思考他需要什么，阅读场景是什么，属于倾听逻辑，如何产生行动转化和分享冲动。</p><h2 id="标题"><a class="markdownIt-Anchor" href="#标题"></a> 标题</h2><p>好的标题的四个特点：引发共鸣，制造悬念，引发议论，颠覆认知。</p><p>如何写好标题呢：观察并分析，模仿并套用，重视市场的反馈</p><h2 id="行文节奏"><a class="markdownIt-Anchor" href="#行文节奏"></a> 行文节奏</h2><p>写作之难在于把网状的思考，用树状的结构，体现在线性展开的语句中。讲故事，设悬念，给代入，有反转。</p><p>讲故事，而不是讲道理，故事结尾通过金句。</p><p>设置悬念则需要设置锚点。</p><p>代入感首先制造一个读者熟悉的问题，吸引注意力，然后顺着对方的意愿解释原因，最后夹带自己的私货给出观点和对策。</p><h2 id="写故事"><a class="markdownIt-Anchor" href="#写故事"></a> 写故事</h2><p>写自己的故事是获取信任的捷径，可以把自己的成绩装入到你的成长故事。</p><p>情感真实，克制表达，相信市场的反馈。</p><h2 id="逻辑框架"><a class="markdownIt-Anchor" href="#逻辑框架"></a> 逻辑框架</h2><p>论据要充分，禁用模糊多义的语言，复杂的事情简单说，克制情绪。</p><p>两种方式可以提升逻辑性：<code>金字塔原理</code>和<code>5W1H</code></p><h2 id="职场文章"><a class="markdownIt-Anchor" href="#职场文章"></a> 职场文章</h2><p>职场干货文的写作，是通过持续的专业输出来争夺职场话语权的方法。</p><ol><li>选题，帮助读者解决什么问题</li><li>界定问题的边界，把握核心问题，一次解决一个问题，而不要泛泛而谈</li><li>SWOT方式研究分析，如何从深度，角度，广度和速度上分析该主题</li><li>问题或结论先行，起步阶段切入点要小</li><li>学会对标</li><li>采用金字塔模式进行输出</li></ol><h2 id="新媒体"><a class="markdownIt-Anchor" href="#新媒体"></a> 新媒体</h2><p>新媒体不是一个行业，而是一种工具。竞争是高效率淘汰低效率的过程。比传播更重要的是<code>沉淀用户</code>。</p><p>万能框架：<code>亮观点</code>-&gt;<code>说现象-</code>&gt;<code>作分析</code>-&gt;<code>下结论</code></p><h1 id="写作问题列表"><a class="markdownIt-Anchor" href="#写作问题列表"></a> 写作问题列表</h1><p>在写文章和修改文章时我们以问题进行驱动，可以尝试着通过如下的问题来对文章进行优化：</p><ol><li>你想传达的内容是什么，要解决什么问题，受众是谁？</li><li>你的表述是否简单精炼，是否可以进一步简洁？</li><li>是否可以通过故事的方式讲述，是否可以营造画面感？</li><li>这段文字是不是有必要存在，存在的目的是什么？</li><li>文章的结构是什么？论据是否充分？</li><li>文章标题有没有吸引力？</li><li>结尾是否有金句？</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述及导图&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述及导图&quot;&gt;&lt;/a&gt; 概述及导图&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;本书阐述了写作在互联网时代的红利，分析了大家不愿意动笔的原因与解决方式。结合屏读的特点该书阅读所需要的思维方式
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>001：如何阅读一本书</title>
    <link href="http://ruanxinyu.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/"/>
    <id>http://ruanxinyu.github.io/posts/读书笔记/如何阅读一本书/</id>
    <published>2018-12-16T15:44:26.000Z</published>
    <updated>2019-01-27T12:16:21.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述及导图"><a class="markdownIt-Anchor" href="#概述及导图"></a> 概述及导图</h1><p><strong>本书阐述了阅读的目标，将阅读分为基础阅读、检视阅读、分析阅读和主题阅读4个递进层次，并详细介绍了不同阅读层次的目标、规则以及所需要关注的问题点，同时分析了阅读每种类型书籍所需要注意的不同点。</strong></p><img src="/posts/读书笔记/如何阅读一本书/2018-12-16-23-49-48.png" title="[blog.ruanxinyu.cn]"><h1 id="内容剖析"><a class="markdownIt-Anchor" href="#内容剖析"></a> 内容剖析</h1><p>主动阅读，而不是被动的接受信息，<strong>主动的阅读就是让一本书向你既有的理解力做挑战，不要以为读得多就是读得好</strong>。</p><p>阅读的目标有三个：1.<code>获得资讯</code>， 2. <code>为了娱乐</code>， 3. <code>求得理解</code>。而学习指的是理解更多的事情，而不是记住更多的资讯。</p><p>阅读分为4分层次：基础阅读、检视阅读、分析阅读和主题阅读。这四个层次不是相互独立的，是相互递进的，高的层次包含低层次的特性。</p><p>我们都具有基础阅读的能力，但是从高中之后阅读能力就没有进一步培养，我们需要更进一步的成为真正有能力的阅读者。</p><h2 id="检视阅读"><a class="markdownIt-Anchor" href="#检视阅读"></a> 检视阅读</h2><p>检视阅读包含两种：1. <code>有系统的粗读和略读</code>， 2. <code>粗浅的阅读</code>。检视阅读我们要回答如下几个问题：</p><ol><li>这是什么样一本书</li><li>整本书谈论的是什么</li><li>作者是借着怎样的整体框架来发展他的观点和陈述他对这个主题的理解的</li></ol><p>有系统的粗读和略读可以通过如下方式完成，但是建议<strong>耗时不要超过15分钟</strong>：</p><ol><li>先看书名页，有序就先看序</li><li>研究目录页</li><li>检阅一下索引，如果有的话</li><li>读一下出版者的介绍</li><li>挑选几个跟主题相关的篇章浏览（注意开头和结尾的摘要说明）</li><li>随便翻翻书的内容，念一两段，有时候连续读几页，但不要太多</li></ol><p>粗浅的阅读有一个规则：<strong>头一次面对一本难读的书的时候，从头到尾先读一遍，碰到不懂的地方不要停下来查询和思索。</strong></p><p>阅读速度是可以提升的，最简单的方式就是通过手指防止视觉的逗留和倒退。但是针对不同书籍的不同内容，阅读速度是不同的，而不是一味的求快。检视阅读是一种训练有素的快速阅读。</p><h2 id="主动阅读"><a class="markdownIt-Anchor" href="#主动阅读"></a> 主动阅读</h2><p>如何成为主动阅读的核心是：<strong>提出问题，在阅读的过程中尽可能找到答案</strong></p><ol><li>整体来说，这本书到底在谈些什么，核心主题和其从属的关键议题是什么</li><li>作者细部说了什么，怎么说的，找出主要的想法，声明和论点</li><li>这本书是否有道理，是全部有道理还是部分有道理</li><li>这本书跟你有什么关系</li></ol><p>如果你知道作者在说什么，但是却说不出来，那么通常是你其实并不知道自己在想些什么。</p><p>做笔记是不可或缺的，可以采用三种做笔记的方式帮助思考：</p><ol><li><strong>结构笔记：</strong> 重点在于全书的架构，而不是内容</li><li><strong>概念笔记：</strong> 关注于核心概念</li><li><strong>辨证笔记：</strong> 针对不同场景进行辨证</li></ol><h2 id="分析阅读"><a class="markdownIt-Anchor" href="#分析阅读"></a> 分析阅读</h2><p>第一阶段：<strong>找出一本书在谈些什么规则</strong></p><ol><li>依照书的种类与主题来分类</li><li>使用最简洁的文字说明整本书在谈论些什么</li><li>将主要部分按照顺序与关联性列举出来。将全书的大纲列举出来，并将各个部分的大纲也列出来</li><li>确定作者想要解决的问题</li></ol><p>第二阶段：<strong>诠释一本书的内容规则</strong></p><ol><li>诠释作者的关键字，与他达成共识</li><li>由最重要的句子中，抓住作者的重要主旨</li><li>知道作者的论述是什么，从内容中找出相关的句子，再重新架构出来</li><li>确定作者已经解决了哪些问题，还有哪些是没有解决的，再判断哪些是作者知道他没解决的问题</li></ol><p>第三阶段：<strong>像是沟通知识一样的评价一本书的规则</strong></p><p>A. 智慧礼节的一般规则</p><ol><li>除非你已经完成大纲框架，也能诠释本书了，否则不要轻易评判（在你说出“我读懂了”之前，不要说你同意，不同意或暂缓评论）</li><li>不要争强好胜，非辨到底不可</li><li>在说出评论之前，你要能证明自己区分得出真正的知识与个人观点的不同</li></ol><p>B. 批评观点的特别标准</p><ol><li>证明作者知识不足</li><li>证明作者知识错误</li><li>证明作者不合逻辑</li><li>证明作者的分析和理由不完整</li></ol><h3 id="第一阶段"><a class="markdownIt-Anchor" href="#第一阶段"></a> 第一阶段</h3><p><strong>规则1：确定是哪一种类型的书籍，种类与主题分类</strong><br><strong>规则2：使用最简短的语言叙述整本书的内容</strong><br><strong>规则3：列举重要章节，梳理整体框架（金字塔原理）</strong><br><strong>规则4：找出作者在问和想要解决的问题</strong></p><p>可以分为<code>实用性</code>和<code>理论性</code>作品，而理论作品可以分为<code>历史</code>、<code>科学</code>和<code>哲学</code>。</p><p>理论性的作品是在教你这是什么，实用性的作品在教你如何去做你想要做的事情。让知识变得实用，就一定有操作规则，我们一定要想做些什么，应该怎么利用它。</p><p>如果一本理论的书所强调的内容超乎你日常、例行、正常生活的经验，那就是科学的书，否则就是一本哲学的书。可以不准确的说，科学是以实验为基础，而哲学家只是坐在椅子上的思考者。</p><p>我们可以通过金字塔原理为一本书拟大纲，而只有经过了这一步才能更好的总结出全书的重点摘要。</p><p>实用性问题：</p><blockquote><p>有哪些结果可以选择？应该采取什么样的手段才能获得某种结果？要达到某个目的，应该采取哪种行动？以什么顺序？在这些条件下，什么事是对的，或者才会更好，而不是更糟？在什么样的条件下，这样做会比那样做好一些？</p></blockquote><p>理论性问题：</p><blockquote><p>某件事存在吗？是什么样的事？发生的原因是什么？或是在什么样的情况下存在？或为什么有这件事的存在？这件事的目的是什么？造成的影响是什么？特性及特征是什么？与其他类似事件，或不相同事件的关联是什么？这件事是如何运行的？</p></blockquote><h3 id="第二阶段"><a class="markdownIt-Anchor" href="#第二阶段"></a> 第二阶段</h3><p><strong>规则5：找出关键字，与作者达成共识</strong><br><strong>规则6：从重要的句子中抓出作者重要的主旨</strong><br><strong>规则7：找出论述，重新架构前因后果</strong><br><strong>规则8：确定作者已经解决了哪些问题，哪些没有解决，哪些无法解决</strong></p><p>作者沟通的主要核心是他所下的肯定与否定的判断，以及他为什么这么做的理由。</p><p>一个叙述是从某一处开始，经过某处，再达到某处的，那就是思想的演变转移。</p><p>“<code>用你自己的话来说</code>”是测验你懂不懂一个句子主旨的最佳方法。同时看你能不能举一个自己所经历过的主旨所形容的经验，即<code>举例</code>。</p><p>找出论据的三点小建议：</p><ol><li>要记住所有论述都包含了一些声明</li><li>要区别归纳法和演绎法两种论述的不同之处</li><li>找出作者认为哪些事情是假设，哪些是能证实的或者有根据的，以及哪些是不需要证明的自明之理</li></ol><h3 id="第三阶段"><a class="markdownIt-Anchor" href="#第三阶段"></a> 第三阶段</h3><p><strong>规则9：在你说出“我读懂了”之前，不要说你同意，不同意或暂缓评论</strong><br><strong>规则10：不要争强好胜，非辨到底不可</strong><br><strong>规则11：在说出评论之前，你要能证明自己区分得出真正的知识与个人观点的不同</strong></p><p>必须能够评论，提出批评，才算真正完成了主动阅读。同意或者不同意作者的说法都需要花费心力来判断，评判之前需要有理论基础。</p><p>当读者不只是盲目的跟从作者的论点，还能和作者的论点针锋相对时，他最后才能提出同意或者反对的有意义的评论。</p><p>一个读得很广泛却不精的人，与其值得赞美，不如值得同情。</p><p>读者也可以是伟大的读者，因为他们精通自己所阅读的书，他们的程度就可以跟作者相匹敌，他们就有权称作权威人士</p><h2 id="主题阅读"><a class="markdownIt-Anchor" href="#主题阅读"></a> 主题阅读</h2><p><strong>第一阶段：观察研究范围，主题阅读的准备阶段</strong></p><ol><li>设计一份实验性的书单</li><li>使用检视阅读浏览书目上所有的书，确定哪些跟你的主题相关，并就你的主题建立起清楚的概念</li></ol><p><strong>第二阶段：阅读所有第一阶段收集到的书</strong></p><ol><li>找到相关章节：在主题阅读中，你及你关心的主题才是基本的重点，而不是你阅读的书，你的目标是找出书中与你的主题相关的章节</li><li>带引作者与你达成共识：根据主题创造出一套中立的词汇，无论作者是否实际用刀这些词汇，所有的作者或者至少绝大部分的作者都可以用这套词汇来诠释</li><li>厘清问题：找出作者的关键句子，从中逐步了解作者的主旨，我们也得建立起一组不偏不倚的主旨，列出一些可以把我们的问题说的很明白的问题，然后让那些作者来回答这些问题</li><li>界定主要及次要的议题：将作者针对各个问题的不同意见整理陈列在各个议题旁，你要记住，各个作者之间或之中，不见得一定存在着某个议题，有时候，你需要针对一些不是作者主要关心范围的事情，吧他的观点解读，才能构出这种议题</li><li>分析讨论：这些问题仔细整理出来，并按照顺序排列，以突显主题。比较有共通的议题，要放在比较没有共通的议题之前，各个议题之间的关系也要清楚的界定出来</li></ol><blockquote><p>主题阅读与分析阅读最大的不同在于视角不同，分析阅读以作者的思路进行阅读，而主题阅读是以自己的问题为主导阅读</p></blockquote><h2 id="如何阅读实用型的书"><a class="markdownIt-Anchor" href="#如何阅读实用型的书"></a> 如何阅读实用型的书</h2><p>任何实用性的书都不能解决该书所关心的实际问题，实际问题只能靠行动。因此读者一定要加上一点自己的想法，才能根据自己的状态相结合运用到实际状态中。</p><p>实用型的书一种是对规则的描述，一种是阐述形成规则的原理。理论性的原则会归纳出出色的形式规则。</p><p>在平路一本实用型的书时，所有的事都与结果及目标有关。我们需要问自己几个问题：1. 作者的目的是什么，2. 他建议用什么样的方法达到这个目的，3. 这与我有何干。</p><p>如果我们真的接受了作者的观点，那么我们没有理由不采取行动。</p><h1 id="行为指南"><a class="markdownIt-Anchor" href="#行为指南"></a> 行为指南</h1><ol><li>阅读速度是需要提升的，但是需要注意在不同的场合使用不同的速度</li><li>阅读一本书之前话25分钟完成检视阅读</li><li>以问题来驱动阅读，以理解、复述和评论为目标</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述及导图&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述及导图&quot;&gt;&lt;/a&gt; 概述及导图&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;本书阐述了阅读的目标，将阅读分为基础阅读、检视阅读、分析阅读和主题阅读4个递进层次，并详细介绍了不同阅读层次的
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>博客操作说明</title>
    <link href="http://ruanxinyu.github.io/posts/%E5%8D%9A%E5%AE%A2/%E5%8D%9A%E5%AE%A2%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/"/>
    <id>http://ruanxinyu.github.io/posts/博客/博客操作说明/</id>
    <published>2018-10-20T09:46:50.000Z</published>
    <updated>2018-10-20T10:33:24.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何配置博客导航栏"><a class="markdownIt-Anchor" href="#如何配置博客导航栏"></a> 如何配置博客导航栏</h1><p>编辑<code>source/_data/menu.yml</code>文件内容即可，目前仅支持两级菜单。</p><h1 id="如何添加书签"><a class="markdownIt-Anchor" href="#如何添加书签"></a> 如何添加书签</h1><p>编辑<code>source/_data/bookmarks.yml</code>文件内容即可。</p><h1 id="如何向收集箱中添加内容"><a class="markdownIt-Anchor" href="#如何向收集箱中添加内容"></a> 如何向收集箱中添加内容</h1><p>编辑<code>source/pages/inbox/index.md</code>文件内容即可。</p><h1 id="如何决定文章哪些内容自动收录到速查表"><a class="markdownIt-Anchor" href="#如何决定文章哪些内容自动收录到速查表"></a> 如何决定文章哪些内容自动收录到速查表</h1><p>在文章的元数据中添加<code>questions: 2</code>元数据，其中<code>2</code>表示2级标题，如果向收集123级标题则可以设置为<code>questions: 123</code></p><h1 id="如何添加项目"><a class="markdownIt-Anchor" href="#如何添加项目"></a> 如何添加项目</h1><p>编辑<code>source/_data/projects.json</code>文件内容，然后在<code>source/_data/menu.yml</code>中添加对应的菜单项即可</p><h1 id="如何通过listary快速搜素博客内容"><a class="markdownIt-Anchor" href="#如何通过listary快速搜素博客内容"></a> 如何通过Listary快速搜素博客内容</h1><p>设置Listary的关键字，然后即可通过Listary实现快速搜索：</p><img src="/posts/博客/博客操作说明/2018-10-20-17-51-17.png" title="[blog.ruanxinyu.cn]">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何配置博客导航栏&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#如何配置博客导航栏&quot;&gt;&lt;/a&gt; 如何配置博客导航栏&lt;/h1&gt;
&lt;p&gt;编辑&lt;code&gt;source/_data/menu.yml&lt;/code&gt;文件内容即可，目前仅支持两级菜
      
    
    </summary>
    
      <category term="博客" scheme="http://ruanxinyu.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://ruanxinyu.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>【香帅的北大金融学课】第002周学习总结</title>
    <link href="http://ruanxinyu.github.io/posts/%E9%A6%99%E5%B8%85%E7%9A%84%E5%8C%97%E5%A4%A7%E9%87%91%E8%9E%8D%E5%AD%A6%E8%AF%BE/%E3%80%90%E9%A6%99%E5%B8%85%E7%9A%84%E5%8C%97%E5%A4%A7%E9%87%91%E8%9E%8D%E5%AD%A6%E8%AF%BE%E3%80%91%E7%AC%AC002%E5%91%A8%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://ruanxinyu.github.io/posts/香帅的北大金融学课/【香帅的北大金融学课】第002周学习总结/</id>
    <published>2018-10-08T05:06:01.000Z</published>
    <updated>2019-01-09T07:26:32.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本周学习内容ppt"><a class="markdownIt-Anchor" href="#本周学习内容ppt"></a> 本周学习内容PPT</h1><!-- encrypt start --><a href="/posts/香帅的北大金融学课/【香帅的北大金融学课】第002周学习总结/《香帅的北大金融学课》课件W2.pdf" title="=======点击下载PPT=======">=======点击下载PPT=======</a><br><img src="/posts/香帅的北大金融学课/【香帅的北大金融学课】第002周学习总结/2018-10-10-21-45-53.png" title="[blog.ruanxinyu.cn]"><!-- encrypt end --><h1 id="王的信用中央货币财政体系"><a class="markdownIt-Anchor" href="#王的信用中央货币财政体系"></a> 王的信用：中央货币财政体系</h1><h2 id="语句摘录"><a class="markdownIt-Anchor" href="#语句摘录"></a> 语句摘录</h2><p>欧洲的金融市场产生于一个“小国林立、分封而治”的大背景。而中国的金融市场，是从一个中央集权的帝国内部演化出来的。</p><p>秦始皇为统一市场，因而统一了货币制度。汉武帝穷兵黩武，通过国有经济筹集经费和加强集权控制。</p><p>**中华帝国的金融是围绕着中央财政，自上而下的一个货币经济体系，我们就可以直接把它称为“<code>中央货币财政体系</code>”。**这种制度在生产力低下的情况下能够起到强大的动员能力，但是因为完全依赖于国家，民间信用意识很难培养起来。</p><blockquote><p>存在即合理，只是说以前合理的现在不一定合理，所以分析现状也要追溯历史，这样才能看得更清楚</p></blockquote><p>中国现代的金融市场是古代的继承，都是自上而下，为中央财政目标而实施的“顶层设计”。</p><p>最初<code>A</code>股市场的设立，它设立的目标是替国有企业解困。</p><p>中央控制可以集中资金发展基础建设，但是造成民间信用脆弱，民间理财需求被压抑。</p><h2 id="留言区摘选"><a class="markdownIt-Anchor" href="#留言区摘选"></a> 留言区摘选**</h2><p>吴军对行业变革的两点建议：1. 目标要超前，方法和认识要彻底更新；2. 做法上要渐进，反对一切推倒重来</p><p>高储蓄意味着高投资</p><h2 id="划重点"><a class="markdownIt-Anchor" href="#划重点"></a> 划重点</h2><blockquote><ol><li>国家掌控大量的金融资源，经济生活国有化，便于国家“集中力量办大事”。 2. 这种制度的缺点是民间信用脆弱。民间投融资需求得不到满足，所以造成了中国金融市场的很多乱象。</li></ol></blockquote><h2 id="课后习题"><a class="markdownIt-Anchor" href="#课后习题"></a> 课后习题</h2><blockquote><p>中国老百姓特别喜欢储蓄，自古就喜欢把银元存在缸里、埋在地下。爷爷奶奶们都喜欢把钱放在床下，塞进抽屉柜深处。你觉得这种现象是因为中国人特别抠门吗？再想想山西票号最后为什么会受到洋行挤压而衰落，这中间有什么联系吗？</p></blockquote><p>每个人都会衡量利益关系，既然选择压箱底，那就一定是没有更好的途径，在法律不健全的情况下，产权不明确，予之在君，夺值在君，贫之在君，富之在君，民众缺少民间和官方的金融机构信任感。反过来看，现在钱放在银行里的钱不断在贬值，银行和国家的信任不是也在不断的流失吗？</p><h2 id="课程原文"><a class="markdownIt-Anchor" href="#课程原文"></a> 课程原文</h2><!-- encrypt start --><img src="/posts/香帅的北大金融学课/【香帅的北大金融学课】第002周学习总结/2018-10-10-13-47-20.png" title="[blog.ruanxinyu.cn]"><!-- encrypt end --><h1 id="分权制衡银行货币信用体系"><a class="markdownIt-Anchor" href="#分权制衡银行货币信用体系"></a> 分权制衡：银行货币信用体系</h1><h2 id="语句摘录-2"><a class="markdownIt-Anchor" href="#语句摘录-2"></a> 语句摘录</h2><p>中世纪，朝圣者需要一个异地托管财物的体系，因为当时小国林立无法建立跨国异地财务托管体系，因此圣殿骑士团承担起这个指责，扮演着“银行”的角色，而且扮演了一个欧洲金融启蒙者的角色。</p><p>因为小国林立，相互制约，造成统治阶层也不敢违约，所以才建立起全民信用关系网络。之后一系列的金融业务，都延续了圣殿骑士团的金融遗产，在这个基础上，欧洲就逐渐形成了以“<code>银行为中心”的、“分权制衡</code>”下的信用体系，我把它称为欧洲的“<code>银行货币信用体系</code>”。</p><p>美国初期13个殖民地相互制约，经过南北战争后统一了市场和货币，结合了中华帝国“集中”和欧洲大陆“分权”的优越性。</p><p>欧美信用社会的形成，是由于欧洲分权制衡的形态所决定的。</p><h2 id="划重点-2"><a class="markdownIt-Anchor" href="#划重点-2"></a> 划重点</h2><blockquote><ol><li>中世纪之后的“圣殿骑士团”，从事财务托管、货币兑换、储蓄理财业务，扮演着银行的角色，奠定了欧洲的金融基础。   2. 骑士团衰落后，意大利银行业、荷兰证券业、英法银行业等其他信用机构兴起，逐渐形成以银行为中心的，分权制衡下的信用体系。   3. 美国具有与欧洲相似的政治分权制衡的性质，延续了欧洲的金融传统，所以成为世界上最发达的金融市场。</li></ol></blockquote><h2 id="课后习题-2"><a class="markdownIt-Anchor" href="#课后习题-2"></a> 课后习题</h2><blockquote><p>大家都知道，中国现在的互联网支付行业特别发达，支付宝、微信简直有横扫全球的趋势。但是我们都知道，互联网支付是依赖于金融体系的，也依赖于互联网的一个技术，为什么在一个互联网落后，金融也不发达的地方，反而“长”出了全球最牛的互联网支付体系呢？</p></blockquote><p>社会逐步走向中产和消费，理财需求被压抑，并且现在法律逐步健全，因而支付宝等弥补了民间的信用缺失，同时银行存在一定的跨地域问题，纸币交易麻烦，刷卡支付不健全，而移动互联的普及大大增加了支付的便利性。</p><h2 id="课程原文-2"><a class="markdownIt-Anchor" href="#课程原文-2"></a> 课程原文</h2><!-- encrypt start --><img src="/posts/香帅的北大金融学课/【香帅的北大金融学课】第002周学习总结/2018-10-10-18-32-14.png" title="[blog.ruanxinyu.cn]"><!-- encrypt end --><h1 id="金融市场上的二道贩子们"><a class="markdownIt-Anchor" href="#金融市场上的二道贩子们"></a> 金融市场上的二道贩子们</h1><h2 id="语句摘录-3"><a class="markdownIt-Anchor" href="#语句摘录-3"></a> 语句摘录</h2><p>“<code>信息不对称</code>”正是金融市场上最核心的特征，因为金融做的是信用的交易，换句话说，金融市场上交易的是很难看得见、摸得着的东西。</p><p>我们中国叫“券商”，国外叫“投资银行”。投资银行或者券商在降低信息不对称，撮合金融市场交易的过程中间发挥的巨大作用。</p><blockquote><p>说得好听点叫降低信息不对称促进市场交易，说得不好听点就是利用信息不对称赚钱</p></blockquote><p>没有金融中介机构，金融市场是没有办法运行的，在金融市场这么一个天生具有信息不对称的地方，高度中介化是必然的趋势。</p><h2 id="划重点-3"><a class="markdownIt-Anchor" href="#划重点-3"></a> 划重点</h2><blockquote><ol><li>信息不对称是金融市场最重要的特征，因为金融市场交易的是看不见、摸不着的“未来”，是虚拟经济，所以消除信息不对称的“中介机构”非常重要。 2. 市场上有很多很多的金融中介机构、信息评级机构，还有银行、投资银行，这一切都是金融中介机构，它是我们金融市场上最重要的组成部分，因为它们降低了市场上的信息不对称，维持了我们这个市场的运行。</li></ol></blockquote><h2 id="课后习题-3"><a class="markdownIt-Anchor" href="#课后习题-3"></a> 课后习题</h2><blockquote><p>现在很多人在说互联网技术改变了金融本质，比如 P2P, 就是 peer to peer (个人到个人)的借贷方。由于有了互联网技术，未来金融市场上完全可以“去中介化”，你认同这个说法吗？为什么？</p></blockquote><p>信息不对称是客观事实，所以永远无法去中介化，只是说中介变为了互联网公司而已，而互联网公司到底能不能做好信息的核查就是一个问题，因此存在较高的金融风险，这也是国家限制的原因吧。支付宝闪贷也是有大家平时的消费信用做担保的。</p><p>中介可以提高社会的协作效率，术业有专攻。</p><h2 id="课程原文-3"><a class="markdownIt-Anchor" href="#课程原文-3"></a> 课程原文</h2><!-- encrypt start --><img src="/posts/香帅的北大金融学课/【香帅的北大金融学课】第002周学习总结/2018-10-10-20-23-14.png" title="[blog.ruanxinyu.cn]"><!-- encrypt end --><h1 id="个人资产配置的生命周期"><a class="markdownIt-Anchor" href="#个人资产配置的生命周期"></a> 个人资产配置的生命周期</h1><h2 id="语句摘录-4"><a class="markdownIt-Anchor" href="#语句摘录-4"></a> 语句摘录</h2><p>实物资产是对抗资产贬值一个特别好多途径。</p><p>你赚钱能力越来越强了，也意味着这个时候是你风险承受能力最强的时候。</p><blockquote><p>如果你赚的钱都用来还贷和消费了，那么其实你并没有什么风险承受能力的，这也就是为什么很多房奴不敢冒险的原因。</p></blockquote><img src="/posts/香帅的北大金融学课/【香帅的北大金融学课】第002周学习总结/2018-10-10-20-57-42.png" title="[blog.ruanxinyu.cn]"><h2 id="划重点-4"><a class="markdownIt-Anchor" href="#划重点-4"></a> 划重点</h2><blockquote><ol><li>在青年的时候，我们应该加大实物资产的配置。</li><li>在壮年的时候要加大风险资产的配置，进行资产的多元化配置。</li><li>在老年的时候，要加大安全资产的配置，同时加大流动性资产的配置。</li></ol></blockquote><h2 id="课后习题-4"><a class="markdownIt-Anchor" href="#课后习题-4"></a> 课后习题</h2><blockquote><p>你在资产配置上曾经走过什么弯路，然后掉入过什么坑，做过什么傻事？</p></blockquote><p>最大的弯路就是入门太晚，就是工作后存钱太少，没有学习理财，在大学也没有想过怎么去赚钱</p><h2 id="课程原文-4"><a class="markdownIt-Anchor" href="#课程原文-4"></a> 课程原文</h2><!-- encrypt start --><img src="/posts/香帅的北大金融学课/【香帅的北大金融学课】第002周学习总结/2018-10-10-20-56-17.png" title="[blog.ruanxinyu.cn]"><!-- encrypt end --><h1 id="深度解析阿里金融帝国"><a class="markdownIt-Anchor" href="#深度解析阿里金融帝国"></a> 深度解析阿里金融帝国</h1><h2 id="语句摘录-5"><a class="markdownIt-Anchor" href="#语句摘录-5"></a> 语句摘录</h2><p>虽然阿里巴巴从搭建互联网起家，但其本质上做的还是营销服务（阿里铁军）。但是到了B2B这个市场，当客户企业成长到一定规模以后可能就不需要阿里巴巴的中介服务了。客户企业能够打造自己的网站（或者其他信息渠道），组建自己的营销团队。所以，阿里巴巴的 B2B 业务增长有限。</p><blockquote><p>这个瓶颈点分析的还是到位的。</p></blockquote><p>2003年阿里转型C2C，快速形成C2C生态系统淘宝；2004年支付宝的诞生成就了C2C的市场信任；2008年推出专注于服务第三方品牌及零售商的天猫；2009年成立阿里云；2011年从香港退市完成订餐，音乐，地图等数字媒体及娱乐业务的拓展；2014年在纽交所上市。但是阿里在O2O（美团），物流（京东），社交（微信）都还存在欠缺。</p><blockquote><p>快速转型通过C2C的大流量建立起平台，然后反过来反哺2B。在初期国内电子商务基础设施基本为零，这是一个蓝海市场，另外移动互联的时代更具有促进作用。<br>对于电子商务，信任是个大问题，所国外有发达的信用卡体系，而国内没有，所以给了阿里一个机会。在假货横行的时代，天猫一能拉进企业用户，二能提升用户的信任。</p></blockquote><p>支付宝由原来的第三方担保需求，演化出来了第三方托管需求，于是虚拟账户出生了，因此具有强大的融资能力，跟金融相关的产品就应运而生。从业务中生长出来，又在生活场景和用户痛点夹缝中，逐渐丰满。</p><blockquote><p>团队要定期审视外部环境，然后做新的尝试，去创新，对于个人又何尝不是这样，我想起了《谁动了我的奶酪》里的四个小鼠。</p></blockquote><h2 id="课程原文-5"><a class="markdownIt-Anchor" href="#课程原文-5"></a> 课程原文</h2><!-- encrypt start --><img src="/posts/香帅的北大金融学课/【香帅的北大金融学课】第002周学习总结/2018-10-10-21-50-12.png" title="[blog.ruanxinyu.cn]"><!-- encrypt end --><h1 id="本周问答如何投资a股市场更明智"><a class="markdownIt-Anchor" href="#本周问答如何投资a股市场更明智"></a> 本周问答：如何投资A股市场更明智</h1><h2 id="语句摘录-6"><a class="markdownIt-Anchor" href="#语句摘录-6"></a> 语句摘录</h2><p>美国电商没有带动美国移动支付浪潮是因为美国的支付体系和信用体系已经很完善，不需要新的支付工具，这也是有历史根源。</p><p>中国储蓄高，从投资角度看，高储蓄意味着高投资，现在财富积累变多，逐步进入<code>中产+消费</code>的时候，理财需求将会日益增长。</p><blockquote><p>不如说财富贬值以及投资可能带来的高收入的诱惑造成理财需求的日益增长呢</p></blockquote><h2 id="课程原文-6"><a class="markdownIt-Anchor" href="#课程原文-6"></a> 课程原文</h2><!-- encrypt start --><img src="/posts/香帅的北大金融学课/【香帅的北大金融学课】第002周学习总结/2018-10-10-21-16-04.png" title="[blog.ruanxinyu.cn]"><!-- encrypt end -->]]></content>
    
    <summary type="html">
    
      【注意】：该文章存在加密内容，请进入详情查看具体内容。&lt;br&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="经济" scheme="http://ruanxinyu.github.io/tags/%E7%BB%8F%E6%B5%8E/"/>
    
      <category term="香帅的北大金融学课" scheme="http://ruanxinyu.github.io/tags/%E9%A6%99%E5%B8%85%E7%9A%84%E5%8C%97%E5%A4%A7%E9%87%91%E8%9E%8D%E5%AD%A6%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>【香帅的北大金融学课】第001周学习总结</title>
    <link href="http://ruanxinyu.github.io/posts/%E9%A6%99%E5%B8%85%E7%9A%84%E5%8C%97%E5%A4%A7%E9%87%91%E8%9E%8D%E5%AD%A6%E8%AF%BE/%E3%80%90%E9%A6%99%E5%B8%85%E7%9A%84%E5%8C%97%E5%A4%A7%E9%87%91%E8%9E%8D%E5%AD%A6%E8%AF%BE%E3%80%91%E7%AC%AC001%E5%91%A8%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://ruanxinyu.github.io/posts/香帅的北大金融学课/【香帅的北大金融学课】第001周学习总结/</id>
    <published>2018-10-08T05:06:01.000Z</published>
    <updated>2019-01-09T07:26:30.765Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本周学习内容ppt"><a class="markdownIt-Anchor" href="#本周学习内容ppt"></a> 本周学习内容PPT</h1><!-- encrypt start --><a href="/posts/香帅的北大金融学课/【香帅的北大金融学课】第001周学习总结/《香帅的北大金融学课》课件W1.pdf" title="=======点击下载PPT=======">=======点击下载PPT=======</a><br><img src="/posts/香帅的北大金融学课/【香帅的北大金融学课】第001周学习总结/2018-10-10-21-36-51.png" title="[blog.ruanxinyu.cn]"><!-- encrypt end --><h1 id="一万美金赠品里的秘密"><a class="markdownIt-Anchor" href="#一万美金赠品里的秘密"></a> 一万美金赠品里的秘密</h1><h2 id="语句摘录"><a class="markdownIt-Anchor" href="#语句摘录"></a> 语句摘录</h2><p>买一辆车，送一张面值１万美金的30年期的美国国债。按照90年代中期平均8％左右的国债利率算，折算到30年后，这个面值１万美金的债券只剩下994美金。</p><blockquote><p>复利在金钱的升值和贬值上效果是类似的，通货膨胀会很大程度稀释我们的财富，我们需要防止自身财富的贬值。</p></blockquote><p>货币的时间价值，在金融里，时间就是金钱。货币的时间价值在金融里边是可以度量，计算，和用来支付的。</p><p>财富数值的变化，其实是金融工具把我们拥有的相同时间（未来十年）进行了深度的加工，都化成了完完全全不一样的时间价值。</p><blockquote><p>金融不仅是对时间做加工，也是对风险的加工，因为价值在未来存在不确定性，而这种不确定性衍生出很多金融产品。</p></blockquote><p>你可以将“时间”看作一种原料，这些金融工具就干了一件什么事呢？它把这种时间维度里面的风险全部给曝露了出来，然后对这种原料进行加工，做成不同的产品。换一句话说，用金融术语来说，<code>金融就是为时间定价，而我们这些购买金融产品，做出金融决策的人，就是购买了不同的未来价值。</code></p><p>金融技术就像我们建造的时光机器……它拓展了我们想象和计算未来的能力，然后塑造了一个关于可量化、可交易的时间维度，让我们人类越来越变成时间的生物。</p><h2 id="划重点"><a class="markdownIt-Anchor" href="#划重点"></a> 划重点</h2><blockquote><p>时间是有价值的。 金融工具对我们的时间进行了深度的加工，将我们拥有的未来转化成了完全不一样的价值。 从这个角度上看，金融就是一个一个的时光机器，它帮助我们将时间转化成财富，不同的金融工具、金融决策会改变个体的命运。</p></blockquote><h2 id="课后习题"><a class="markdownIt-Anchor" href="#课后习题"></a> 课后习题</h2><blockquote><p>想一想，在过去的十年里面，你做过什么样的金融决策吗？再回想一下，这些金融决策在过去的十年里面，是不是改变了你的时间价值呢？</p></blockquote><p>父母10年前在银行存的钱，虽然存在一定的利息收入，但是因为利息太低，远远跟不上通货膨胀，所以造成财富贬值，每每想起来父母辛辛苦苦赚的钱就这样被稀释就很心疼他们。</p><h2 id="课程原文"><a class="markdownIt-Anchor" href="#课程原文"></a> 课程原文</h2><!-- encrypt start --><img src="/posts/香帅的北大金融学课/【香帅的北大金融学课】第001周学习总结/2018-10-09-20-26-41.png" title="[blog.ruanxinyu.cn]"><!-- encrypt end --><h1 id="南北战争中的第二战场"><a class="markdownIt-Anchor" href="#南北战争中的第二战场"></a> 南北战争中的第二战场</h1><h2 id="语句摘录-2"><a class="markdownIt-Anchor" href="#语句摘录-2"></a> 语句摘录</h2><p>资金的集聚，越是这些伟大的事物，越是要求大资金的快速集聚和有效配置，而这种功能，只有金融能够实现。</p><p>南北战争的胜负手居然是“债券发行”，北方买债券是一个“爱国+投资”的双赢举动：一方面你可以享受国债6%的利息，而且利息是免税的，另一方面，只要北方取得胜利，这个债券就会大涨价，你可以分享国家的胜利果实。南方为了筹集战争资金，他们在一年内印刷发行了17亿的钞票，这些钞票“哗”地涌到了南方的市场上，南方物价飞涨，整个南方的经济就迅速地崩溃了。</p><blockquote><p>北方这到底是一个骗局还是一个双赢呢，为何银行家不相信这一套，但是普通大众却相信呢？感觉银行家与普通大众对风险的认识不一样，另外金额也不一样。</p><p>国债将国家与民众的利益相关联，但是印钞票却是直接剥夺，民众直观官爵没有任何好处，对政府的信任丢失</p></blockquote><p>纽约繁荣的背后也是金融“资金集聚”的力量，采取分期发债的方式，可以分期得到资金，可以通过收益刺激投资者的热情。</p><blockquote><p>也体现了目标的分解，不要完美主义，非得一口一个胖子</p></blockquote><h2 id="划重点-2"><a class="markdownIt-Anchor" href="#划重点-2"></a> 划重点</h2><blockquote><ol><li>南北战争中，北方取胜的关键在于资金集聚能力，北方的债券发行功不可没； 2. 纽约的崛起得益于伊利运河，而伊利运河这种大工程是主要靠债券发行集聚的资金； 3. 银行、债券、股票，所有的金融工具都在帮助人类将散落的、点状的资金累积起来，投入到最需要资金的地方。个人、企业、战争、一个城市的兴衰，背后其实都是金融的力量，它帮助我们突破了时间和地域的限制，进行快速有效的资金积聚、从而实现了目标。</li></ol></blockquote><h2 id="课后习题-2"><a class="markdownIt-Anchor" href="#课后习题-2"></a> 课后习题</h2><blockquote><p>试着从你身边的朋友里面，找出那个资金聚集能力最强的人，然后总结一下，他利用了哪些金融工具？他具有一些怎样的特征呢？</p></blockquote><p>膜拜单车等共享单车的押金就是聚集资金的方式，安居客等长租的租房贷款就是另外一种基金聚集的方式</p><h2 id="课程原文-2"><a class="markdownIt-Anchor" href="#课程原文-2"></a> 课程原文</h2><!-- encrypt start --><img src="/posts/香帅的北大金融学课/【香帅的北大金融学课】第001周学习总结/2018-10-09-21-26-31.png" title="[blog.ruanxinyu.cn]"><!-- encrypt end --><h1 id="现代人如何抵御风险"><a class="markdownIt-Anchor" href="#现代人如何抵御风险"></a> 现代人如何抵御风险</h1><h2 id="语句摘录-3"><a class="markdownIt-Anchor" href="#语句摘录-3"></a> 语句摘录</h2><p>古代社会主要依赖于家庭、宗族来实现风险共担，首先与血缘和地域。</p><p>金融是迄今人类社会能最有效实现跨区域、跨时间、大规模“风险分担”的一个机制:</p><p>1．<code>保险</code>能够帮助个体将风险转移、分散到社会群体中间，提高了我们人类的独立性和安全感；<br>1．<code>股票</code>的“利益共享，风险共担”的功能帮助荷兰开辟了强大的海上帝国；<br>1．<code>风投和创投</code>分担了创业创新的风险，拓展了人类经济活动的范围和能力。</p><h2 id="课后习题-3"><a class="markdownIt-Anchor" href="#课后习题-3"></a> 课后习题</h2><blockquote><p>假设说你现在也想创业，打算开个公司，在融资方式上，你有两种选择，第一种是到处借钱或者拿抵押品到银行贷一笔钱出来，第二种是找几个志同道合的人组成一个合伙公司，去寻求风投和创投的帮助。这两种方法你愿意选哪一个？哪一个对你更加现实？这两种方法对你未来的生产、经营会产生什么样的影响？</p></blockquote><p>第一种是债权融资，期限短，金额小，还款时压力比较大；第二种时股权融资，没有还款压力。所以需要看创业的内容，所需的资金，规模，借债时长和盈利模式等，没有哪一种模式更好</p><h2 id="课程原文-3"><a class="markdownIt-Anchor" href="#课程原文-3"></a> 课程原文</h2><!-- encrypt start --><img src="/posts/香帅的北大金融学课/【香帅的北大金融学课】第001周学习总结/2018-10-09-22-00-43.png" title="[blog.ruanxinyu.cn]"><!-- encrypt end --><h1 id="构建完整的金融世界观"><a class="markdownIt-Anchor" href="#构建完整的金融世界观"></a> 构建完整的金融世界观</h1><h2 id="语句摘录-4"><a class="markdownIt-Anchor" href="#语句摘录-4"></a> 语句摘录</h2><p><strong>金融的正面效果：</strong> 金融能帮我们加工时间，集聚资金和分散风险。这三种能力，被我们称为“金融三大定理”：<code>时间 资金 风险</code>。</p><p><strong>金融的负面效果：</strong> 金融更容易造成“穷者越穷，富者越富”的<code>马太效应</code>，同时容易利用信息的不对称性来套利存在<code>道德风险</code>。</p><p>金融地图：</p><ol><li><strong>金融机构：</strong> 金融中介机构 银行 投资银行 基金</li><li><strong>金融工具：</strong> 股票 债券 金融衍生产品 金融交易制度</li><li><strong>投资者决策：</strong> 资产配置 证券选择 非理性决策的一系列内容</li><li><strong>公司决策：</strong> 筹资 分红 股权激励 兼并收购压力</li><li><strong>金融的监管 创新和危机：</strong> 监管 创新 危机</li><li><strong>科技金融：</strong> 互联网金融 区块链 比特币 数字银行</li></ol><p>运用金融思维，你不但应该在投资上做一个价值投资者，更要在人生上做一个价值投资者。</p><h2 id="划重点-3"><a class="markdownIt-Anchor" href="#划重点-3"></a> 划重点</h2><blockquote><ol><li>我们的金融世界观的框架包括两个维度，一方面要认识到金融的能力，另一方面也要认识到金融的破坏力； 2. 构建金融世界观是为了作出正确的金融决策，这就需要我们有扎实的金融基础知识作为支撑，我给出了一张全年的学习地图，你可以按照这张图循序渐进地构筑你的金融世界观大厦。</li></ol></blockquote><h2 id="课后习题-4"><a class="markdownIt-Anchor" href="#课后习题-4"></a> 课后习题</h2><blockquote><p>2007—2008年的全球金融危机后，人们对于金融投机客们的痛恨到达顶点，所有的媒体和政客都对金融体系提出了严厉的批评。比如前法国总统萨科奇就说：“金融体系本质上是一个不负责任的，不道德的体系。”前英国首相布莱尔也说：“金融体系偏离了本质，而且它也无法回归本真了。” 结合对这周课程的理解，如果让你点评萨科奇和布莱尔的话，你会怎么说？</p></blockquote><p>金融是一个工具，没有好坏属性，关键在于如何使用。但是金融知识必须要学，可以怀着一颗不作恶的心，但是也要能知道别人如何思考和运作以保护自己，就像一个优秀的侦探一样。</p><h2 id="课程原文-4"><a class="markdownIt-Anchor" href="#课程原文-4"></a> 课程原文</h2><!-- encrypt start --><img src="/posts/香帅的北大金融学课/【香帅的北大金融学课】第001周学习总结/2018-10-10-13-03-50.png" title="[blog.ruanxinyu.cn]"><!-- encrypt end --><h1 id="本周问答不同风险偏好的人该如何投资"><a class="markdownIt-Anchor" href="#本周问答不同风险偏好的人该如何投资"></a> 本周问答：不同风险偏好的人该如何投资</h1><h2 id="语句摘录-5"><a class="markdownIt-Anchor" href="#语句摘录-5"></a> 语句摘录</h2><p>最重要的是要建立一个自己的知识框架和思维方式，掌握事情背后的一般性规律，然后因地制宜、因时制宜地来安排你的人生。社会环境在变化，但是人性其实没有变过。你要在理解人性的基础上理解这些宏观环境的变化，才能够把握未来的趋势。</p><p>金融是一个风险-收益决策衡量的框架性思维，一个人要具有这种思维能力，才能保证在大的人生决策上，作出对的选择。它是一门对未来做资产配置的学问，它的一切都是基于对未来的计算、预测和分析。</p><p>喜欢追涨杀跌，跟着亲戚群里的三手、四手、五手的消息去炒股，吃了不少亏，始终在被市场“割韭菜”。</p><p>有些人是风险爱好者，一个典型的判断标准就是：他们从不后悔自己做过什么事，只会为没做什么事后悔。相对而言，他们就可以做一些高风险、高收益的投资。</p><p>另外一种人，他们对风险很厌恶，这种人的投资策略就应该是保守一点，应该多选债券、多买指数基金，做保守型、不激进的投资。</p><h2 id="课程原文-5"><a class="markdownIt-Anchor" href="#课程原文-5"></a> 课程原文</h2><!-- encrypt start --><img src="/posts/香帅的北大金融学课/【香帅的北大金融学课】第001周学习总结/2018-10-10-13-43-51.png" title="[blog.ruanxinyu.cn]"><!-- encrypt end -->]]></content>
    
    <summary type="html">
    
      【注意】：该文章存在加密内容，请进入详情查看具体内容。&lt;br&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://ruanxinyu.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="经济" scheme="http://ruanxinyu.github.io/tags/%E7%BB%8F%E6%B5%8E/"/>
    
      <category term="香帅的北大金融学课" scheme="http://ruanxinyu.github.io/tags/%E9%A6%99%E5%B8%85%E7%9A%84%E5%8C%97%E5%A4%A7%E9%87%91%E8%9E%8D%E5%AD%A6%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS学习记录-1</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/AngularJS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-1/"/>
    <id>http://ruanxinyu.github.io/posts/技术文档/AngularJS学习记录-1/</id>
    <published>2018-10-07T03:50:16.000Z</published>
    <updated>2018-10-07T14:18:28.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>AngularJS的学习地址为：<a href="https://angular.cn/guide/quickstart" target="_blank" rel="noopener">https://angular.cns/guide/quickstart</a></p><h1 id="ng命令介绍"><a class="markdownIt-Anchor" href="#ng命令介绍"></a> ng命令介绍</h1><ol><li>安装@angular/cli: <code>npm install -g @angular/cli</code></li><li>创建工程： <code>ng new angular-tour-of-heroes</code></li><li>开启调试： <code>ng serve --open</code></li><li>创建组件： <code>ng generate component xxx</code></li><li>创建服务： <code>ng generate service xxx</code></li><li>创建路由：<code>ng generate module xxx --flat --module=app</code></li><li>创建类：<code>ng generate class hero</code></li></ol><h1 id="核心知识"><a class="markdownIt-Anchor" href="#核心知识"></a> 核心知识</h1><h2 id="架构"><a class="markdownIt-Anchor" href="#架构"></a> 架构</h2><p>Angular 的基本构造块是 NgModule，它为组件提供了编译的上下文环境。Angular包含一个根模块，可以包含其他模块，模块的加载是懒加载的。</p><p>组件定义视图，同时使用服务。组件和服务都是简单的类，这些类使用装饰器来标出它们的类型，并提供元数据以告知 Angular 该如何使用它们。</p><p>模板会把 HTML 和 Angular 的标记（markup）组合起来，这些标记可以在 HTML 元素显示出来之前修改它们。 模板中的指令会提供程序逻辑，而绑定标记会把你应用中的数据和 DOM 连接在一起。包含事件绑定和属性绑定，并且支持双星绑定和管道等功能。</p><p>对于与特定视图无关并希望跨组件共享的数据或逻辑，可以创建服务类。 服务类的定义通常紧跟在 “@Injectable” 装饰器之后。该装饰器提供的元数据可以让你的服务作为依赖被注入到客户组件中。</p><p>Angular 的 Router 模块提供了一个服务，它可以让你定义在应用的各个不同状态和视图层次结构之间导航时要使用的路径。如果路由器认为当前的应用状态需要某些特定的功能，而定义此功能的模块尚未加载，路由器就会按需惰性加载此模块。</p><img src="/posts/技术文档/AngularJS学习记录-1/2018-10-07-20-56-50.png" title="[blog.ruanxinyu.cn]"><h2 id="模块"><a class="markdownIt-Anchor" href="#模块"></a> 模块</h2><p>NgModule 是一个带有 @NgModule 装饰器的类。@NgModule 装饰器是一个函数，它接受一个元数据对象，该对象的属性用来描述这个模块。其中最重要的属性如下。</p><ul><li><strong>declarations（可声明对象表）</strong> —— 那些属于本 NgModule 的组件、指令、管道。</li><li><strong>exports（导出表）</strong> —— 那些能在其它模块的组件模板中使用的可声明对象的子集。</li><li><strong>imports（导入表）</strong> —— 那些导出了本模块中的组件模板所需的类的其它模块。</li><li><strong>providers</strong> —— 本模块向全局服务中贡献的那些服务的创建器。 这些服务能被本应用中的任何部分使用。（你也可以在组件级别指定服务提供商，这通常是首选方式。）</li><li><strong>bootstrap</strong> —— 应用的主视图，称为根组件。它是应用中所有其它视图的宿主。只有根模块才应该设置这个 bootstrap 属性。</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125;      <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports:      [ BrowserModule ],</span><br><span class="line">  providers:    [ Logger ],</span><br><span class="line">  declarations: [ AppComponent ],</span><br><span class="line">  exports:      [ AppComponent ],</span><br><span class="line">  bootstrap:    [ AppComponent ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure><h2 id="组件"><a class="markdownIt-Anchor" href="#组件"></a> 组件</h2><p>组件通过<code>constructor</code>来提供依赖注入，常见的元数据如下：</p><ul><li>**selector：**是一个 CSS 选择器，它会告诉 Angular，一旦在模板 HTML 中找到了这个选择器对应的标签，就创建并插入该组件的一个实例。</li><li>**templateUrl：**该组件的 HTML 模板文件相对于这个组件文件的地址。</li><li><strong>providers:</strong> 是当前组件所需的依赖注入提供商的一个数组</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector:    <span class="string">'app-hero-list'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./hero-list.component.html'</span>,</span><br><span class="line">  providers:  [ HeroService ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HeroListComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指令：结构型指令和属性型指令。</p><h2 id="服务与依赖注入"><a class="markdownIt-Anchor" href="#服务与依赖注入"></a> 服务与依赖注入</h2><p>服务是一个广义的概念，它包括应用所需的任何值、函数或特性。狭义的服务是一个明确定义了用途的类。它应该做一些具体的事，并做好。要把一个类定义为服务，就要用 @Injectable 装饰器来提供元数据，以便让 Angular 可以把它作为依赖注入到组件中。通过构造函数进行注入</p><p>Angular 把组件和服务区分开，以提高模块性和复用性。</p><ul><li>通过把组件中和视图有关的功能与其他类型的处理分离开，你可以让组件类更加精简、高效。 理想情况下，组件的工作只管用户体验，而不用顾及其它。 它应该提供用于数据绑定的属性和方法，以便作为视图（由模板渲染）和应用逻辑（通常包含一些模型的概念）的中介者。</li><li>组件不应该定义任何诸如从服务器获取数据、验证用户输入或直接往控制台中写日志等工作。 而要把这些任务委托给各种服务。通过把各种处理任务定义到可注入的服务类中，你可以让它被任何组件使用。 通过在不同的环境中注入同一种服务的不同提供商，你还可以让你的应用更具适应性。</li></ul><p>默认情况下，Angular CLI 的 ng generate service 命令会在 @Injectable 装饰器中提供元数据，把它注册到根注入器中。本教程就用这种方法注册了 HeroService 的提供商</p><p>当你使用特定的 NgModule 注册提供商时，该服务的同一个实例将会对该 NgModule 中的所有组件可用。要想在这一层注册，请用 @NgModule 装饰器中的 providers 属性</p><p>当你在组件级注册提供商时，你会为该组件的每一个新实例提供该服务的一个新实例。 要在组件级注册，就要在 @Component 元数据的 providers 属性中注册服务提供商</p><h1 id="组件与模板"><a class="markdownIt-Anchor" href="#组件与模板"></a> 组件与模板</h1><h2 id="显示数据"><a class="markdownIt-Anchor" href="#显示数据"></a> 显示数据</h2><p>你可以在两种地方存放组件模板。 你可以使用 template 属性把它定义为内联的，或者把模板定义在一个独立的 HTML 文件中， 再通过 @Component 装饰器中的 templateUrl 属性， 在组件元数据中把它链接到组件。</p><p>默认情况下，Angular CLI 生成组件时会带有模板文件，你可以通过参数覆盖它：<code>ng generate component hero -it</code></p><ul><li><code></code>显示属性。</li><li><code>*ngFor</code> 是 Angular 的“迭代”指令</li><li><code>*ngIf</code> 指令会根据一个布尔条件来显示或移除一个元素</li></ul><h2 id="模板语法"><a class="markdownIt-Anchor" href="#模板语法"></a> 模板语法</h2><p>JavaScript 中那些具有或可能引发副作用的表达式是被禁止的，包括：</p><ul><li>赋值 <code>(=, +=, -=, ...)</code></li><li><code>new</code> 运算符</li><li>使用 <code>;</code> 或 <code>,</code> 的链式表达式</li><li>自增和自减运算符：<code>++</code> 和<code>--</code></li></ul><p>和 JavaScript 语 法的其它显著不同包括：</p><ul><li>不支持位运算 <code>|</code> 和 <code>&amp;</code></li><li>具有新的模板表达式运算符，比如 <code>|、?. 和 !</code>。</li></ul><p>表达式中的上下文变量是由模板变量、指令的上下文变量（如果有）和组件的成员叠加而成的。 如果你要引用的变量名存在于一个以上的命名空间中，那么，模板变量是最优先的，其次是指令的上下文变量，最后是组件的成员。</p><p>模板表达式不能引用全局命名空间中的任何东西，比如 window 或 document。它们也不能调用 console.log 或 Math.max。 它们只能引用表达式上下文中的成员。</p><p>模板表达式能成就或毁掉一个应用。请遵循下列指南：<code>没有可见的副作用</code>,<code>执行迅速</code>,<code>非常简单</code>,<code>幂等性</code></p><p>模板语句用来响应由绑定目标（如 HTML 元素、组件或指令）触发的事件。 模板语句将在事件绑定一节看到，它出现在 = 号右侧的引号中，就像这样：(event)=“statement”。</p><p>绑定方式：</p><ol><li>属性绑定：<code>[target]=&quot;expression&quot;</code></li><li>事件绑定：<code>(target)=&quot;statement&quot;</code></li><li>双向绑定：<code>[(target)]=&quot;expression&quot;</code></li><li>css类绑定：<code>[class.special]=&quot;isSpecial&quot;</code></li><li>样式绑定：<code>[style.color]=&quot;isSpecial ? 'red' : 'green'&quot;</code></li></ol><p>在多数情况下，插值表达式是更方便的备选项。 实际上，在渲染视图之前，Angular 把这些插值表达式翻译成相应的属性绑定。</p><p>在新版的 Angular 中不需要那么多指令。 使用更强大、更富有表现力的 Angular 绑定系统，其实可以达到同样的效果。</p><p>外部组件应该只能绑定到组件的公共（允许绑定） API 上，Angular 要求你显式声明那些 API。 它让你可以自己决定哪些属性是可以被外部组件绑定的。进行数据绑定的属性都带有 <code>@Input()</code> 和 <code>@Output()</code> 装饰器。</p><p><strong>好东西:</strong> Angular 的安全导航操作符<code>?.</code> 是一种流畅而便利的方式，用来保护出现在属性路径中 null 和 undefined 值。 下例中，当 currentHero 为空时，保护视图渲染器，让它免于失败。<code></code></p><p>非空断言操作符<code>!</code></p><p>类型转换函数 <code>$any</code></p><h2 id="生命钩子"><a class="markdownIt-Anchor" href="#生命钩子"></a> 生命钩子</h2><p>执行顺序</p><img src="/posts/技术文档/AngularJS学习记录-1/2018-10-07-21-38-11.png" title="[blog.ruanxinyu.cn]"><h2 id="组件交互"><a class="markdownIt-Anchor" href="#组件交互"></a> 组件交互</h2><p><a href="https://angular.cn/guide/component-interaction" target="_blank" rel="noopener">https://angular.cn/guide/component-interaction</a></p><ul><li>通过输入型绑定把数据从父组件传到子组件</li><li>通过 setter 截听输入属性值的变化</li><li>通过ngOnChanges()来截听输入属性值的变化</li><li>父组件监听子组件的事件</li><li>父组件与子组件通过本地变量互动</li><li>父组件调用<code>@ViewChild()</code></li><li>父组件和子组件通过服务来通讯</li></ul><h2 id="组件样式"><a class="markdownIt-Anchor" href="#组件样式"></a> 组件样式</h2><ul><li>使用 <code>:host</code> 伪类选择器，用来选择组件宿主元素中的元素</li><li>使用 <code>:host-context()</code> 伪类选择器。它也以类似 <code>:host()</code> 形式使用。它在当前组件宿主元素的祖先节点中查找 CSS 类， 直到文档的根节点为止</li><li>可以在组件的 HTML 模板中写 <code>&lt;link&gt;</code> 标签</li><li>可以利用标准的 CSS <code>@import</code> 规则来把其它 CSS 文件导入到 CSS 文件中。</li><li>如果使用 CLI 进行构建，那么你可以用 sass、less 或 stylus 来编写样式，并使用相应的扩展名（.scss、.less、.styl）把它们指定到 @Component.styleUrls 元数据中。</li></ul><h1 id="表单"><a class="markdownIt-Anchor" href="#表单"></a> 表单</h1><h2 id="用户输入"><a class="markdownIt-Anchor" href="#用户输入"></a> 用户输入</h2><p><a href="https://angular.cn/guide/user-input" target="_blank" rel="noopener">https://angular.cn/guide/user-input</a></p><ul><li>绑定到用户输入事件<code>&lt;button (click)=&quot;onClickMe()&quot;&gt;Click me!&lt;/button&gt;</code></li><li>通过 <code>$event</code> 对象取得用户输入<code>&lt;input (keyup)=&quot;onKey($event)&quot;&gt;</code></li><li>从一个模板引用变量中获得用户输入,在标识符前加上井号 (#) 就能声明一个模板引用变量，<code>&lt;input #box (keyup)=&quot;0&quot;&gt; &lt;p&gt;&lt;/p&gt;</code></li><li>按键事件过滤（通过 <code>key.enter</code>）: <code>&lt;input #box (keyup.enter)=&quot;onEnter(box.value)&quot;&gt; &lt;p&gt;&lt;/p&gt;</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;AngularJS的学习地址为：&lt;a href=&quot;https://angular.cn/guide/quickstart&quot; target=&quot;_b
      
    
    </summary>
    
      <category term="学习记录" scheme="http://ruanxinyu.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="学习记录" scheme="http://ruanxinyu.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>基于SpringBoot+Mybatis开发Restful接口实现数据表的增删改查功能</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/%E5%9F%BA%E4%BA%8ESpringBoot+Mybatis%E5%BC%80%E5%8F%91Restful%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%8A%9F%E8%83%BD/"/>
    <id>http://ruanxinyu.github.io/posts/技术文档/基于SpringBoot+Mybatis开发Restful接口实现数据表的增删改查功能/</id>
    <published>2018-10-06T07:29:04.000Z</published>
    <updated>2018-10-06T13:50:42.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础环境说明"><a class="markdownIt-Anchor" href="#基础环境说明"></a> 基础环境说明</h1><p>本教程使用Maven管理依赖，使用IDEA进行开发，在开始之前，请按照下面教程安装好JDK和Mysql:</p><ul><li>JDK的安装请参考：</li><li>Mysql的安装请参考： </li></ul><p>本教程的代码地址为：<a href="https://github.com/RuanXinyu/springcloud-demo/tree/master/productionservice" target="_blank" rel="noopener">https://github.com/RuanXinyu/springcloud-demo/tree/master/productionservice</a></p><h1 id="初始化数据库"><a class="markdownIt-Anchor" href="#初始化数据库"></a> 初始化数据库</h1><p>首先创建一个数据库和一个用户，并分配相应的权限：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> mall;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建用户并分配权限，8.0版本需要采用该方式</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> malluser@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'mall@123'</span>;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> mall.* <span class="keyword">to</span> <span class="string">'malluser'</span>@<span class="string">'%'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><p>然后在<code>mall</code>数据库中创建一张表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`mall`</span>.<span class="string">`t_production`</span> (</span><br><span class="line">  <span class="string">`uuid`</span> <span class="built_in">CHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`price`</span> <span class="built_in">DECIMAL</span>(<span class="number">12</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`description`</span> <span class="built_in">VARCHAR</span>(<span class="number">4094</span>) <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`create_time`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`uuid`</span>));</span><br></pre></td></tr></table></figure><h1 id="通过idea生成基础代码"><a class="markdownIt-Anchor" href="#通过idea生成基础代码"></a> 通过IDEA生成基础代码</h1><p>选择<code>Spring Initializr</code>来创建工程：</p><img src="/posts/技术文档/基于SpringBoot+Mybatis开发Restful接口实现数据表的增删改查功能/2018-10-06-16-37-05.png" title="[blog.ruanxinyu.cn]"><p>指定maven的GAV参数，我们组件名称叫<code>productionservice</code>，同时选择<code>jar</code>包启动的方式：</p><img src="/posts/技术文档/基于SpringBoot+Mybatis开发Restful接口实现数据表的增删改查功能/2018-10-06-20-10-48.png" title="[blog.ruanxinyu.cn]"><p>Spring组件我们仅选择<code>Web</code>下的<code>Web</code>，<code>SQL</code>下的<code>MySQL</code>和<code>Mybatis</code>:</p><img src="/posts/技术文档/基于SpringBoot+Mybatis开发Restful接口实现数据表的增删改查功能/2018-10-06-16-48-32.png" title="[blog.ruanxinyu.cn]"><p>最后生成的代码目录结构如下：</p><img src="/posts/技术文档/基于SpringBoot+Mybatis开发Restful接口实现数据表的增删改查功能/2018-10-06-16-43-49.png" title="[blog.ruanxinyu.cn]"><h1 id="使用mybatisgenerator生成代码"><a class="markdownIt-Anchor" href="#使用mybatisgenerator生成代码"></a> 使用MybatisGenerator生成代码</h1><h2 id="pomxml"><a class="markdownIt-Anchor" href="#pomxml"></a> pom.xml</h2><p>首先在pom文件中增加<code>mybatis-generator-maven-plugin</code>插件，如下所示:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/generator/mybatis_generator.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/posts/技术文档/基于SpringBoot+Mybatis开发Restful接口实现数据表的增删改查功能/2018-10-06-17-17-28.png" title="[blog.ruanxinyu.cn]"><h2 id="mybatis_generatorxml"><a class="markdownIt-Anchor" href="#mybatis_generatorxml"></a> mybatis_generator.xml</h2><p>在<code>src/main/resources/</code>目录下创建<code>generator</code>文件夹，并创建<code>mybatis_generator.xml</code>文件</p><img src="/posts/技术文档/基于SpringBoot+Mybatis开发Restful接口实现数据表的增删改查功能/2018-10-06-19-58-44.png" title="[blog.ruanxinyu.cn]"><p>写入如下的内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库驱动:选择你的本地硬盘上面的数据库驱动包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span>  <span class="attr">location</span>=<span class="string">"D:\.m2\mysql\mysql-connector-java\5.1.47\mysql-connector-java-5.1.47.jar"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"DB2Tables"</span>  <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressDate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库链接URL，用户名、密码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span> <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://127.0.0.1/mall"</span> <span class="attr">userId</span>=<span class="string">"malluser"</span> <span class="attr">password</span>=<span class="string">"mall@123"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成模型的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.ruan.productionservice.model"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成映射文件的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.ruan.productionservice.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/resources"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成DAO的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"com.ruan.productionservice.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"t_production"</span> <span class="attr">domainObjectName</span>=<span class="string">"Production"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span> <span class="attr">selectByExampleQueryId</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>做几点说明：</p><ol><li><code>&lt;classPathEntry location=&quot;D:\.m2\mysql\mysql-connector-java\5.1.47\mysql-connector-java-5.1.47.jar&quot;/&gt;</code>中的路径可以从maven的缓存目录中找到</li><li><code>&lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://127.0.0.1/mall&quot; userId=&quot;malluser&quot; password=&quot;mall@123&quot;&gt;</code>需要正确填写数据库的数据库名称，用户名，密码和表名称</li><li><code>targetPackage=</code>要修改为对应的包路径</li><li><code>&lt;table tableName=&quot;t_production&quot; domainObjectName=&quot;Production&quot;</code>需要正确填写和实体类名</li></ol><h2 id="mybatis-generatorgenerate"><a class="markdownIt-Anchor" href="#mybatis-generatorgenerate"></a> mybatis-generator:generate</h2><p>最后双击右侧maven窗口中的<code>plugins</code>-&gt;<code>mybatis-generator:generate</code>即可生成代码。</p><blockquote><p>注意不要多次生成，否则xml中可能会生成重复的内容，从而造成启动报错，可以删除文件再生成</p></blockquote><img src="/posts/技术文档/基于SpringBoot+Mybatis开发Restful接口实现数据表的增删改查功能/2018-10-06-20-04-24.png" title="[blog.ruanxinyu.cn]"><p>最终生成的代码结构如下：</p><img src="/posts/技术文档/基于SpringBoot+Mybatis开发Restful接口实现数据表的增删改查功能/2018-10-06-20-09-48.png" title="[blog.ruanxinyu.cn]"><h1 id="添加查询数据列表接口"><a class="markdownIt-Anchor" href="#添加查询数据列表接口"></a> 添加查询数据列表接口</h1><p>从MybatisGenerator生成的代码中可以看出已经生成了增删改查的接口，我们在此基础之上增加一个查询列表的接口<code>ArrayList&lt;Production&gt; selectAll()</code>。</p><h2 id="productionmapperxml"><a class="markdownIt-Anchor" href="#productionmapperxml"></a> ProductionMapper.xml</h2><p>在文件中增加一个<code>selectAll</code>对应的查询语句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span> /&gt;</span></span><br><span class="line">  from t_production</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如下所示：</p><img src="/posts/技术文档/基于SpringBoot+Mybatis开发Restful接口实现数据表的增删改查功能/2018-10-06-20-18-41.png" title="[blog.ruanxinyu.cn]"><h2 id="productionmapperjava"><a class="markdownIt-Anchor" href="#productionmapperjava"></a> ProductionMapper.java</h2><p>在接口中增加<code>ArrayList&lt;Production&gt; selectAll();</code>接口声明</p><h1 id="增加mapper注解"><a class="markdownIt-Anchor" href="#增加mapper注解"></a> 增加@Mapper注解</h1><p>MybatisGenerator自动生成的接口<code>ProductionMapper</code>接口默认是没有注解的，需要我们手动增加<code>@Mapper</code>注解，否则启动时会报错。</p><p><strong>注意：</strong> 每次重新生成代码后都需要重新手动修改</p><h1 id="增加service层代码"><a class="markdownIt-Anchor" href="#增加service层代码"></a> 增加service层代码</h1><p>在<code>com.ruan.productionservice.service</code>下创建<code>ProductionService</code>接口，在<code>com.ruan.productionservice.service.impl</code>下创建<code>ProductionServiceImpl</code>类实现<code>ProductionService</code>，如下所示：</p><img src="/posts/技术文档/基于SpringBoot+Mybatis开发Restful接口实现数据表的增删改查功能/2018-10-06-20-37-04.png" title="[blog.ruanxinyu.cn]"><h2 id="productionservicejava"><a class="markdownIt-Anchor" href="#productionservicejava"></a> ProductionService.java</h2><p>接口中声明5个接口函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductionService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(String uuid)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(Production record)</span></span>;</span><br><span class="line">    <span class="function">Production <span class="title">get</span><span class="params">(String uuid)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(Production record)</span></span>;</span><br><span class="line">    <span class="function">ArrayList&lt;Production&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="productionserviceimpljava"><a class="markdownIt-Anchor" href="#productionserviceimpljava"></a> ProductionServiceImpl.java</h2><p>实现类<code>ProductionServiceImpl</code>需要加<code>@Service</code>注解， 在保存记录的接口中自动生成主键和创建时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductionServiceImpl</span> <span class="keyword">implements</span> <span class="title">ProductionService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ProductionMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(String uuid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mapper.deleteByPrimaryKey(uuid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">(Production production)</span> </span>&#123;</span><br><span class="line">        production.setUuid(UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>).toLowerCase());</span><br><span class="line">        production.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">return</span> mapper.insert(production);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Production production)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mapper.updateByPrimaryKeySelective(production);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Production <span class="title">get</span><span class="params">(String uuid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mapper.selectByPrimaryKey(uuid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Production&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mapper.selectAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="增加controller层代码"><a class="markdownIt-Anchor" href="#增加controller层代码"></a> 增加controller层代码</h1><h2 id="productioncontrollerjava"><a class="markdownIt-Anchor" href="#productioncontrollerjava"></a> ProductionController.java</h2><p>在<code>com.ruan.productionservice.controller</code>下创建<code>ProductionController</code>类，在类上指定<code>@RestController</code>注解，然后实现5个Restful接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/mall/production"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductionController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ProductionService productionService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/save"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">(Production production)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> productionService.save(production);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/update"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Production production)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> productionService.update(production);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/delete/&#123;id&#125;"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> String id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> productionService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/get/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Production <span class="title">get</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> String id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> productionService.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/list"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Production&gt; <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> productionService.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="配置applicationproperties"><a class="markdownIt-Anchor" href="#配置applicationproperties"></a> 配置application.properties</h1><p><code>application.properties</code>中包含应用的配置信息，我们只需要配置JDBC的内容即可，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/mall</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.username=malluser</span><br><span class="line">spring.datasource.password=mall@123</span><br></pre></td></tr></table></figure><h1 id="启动应用程序"><a class="markdownIt-Anchor" href="#启动应用程序"></a> 启动应用程序</h1><p>在IDEA中进去到<code>ProductionserviceApplication</code>类中，然后就可以启动程序，如下所示：</p><img src="/posts/技术文档/基于SpringBoot+Mybatis开发Restful接口实现数据表的增删改查功能/2018-10-06-20-48-41.png" title="[blog.ruanxinyu.cn]"><h1 id="postman验证接口"><a class="markdownIt-Anchor" href="#postman验证接口"></a> PostMan验证接口</h1><p>启动后，我们通过PostMan进行接口的验证。</p><h2 id="mallproductionsave"><a class="markdownIt-Anchor" href="#mallproductionsave"></a> /mall/production/save</h2><p>创建一条数据，返回<code>1</code>，表示插入数据库成功。</p><img src="/posts/技术文档/基于SpringBoot+Mybatis开发Restful接口实现数据表的增删改查功能/2018-10-06-20-55-57.png" title="[blog.ruanxinyu.cn]"><h2 id="mallproductionlist"><a class="markdownIt-Anchor" href="#mallproductionlist"></a> /mall/production/list</h2><p>通过list接口可以看到插入的内容，并且可以看到对应数据的<code>uuid</code>，用来调用其他接口</p><img src="/posts/技术文档/基于SpringBoot+Mybatis开发Restful接口实现数据表的增删改查功能/2018-10-06-21-00-23.png" title="[blog.ruanxinyu.cn]"><h2 id="mallproductionupdate"><a class="markdownIt-Anchor" href="#mallproductionupdate"></a> /mall/production/update</h2><p>通过上面获取到的uuid修改数据，如下，返回<code>1</code>表示数据库修改成功。</p><img src="/posts/技术文档/基于SpringBoot+Mybatis开发Restful接口实现数据表的增删改查功能/2018-10-06-21-02-17.png" title="[blog.ruanxinyu.cn]"><h2 id="mallproductiongetid"><a class="markdownIt-Anchor" href="#mallproductiongetid"></a> /mall/production/get/{id}</h2><p>通过上面获取到的uuid获取数据详情，此时uuid是在网址中，发现<code>price</code>已经修改为<code>35</code>。</p><img src="/posts/技术文档/基于SpringBoot+Mybatis开发Restful接口实现数据表的增删改查功能/2018-10-06-21-04-18.png" title="[blog.ruanxinyu.cn]"><h2 id="mallproductiondeleteid"><a class="markdownIt-Anchor" href="#mallproductiondeleteid"></a> /mall/production/delete/{id}</h2><p>最后通过delete接口删除数据</p><img src="/posts/技术文档/基于SpringBoot+Mybatis开发Restful接口实现数据表的增删改查功能/2018-10-06-21-05-33.png" title="[blog.ruanxinyu.cn]"><h1 id="可能遇到的问题"><a class="markdownIt-Anchor" href="#可能遇到的问题"></a> 可能遇到的问题</h1><h2 id="启动时提示自动加载productionmapper失败"><a class="markdownIt-Anchor" href="#启动时提示自动加载productionmapper失败"></a> 启动时提示自动加载ProductionMapper失败</h2><p>如果在启动过程中提示<code>No qualifying bean of type 'com.ruan.productionservice.mapper.ProductionMapper' available: expected at least 1 bean which qualifies as autowire candidate.</code>，则说明<code>ProductionMapper</code>没有添加<code>@Mapper</code>注解，该文件是Mybatis Generator自动生成的，需要手动添加该注解。</p><h2 id="启动时提示result-maps错误"><a class="markdownIt-Anchor" href="#启动时提示result-maps错误"></a> 启动时提示Result Maps错误</h2><p>启动报错提示<code>java.lang.IllegalArgumentException: Result Maps collection already contains value for com.ruan.productionservice.mapper.ProductionMapper.BaseResultMap</code>，是因为多次使用Mybatis Generator生成代码，造成<code>ProductionMapper.xml</code>文件中存在重复的内容，删除掉该文件重新生成即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础环境说明&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基础环境说明&quot;&gt;&lt;/a&gt; 基础环境说明&lt;/h1&gt;
&lt;p&gt;本教程使用Maven管理依赖，使用IDEA进行开发，在开始之前，请按照下面教程安装好JDK和Mysql:&lt;/p&gt;
&lt;ul
      
    
    </summary>
    
      <category term="技术分享" scheme="http://ruanxinyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Java" scheme="http://ruanxinyu.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Mysql常见问题操作指导</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Mysql%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%93%8D%E4%BD%9C%E6%8C%87%E5%AF%BC/"/>
    <id>http://ruanxinyu.github.io/posts/技术文档/Mysql常见问题操作指导/</id>
    <published>2018-10-06T01:39:34.000Z</published>
    <updated>2018-10-17T12:11:09.243Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速查询目录"><a class="markdownIt-Anchor" href="#快速查询目录"></a> 快速查询目录</h1><h1 id="启动"><a class="markdownIt-Anchor" href="#启动"></a> 启动</h1><h2 id="windows如何启动mysql"><a class="markdownIt-Anchor" href="#windows如何启动mysql"></a> windows如何启动mysql</h2><p>执行<code>net start mysql80</code>（需要用管理员权限启动，否则会报拒绝访问错误），或者通过如下方式：</p><img src="/posts/技术文档/Mysql常见问题操作指导/2018-10-06-11-16-52.png" title="[blog.ruanxinyu.cn]"><h2 id="windows下mysq的数据和配置文件存放位置"><a class="markdownIt-Anchor" href="#windows下mysq的数据和配置文件存放位置"></a> windows下mysq的数据和配置文件存放位置</h2><p>默认是在<code>C:\ProgramData\MySQL\</code>目录下</p><h2 id="windows启动mysql报拒绝访问错误"><a class="markdownIt-Anchor" href="#windows启动mysql报拒绝访问错误"></a> windows启动mysql报拒绝访问错误</h2><p>使用管理员权限启动即可，<code>net start mysql80</code></p><h2 id="windows下mysql的日志位置"><a class="markdownIt-Anchor" href="#windows下mysql的日志位置"></a> windows下mysql的日志位置</h2><p>在<code>C:\ProgramData\MySQL\MySQL Server 8.0\Data\</code>下，可以通过<code>C:\ProgramData\MySQL\MySQL Server 8.0\my.ini</code>看到具体的文件名称：</p><img src="/posts/技术文档/Mysql常见问题操作指导/2018-10-06-11-41-08.png" title="[blog.ruanxinyu.cn]"><h2 id="windows下mysql启动失败"><a class="markdownIt-Anchor" href="#windows下mysql启动失败"></a> windows下mysql启动失败</h2><p>查看mysql的错误日志发现如下内容<code>TCP/IP, --shared-memory, or --named-pipe should be configured on NT OS</code>。</p><p>有两种解决方式，一种是取消注释<code>enable-named-pipe</code>， 二是取消注释<code>shared-memory</code>。这两个参数在<code>my.ini</code>的位置是在一起的，如下所示：</p><img src="/posts/技术文档/Mysql常见问题操作指导/2018-10-06-11-46-31.png" title="[blog.ruanxinyu.cn]"><h1 id="权限"><a class="markdownIt-Anchor" href="#权限"></a> 权限</h1><h2 id="如何添加用户权限"><a class="markdownIt-Anchor" href="#如何添加用户权限"></a> 如何添加用户权限</h2><p><strong>老版本</strong><br>授权格式：<code>grant 权限 on 数据库.* to 用户名@登录主机 identified by &quot;密码&quot;;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> mall.* <span class="keyword">to</span> <span class="string">'malluser'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'mall@123'</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><p>** 8.0版本: **<br>创建账户和赋予权限分开，如果采用上面的方式会提示<code>Error Code: 1064. You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'IDENTIFIED BY 'mall@1234''</code>,，因此需要采用下面的方式：</p><p>创建账户: <code>create user '用户名'@'访问主机' identified by '密码';</code></p><p>赋予权限: <code>grant 权限列表 on 数据库 to '用户名'@'访问主机';</code>（修改权限时在后面加<code>with grant option</code>）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> malluser@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'mall@123'</span>;</span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> mall.* <span class="keyword">to</span> <span class="string">'malluser'</span>@<span class="string">'%'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><h2 id="忘记root的密码"><a class="markdownIt-Anchor" href="#忘记root的密码"></a> 忘记root的密码</h2><p>首先，编辑<code>sudo vim /etc/mysql/my.cnf</code>，在<code>[mysqld]</code>下添加<code>skip-grant-tables</code>，然后重启<code>sudo systemctl restart mysql.service</code>，然后就可以通过<code>mysql -u root</code>进入到mysql的控制台。</p><p>执行<code>mysql</code>命令进入到mysql的控制台，执行如下命令修改密码：</p><p><strong>mysql 5.7.9版本之前</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> mysql;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> <span class="keyword">Password</span> = <span class="keyword">password</span> ( <span class="string">'new-password'</span> ) <span class="keyword">where</span> <span class="keyword">User</span> = <span class="string">'root'</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><p><strong>mysql 5.7.9版本之后</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> mysql;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> authentication_string=<span class="string">''</span> <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">'root'</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">user</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'root@123'</span>;</span><br></pre></td></tr></table></figure><p>最后，删除<code>skip-grant-tables</code>配置并重启mysql即可完成密码的修改。</p><h2 id="修改权限提示skip-grant-tables下不能执行该操作"><a class="markdownIt-Anchor" href="#修改权限提示skip-grant-tables下不能执行该操作"></a> 修改权限提示–skip-grant-tables下不能执行该操作</h2><p>提示<code>The MySQL server is running with the --skip-grant-tables option so it cannot execute this statement</code>，在执行之前执行一下<code>flush privileges;</code>即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;快速查询目录&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#快速查询目录&quot;&gt;&lt;/a&gt; 快速查询目录&lt;/h1&gt;
&lt;h1 id=&quot;启动&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#启动&quot;&gt;&lt;/a&gt; 启动&lt;/h1
      
    
    </summary>
    
      <category term="飞行手册" scheme="http://ruanxinyu.github.io/categories/%E9%A3%9E%E8%A1%8C%E6%89%8B%E5%86%8C/"/>
    
    
      <category term="飞行手册" scheme="http://ruanxinyu.github.io/tags/%E9%A3%9E%E8%A1%8C%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu常见问题操作指导</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Ubuntu%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%93%8D%E4%BD%9C%E6%8C%87%E5%AF%BC/"/>
    <id>http://ruanxinyu.github.io/posts/技术文档/Ubuntu常见问题操作指导/</id>
    <published>2018-10-04T13:27:53.000Z</published>
    <updated>2018-10-14T04:44:45.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何重启网卡"><a class="markdownIt-Anchor" href="#如何重启网卡"></a> 如何重启网卡</h1><p>重启网卡可以使用<code>ip</code>，<code>ifconfig</code>和<code>service</code>命令，如下所示，推荐使用<code>ip</code>命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推荐使用ip命令</span></span><br><span class="line">sudo ip link <span class="built_in">set</span> enp0s3 down</span><br><span class="line">sudo ip link <span class="built_in">set</span> enp0s3 up</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用ifconfig命令</span></span><br><span class="line">sudo ifconfig enp0s3 down</span><br><span class="line">sudo ifconfig enp0s3 up</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用service命令，但是不支持最新版的Ubuntu</span></span><br><span class="line">sudo service network restart</span><br></pre></td></tr></table></figure><h1 id="如何临时添加-修改-删除ip地址"><a class="markdownIt-Anchor" href="#如何临时添加-修改-删除ip地址"></a> 如何临时添加-修改-删除IP地址</h1><p>可以使用<code>ip</code>和<code>ifconfig</code>命令，如下所示，推荐使用<code>ip</code>命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 推荐使用ip命令</span></span><br><span class="line">sudo ip address add 192.168.1.135/32 dev enp0s3     <span class="comment"># 添加</span></span><br><span class="line">sudo ip address change 192.168.1.135/24 dev enp0s3  <span class="comment"># 修改</span></span><br><span class="line">sudo ip address del 192.168.1.135/24 dev enp0s3     <span class="comment"># 删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用ifconfig命令</span></span><br><span class="line">sudo ifconfig eth0 192.168.1.135 netmask 255.255.255.0</span><br></pre></td></tr></table></figure><h1 id="如何设置静态ip地址和dns"><a class="markdownIt-Anchor" href="#如何设置静态ip地址和dns"></a> 如何设置静态IP地址和DNS</h1><blockquote><p>由于Ubuntu从<code>17.10</code>开始改用<code>netplan</code>方式管理，因此在不同版本设置方式不一样。</p></blockquote><p><strong>Ubuntu 17.10版本前</strong>，编辑<code>sudo vim /etc/network/interfaces</code>文件，添加如下的内容，然后重启网卡即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">auto enp0s3</span><br><span class="line">iface enp0s3 inet static</span><br><span class="line">address 192.168.1.132</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">gateway 192.168.1.1</span><br><span class="line">dns-nameserver 192.168.1.1</span><br></pre></td></tr></table></figure><p>** Ubuntu 17.10版本后**，编辑<code>netplan</code>方式的配置文件<code>sudo vim /etc/netplan/50-cloud-init.yaml</code>，设置如下内容，然后执行<code>sudo netplan apply</code>即可立即生效。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line"><span class="attr">    ethernets:</span></span><br><span class="line"><span class="attr">        enp0s3:</span>   <span class="comment"># 配置的网卡名称</span></span><br><span class="line"><span class="attr">            dhcp4:</span> <span class="literal">no</span>    <span class="comment"># dhcp4关闭</span></span><br><span class="line"><span class="attr">            dhcp6:</span> <span class="literal">no</span>    <span class="comment"># dhcp6关闭</span></span><br><span class="line"><span class="attr">            addresses:</span> <span class="string">[192.168.1.132/24]</span>   <span class="comment"># 设置本机IP及掩码</span></span><br><span class="line"><span class="attr">            gateway4:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>      <span class="comment"># 设置网关</span></span><br><span class="line"><span class="attr">            nameservers:</span></span><br><span class="line"><span class="attr">            addresses:</span> <span class="string">[192.168.1.1]</span>   <span class="comment"># 设置DNS</span></span><br><span class="line"><span class="attr">    version:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="如何查看和设置dns"><a class="markdownIt-Anchor" href="#如何查看和设置dns"></a> 如何查看和设置DNS</h1><blockquote><p>修改<code>/etc/resolv.conf</code>文件是无效的，该文件每次重启会被自动覆盖</p></blockquote><p>如果是修改单个网卡的DNS请参见：<a href="#%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81IP%E5%9C%B0%E5%9D%80%E5%92%8CDNS">如何设置静态IP地址和DNS</a></p><p>如果是设置全局DNS，请编辑<code>sudo vim /etc/systemd/resolved.conf</code>，然后重启<code>systemd-resolved</code>服务<code>sudo systemctl restart systemd-resolved.service</code>即可。</p><p>查看当前正在使用的DNS可以使用<code>sudo systemd-resolve --status</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何重启网卡&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#如何重启网卡&quot;&gt;&lt;/a&gt; 如何重启网卡&lt;/h1&gt;
&lt;p&gt;重启网卡可以使用&lt;code&gt;ip&lt;/code&gt;，&lt;code&gt;ifconfig&lt;/code&gt;和&lt;code&gt;service&lt;
      
    
    </summary>
    
      <category term="飞行手册" scheme="http://ruanxinyu.github.io/categories/%E9%A3%9E%E8%A1%8C%E6%89%8B%E5%86%8C/"/>
    
    
      <category term="飞行手册" scheme="http://ruanxinyu.github.io/tags/%E9%A3%9E%E8%A1%8C%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下Mysql的安装与验证</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Ubuntu%E4%B8%8BMysql%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%AA%8C%E8%AF%81/"/>
    <id>http://ruanxinyu.github.io/posts/技术文档/Ubuntu下Mysql的安装与验证/</id>
    <published>2018-10-04T13:21:18.000Z</published>
    <updated>2018-10-05T12:53:21.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="apt方式安装"><a class="markdownIt-Anchor" href="#apt方式安装"></a> apt方式安装</h1><blockquote><p>Ubuntu 18.04.1版本下，如果直接使用<code>sudo apt-get install mysql-server</code>安装的是<code>5.9</code>版本，我们要安装最新的<code>8.0</code>版本。</p></blockquote><p>首先进去到<a href="https://dev.mysql.com/downloads/repo/apt/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/repo/apt/</a>页面，下载deb包</p><img src="/posts/技术文档/Ubuntu下Mysql的安装与验证/2018-10-05-16-32-48.png" title="[blog.ruanxinyu.cn]"><p>点击下载按钮后，我们也可以页面中获取下载地址，然后通过wget下载：</p><img src="/posts/技术文档/Ubuntu下Mysql的安装与验证/2018-10-05-16-35-06.png" title="[blog.ruanxinyu.cn]"><p>通过wget下载后通过执行<code>dpkg</code>命令安装deb包，并且在弹出的框中我们选择8.0版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql-apt-config_0.8.10-1_all.deb</span><br><span class="line">sudo dpkg -i mysql-apt-config_0.8.10-1_all.deb <span class="comment"># 在弹出的框中我们选择8.0版本</span></span><br></pre></td></tr></table></figure><img src="/posts/技术文档/Ubuntu下Mysql的安装与验证/2018-10-05-16-38-20.png" title="[blog.ruanxinyu.cn]"><p>由于安装过程中需要使用到<code>libmecab2</code>包，所以也需要提前安装好，否则会提示<code>Depends: mysql-community-server (= 8.0.12-1ubuntu18.04) but it is not going to be installed</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://security.ubuntu.com/ubuntu/pool/universe/m/mecab/libmecab2_0.996-5_amd64.deb</span><br><span class="line">sudo dpkg -i libmecab2_0.996-5_amd64.deb</span><br></pre></td></tr></table></figure><p>安装好<code>libmecab2</code>后就可以安装<code>mysql-server</code>了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure><p>安装过程中会提示用户选择密码的加密方式，由于<code>Mysql 8.0</code>开始支持更加安全的基于SHA256的加密方式，但是老的驱动是不支持该加密方式，所以如果已经有其他程序使用该Mysql，需要保持兼容，则选择兼容模式，否则推荐使用最一种模式。</p><img src="/posts/技术文档/Ubuntu下Mysql的安装与验证/2018-10-05-17-05-49.png" title="[blog.ruanxinyu.cn]"><h1 id="启动与开机启动"><a class="markdownIt-Anchor" href="#启动与开机启动"></a> 启动与开机启动</h1><p>安装完成后mysql自动已经起来，可以通过<code>systemctl</code>命令启动，停止和查看mysql，并且加入到开机启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop mysql.service</span><br><span class="line">sudo systemctl start mysql.service</span><br><span class="line">sudo systemctl status mysql.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> mysql.service</span><br></pre></td></tr></table></figure><p>mysql的相关目录及文件位置说明：</p><ol><li>用户配置文件位置：<code>/etc/mysql/my.cnf</code></li><li>pid文件位置：<code>/var/run/mysqld/mysqld.pid</code></li><li>socket文件位置：<code>/var/run/mysqld/mysqld.sock</code></li><li>数据目录： <code>/var/lib/mysql</code></li><li>错误日志文件： <code>/var/log/mysql/error.log</code></li></ol><p>在控制台执行<code>mysql -u root -p</code>，输入密码就可以进入</p><img src="/posts/技术文档/Ubuntu下Mysql的安装与验证/2018-10-05-18-58-08.png" title="[blog.ruanxinyu.cn]">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;apt方式安装&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#apt方式安装&quot;&gt;&lt;/a&gt; apt方式安装&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Ubuntu 18.04.1版本下，如果直接使用&lt;code&gt;sudo apt-get i
      
    
    </summary>
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Git常见问题操作指导</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%93%8D%E4%BD%9C%E6%8C%87%E5%AF%BC/"/>
    <id>http://ruanxinyu.github.io/posts/技术文档/Git常见问题操作指导/</id>
    <published>2018-10-04T05:15:35.000Z</published>
    <updated>2018-10-14T05:16:20.561Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>图形化客户端强烈推荐：<a href="https://www.syntevo.com/smartgit/" target="_blank" rel="noopener">SmartGit</a>， 本文是基于<a href="https://github.com/k88hudson/git-flight-rules/blob/master/README_zh-CN.md" target="_blank" rel="noopener">Git飞行规则</a>上做的修改与补充。</p></blockquote><h1 id="快速查询目录"><a class="markdownIt-Anchor" href="#快速查询目录"></a> 快速查询目录</h1><!-- page_toc -->  <blockquote><p>为了清楚的表述，这篇文档里的所有例子使用了自定义的bash 提示，以便指示当前分支和是否有暂存的变化(changes)。分支名用小括号括起来，分支名后面跟的<code>*</code>表示暂存的变化(changes)。</p></blockquote><h1 id="编辑提交editting-commits"><a class="markdownIt-Anchor" href="#编辑提交editting-commits"></a> 编辑提交(editting commits)</h1><h2 id="刚才提交了什么"><a class="markdownIt-Anchor" href="#刚才提交了什么"></a> 刚才提交了什么</h2><p>如果你用 <code>git commit -a</code> 提交了一次变化(changes)，而你又不确定到底这次提交了哪些内容。 你就可以用下面的命令显示当前<code>HEAD</code>上的最近一次的提交(commit):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git show</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -n1 -p</span><br></pre></td></tr></table></figure><h2 id="提交信息写错了"><a class="markdownIt-Anchor" href="#提交信息写错了"></a> 提交信息写错了</h2><p>如果你的提交信息(commit message)写错了且这次提交(commit)还没有推(push), 你可以通过下面的方法来修改提交信息(commit message):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure><p>这会打开你的默认编辑器, 在这里你可以编辑信息. 另一方面, 你也可以用一条命令一次完成:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend -m <span class="string">'xxxxxxx'</span></span><br></pre></td></tr></table></figure><p>如果你已经推(push)了这次提交(commit), 你可以修改这次提交(commit)然后强推(force push), 但是不推荐这么做。</p><h2 id="提交里的用户名和邮箱不对"><a class="markdownIt-Anchor" href="#提交里的用户名和邮箱不对"></a> 提交里的用户名和邮箱不对</h2><p>如果这只是单个提交(commit)，修改它：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend --author <span class="string">"New Authorname &lt;authoremail@mydomain.com&gt;"</span></span><br></pre></td></tr></table></figure><p>如果你需要修改所有历史, 参考 'git filter-branch’的指南页.</p><h2 id="想从一个提交里移除一个文件"><a class="markdownIt-Anchor" href="#想从一个提交里移除一个文件"></a> 想从一个提交里移除一个文件</h2><p>通过下面的方法，从一个提交(commit)里移除一个文件:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout HEAD^ myfile</span><br><span class="line">$ git add -A</span><br><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure><p>这将非常有用，当你有一个开放的补丁(open patch)，你往上面提交了一个不必要的文件，你需要强推(force push)去更新这个远程补丁。</p><h2 id="想删除最后一次提交"><a class="markdownIt-Anchor" href="#想删除最后一次提交"></a> 想删除最后一次提交</h2><p>如果你需要删除推了的提交(pushed commits)，你可以使用下面的方法。可是，这会不可逆的改变你的历史，也会搞乱那些已经从该仓库拉取(pulled)了的人的历史。简而言之，如果你不是很确定，千万不要这么做。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD^ --hard</span><br><span class="line">$ git push -f [remote] [branch]</span><br></pre></td></tr></table></figure><p>如果你还没有推到远程, 把Git重置(reset)到你最后一次提交前的状态就可以了(同时保存暂存的变化):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(my-branch*)$ git reset --soft HEAD@&#123;1&#125;</span><br></pre></td></tr></table></figure><p>这只能在没有推送之前有用. 如果你已经推了, 唯一安全能做的是 <code>git revert SHAofBadCommit</code>， 那会创建一个新的提交(commit)用于撤消前一个提交的所有变化(changes)； 或者, 如果你推的这个分支是rebase-safe的 (例如： 其它开发者不会从这个分支拉), 只需要使用 <code>git push -f</code>； 更多, 请参考 <a href="#deleteremove-last-pushed-commit">the above section</a>。</p><h2 id="删除任意提交"><a class="markdownIt-Anchor" href="#删除任意提交"></a> 删除任意提交</h2><p>同样的警告：不到万不得已的时候不要这么做.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase --onto SHA1_OF_BAD_COMMIT^ SHA1_OF_BAD_COMMIT</span><br><span class="line">$ git push -f [remote] [branch]</span><br></pre></td></tr></table></figure><p>或者做一个 <a href="#interactive-rebase">交互式rebase</a> 删除那些你想要删除的提交(commit)里所对应的行。</p><h2 id="尝试推一个修正后的提交到远程但是报错"><a class="markdownIt-Anchor" href="#尝试推一个修正后的提交到远程但是报错"></a> 尝试推一个修正后的提交到远程，但是报错：</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">To https://github.com/yourusername/repo.git</span><br><span class="line">! [rejected]        mybranch -&gt; mybranch (non-fast-forward)</span><br><span class="line">error: failed to push some refs to <span class="string">'https://github.com/tanay1337/webmaker.org.git'</span></span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class="line">hint: <span class="string">'git pull ...'</span>) before pushing again.</span><br><span class="line">hint: See the <span class="string">'Note about fast-forwards'</span> <span class="keyword">in</span> <span class="string">'git push --help'</span> <span class="keyword">for</span> details.</span><br></pre></td></tr></table></figure><p>注意, rebasing(见下面)和修正(amending)会用一个<strong>新的提交(commit)代替旧的</strong>, 所以如果之前你已经往远程仓库上推过一次修正前的提交(commit)，那你现在就必须强推(force push) (<code>-f</code>)。 注意 – <em>总是</em> 确保你指明一个分支!</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git push origin mybranch -f</span><br></pre></td></tr></table></figure><p>一般来说, <strong>要避免强推</strong>. 最好是创建和推(push)一个新的提交(commit)，而不是强推一个修正后的提交。后者会使那些与该分支或该分支的子分支工作的开发者，在源历史中产生冲突。</p><h2 id="意外的做了一次硬重置想找回内容"><a class="markdownIt-Anchor" href="#意外的做了一次硬重置想找回内容"></a> 意外的做了一次硬重置，想找回内容</h2><p>如果你意外的做了 <code>git reset --hard</code>, 你通常能找回你的提交(commit), 因为Git对每件事都会有日志，且都会保存几天。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git reflog</span><br></pre></td></tr></table></figure><p>你将会看到一个你过去提交(commit)的列表, 和一个重置的提交。 选择你想要回到的提交(commit)的SHA，再重置一次:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git reset --hard SHA1234</span><br></pre></td></tr></table></figure><p>这样就完成了。</p><h1 id="暂存staging"><a class="markdownIt-Anchor" href="#暂存staging"></a> 暂存(Staging)</h1><h2 id="需要把暂存的内容添加到上一次的提交"><a class="markdownIt-Anchor" href="#需要把暂存的内容添加到上一次的提交"></a> 需要把暂存的内容添加到上一次的提交</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(my-branch*)$ git commit --amend</span><br></pre></td></tr></table></figure><h2 id="想要暂存一个新文件的一部分而不是这个文件的全部"><a class="markdownIt-Anchor" href="#想要暂存一个新文件的一部分而不是这个文件的全部"></a> 想要暂存一个新文件的一部分，而不是这个文件的全部</h2><p>一般来说, 如果你想暂存一个文件的一部分, 你可这样做:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add --patch filename.x</span><br></pre></td></tr></table></figure><p><code>-p</code> 简写。这会打开交互模式， 你将能够用 <code>s</code> 选项来分隔提交(commit)； 然而, 如果这个文件是新的, 会没有这个选择， 添加一个新文件时, 这样做:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add -N filename.x</span><br></pre></td></tr></table></figure><p>然后, 你需要用 <code>e</code> 选项来手动选择需要添加的行，执行 <code>git diff --cached</code> 将会显示哪些行暂存了哪些行只是保存在本地了。</p><h2 id="想把在一个文件里的变化加到两个提交里"><a class="markdownIt-Anchor" href="#想把在一个文件里的变化加到两个提交里"></a> 想把在一个文件里的变化加到两个提交里</h2><p><code>git add</code> 会把整个文件加入到一个提交. <code>git add -p</code> 允许交互式的选择你想要提交的部分.</p><h2 id="想把暂存的内容变成未暂存把未暂存的内容暂存起来"><a class="markdownIt-Anchor" href="#想把暂存的内容变成未暂存把未暂存的内容暂存起来"></a> 想把暂存的内容变成未暂存，把未暂存的内容暂存起来</h2><p>这个有点困难， 我能想到的最好的方法是先stash未暂存的内容， 然后重置(reset)，再pop第一步stashed的内容, 最后再add它们。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git stash -k</span><br><span class="line">$ git reset --hard</span><br><span class="line">$ git stash pop</span><br><span class="line">$ git add -A</span><br></pre></td></tr></table></figure><h1 id="未暂存unstaged的内容"><a class="markdownIt-Anchor" href="#未暂存unstaged的内容"></a> 未暂存(Unstaged)的内容</h1><h2 id="想把未暂存的内容移动到一个新分支"><a class="markdownIt-Anchor" href="#想把未暂存的内容移动到一个新分支"></a> 想把未暂存的内容移动到一个新分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b my-branch</span><br></pre></td></tr></table></figure><h2 id="想把未暂存的内容移动到另一个已存在的分支"><a class="markdownIt-Anchor" href="#想把未暂存的内容移动到另一个已存在的分支"></a> 想把未暂存的内容移动到另一个已存在的分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">$ git checkout my-branch</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h2 id="想丢弃本地未提交的变化"><a class="markdownIt-Anchor" href="#想丢弃本地未提交的变化"></a> 想丢弃本地未提交的变化</h2><p>如果你只是想重置源(origin)和你本地(local)之间的一些提交(commit)，你可以：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># one commit</span></span><br><span class="line">(my-branch)$ git reset --hard HEAD^</span><br><span class="line"><span class="comment"># two commits</span></span><br><span class="line">(my-branch)$ git reset --hard HEAD^^</span><br><span class="line"><span class="comment"># four commits</span></span><br><span class="line">(my-branch)$ git reset --hard HEAD~4</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">(master)$ git checkout -f</span><br></pre></td></tr></table></figure><p>重置某个特殊的文件, 你可以用文件名做为参数:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset filename</span><br></pre></td></tr></table></figure><h2 id="想丢弃某些未暂存的内容"><a class="markdownIt-Anchor" href="#想丢弃某些未暂存的内容"></a> 想丢弃某些未暂存的内容</h2><p>如果你想丢弃工作拷贝中的一部分内容，而不是全部。</p><p>签出(checkout)不需要的内容，保留需要的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -p</span><br><span class="line"><span class="comment"># Answer y to all of the snippets you want to drop</span></span><br></pre></td></tr></table></figure><p>另外一个方法是使用 <code>stash</code>， Stash所有要保留下的内容, 重置工作拷贝, 重新应用保留的部分。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git stash -p</span><br><span class="line"><span class="comment"># Select all of the snippets you want to save</span></span><br><span class="line">$ git reset --hard</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><p>或者, stash 你不需要的部分, 然后stash drop。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git stash -p</span><br><span class="line"><span class="comment"># Select all of the snippets you don't want to save</span></span><br><span class="line">$ git stash drop</span><br></pre></td></tr></table></figure><h1 id="分支branches"><a class="markdownIt-Anchor" href="#分支branches"></a> 分支(Branches)</h1><h2 id="从错误的分支拉取了内容或把内容拉取到了错误的分支"><a class="markdownIt-Anchor" href="#从错误的分支拉取了内容或把内容拉取到了错误的分支"></a> 从错误的分支拉取了内容，或把内容拉取到了错误的分支</h2><p>这是另外一种使用 <code>git reflog</code> 情况，找到在这次错误拉(pull) 之前HEAD的指向。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git reflog</span><br><span class="line">ab7555f HEAD@&#123;0&#125;: pull origin wrong-branch: Fast-forward</span><br><span class="line">c5bc55a HEAD@&#123;1&#125;: checkout: checkout message goes here</span><br></pre></td></tr></table></figure><p>重置分支到你所需的提交(desired commit):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard c5bc55a</span><br></pre></td></tr></table></figure><p>完成。</p><h2 id="想扔掉本地的提交以便我的分支与远程的保持一致"><a class="markdownIt-Anchor" href="#想扔掉本地的提交以便我的分支与远程的保持一致"></a> 想扔掉本地的提交，以便我的分支与远程的保持一致</h2><p>先确认你没有推(push)你的内容到远程。</p><p><code>git status</code> 会显示你领先(ahead)源(origin)多少个提交:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git status</span><br><span class="line"><span class="comment"># On branch my-branch</span></span><br><span class="line"><span class="comment"># Your branch is ahead of 'origin/my-branch' by 2 commits.</span></span><br><span class="line"><span class="comment">#   (use "git push" to publish your local commits)</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>一种方法是:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git reset --hard origin/my-branch</span><br></pre></td></tr></table></figure><h2 id="需要提交到一个新分支但错误的提交到了master"><a class="markdownIt-Anchor" href="#需要提交到一个新分支但错误的提交到了master"></a> 需要提交到一个新分支，但错误的提交到了master</h2><p>在master下创建一个新分支，不切换到新分支,仍在master下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git branch my-branch</span><br></pre></td></tr></table></figure><p>把master分支重置到前一个提交:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure><p><code>HEAD^</code> 是 <code>HEAD^1</code> 的简写，你可以通过指定要设置的<code>HEAD</code>来进一步重置。</p><p>或者, 如果你不想使用 <code>HEAD^</code>, 找到你想重置到的提交(commit)的hash(<code>git log</code> 能够完成)， 然后重置到这个hash。 使用<code>git push</code> 同步内容到远程。</p><p>例如, master分支想重置到的提交的hash为<code>a13b85e</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git reset --hard a13b85e</span><br><span class="line">HEAD is now at a13b85e</span><br></pre></td></tr></table></figure><p>签出(checkout)刚才新建的分支继续工作:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git checkout my-branch</span><br></pre></td></tr></table></figure><h2 id="想保留来自另外一个ref-ish的整个文件"><a class="markdownIt-Anchor" href="#想保留来自另外一个ref-ish的整个文件"></a> 想保留来自另外一个ref-ish的整个文件</h2><p>假设你正在做一个原型方案(原文为working spike (see note)), 有成百的内容，每个都工作得很好。现在, 你提交到了一个分支，保存工作内容:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(solution)$ git add -A &amp;&amp; git commit -m <span class="string">"Adding all changes from this spike into one big commit."</span></span><br></pre></td></tr></table></figure><p>当你想要把它放到一个分支里 (可能是<code>feature</code>, 或者 <code>develop</code>), 你关心是保持整个文件的完整，你想要一个大的提交分隔成比较小。</p><p>假设你有:</p><ul><li>分支 <code>solution</code>, 拥有原型方案， 领先 <code>develop</code> 分支。</li><li>分支 <code>develop</code>, 在这里你应用原型方案的一些内容。</li></ul><p>我去可以通过把内容拿到你的分支里，来解决这个问题:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(develop)$ git checkout solution -- file1.txt</span><br></pre></td></tr></table></figure><p>这会把这个文件内容从分支 <code>solution</code> 拿到分支 <code>develop</code> 里来:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># On branch develop</span></span><br><span class="line"><span class="comment"># Your branch is up-to-date with 'origin/develop'.</span></span><br><span class="line"><span class="comment"># Changes to be committed:</span></span><br><span class="line"><span class="comment">#  (use "git reset HEAD &lt;file&gt;..." to unstage)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        modified:   file1.txt</span></span><br></pre></td></tr></table></figure><p>然后, 正常提交。</p><p>Note: Spike solutions are made to analyze or solve the problem. These solutions are used for estimation and discarded once everyone gets clear visualization of the problem. ~ <a href="https://en.wikipedia.org/wiki/Extreme_programming_practices" target="_blank" rel="noopener">Wikipedia</a>.</p><h2 id="把几个提交提交到了同一个分支而这些提交应该分布在不同的分支里"><a class="markdownIt-Anchor" href="#把几个提交提交到了同一个分支而这些提交应该分布在不同的分支里"></a> 把几个提交提交到了同一个分支，而这些提交应该分布在不同的分支里</h2><p>假设你有一个<code>master</code>分支， 执行<code>git log</code>, 你看到你做过两次提交:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">commit e3851e817c451cc36f2e6f3049db528415e3c114</span><br><span class="line">Author: Alex Lee &lt;alexlee@example.com&gt;</span><br><span class="line">Date:   Tue Jul 22 15:39:27 2014 -0400</span><br><span class="line"></span><br><span class="line">    Bug <span class="comment">#21 - Added CSRF protection</span></span><br><span class="line"></span><br><span class="line">commit 5ea51731d150f7ddc4a365437931cd8be3bf3131</span><br><span class="line">Author: Alex Lee &lt;alexlee@example.com&gt;</span><br><span class="line">Date:   Tue Jul 22 15:39:12 2014 -0400</span><br><span class="line"></span><br><span class="line">    Bug <span class="comment">#14 - Fixed spacing on title</span></span><br><span class="line"></span><br><span class="line">commit a13b85e984171c6e2a1729bb061994525f626d14</span><br><span class="line">Author: Aki Rose &lt;akirose@example.com&gt;</span><br><span class="line">Date:   Tue Jul 21 01:12:48 2014 -0400</span><br><span class="line"></span><br><span class="line">    First commit</span><br></pre></td></tr></table></figure><p>让我们用提交hash(commit hash)标记bug (<code>e3851e8</code> for #21, <code>5ea5173</code> for #14).</p><p>首先, 我们把<code>master</code>分支重置到正确的提交(<code>a13b85e</code>):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git reset --hard a13b85e</span><br><span class="line">HEAD is now at a13b85e</span><br></pre></td></tr></table></figure><p>现在, 我们对 bug #21 创建一个新的分支:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git checkout -b 21</span><br><span class="line">(21)$</span><br></pre></td></tr></table></figure><p>接着, 我们用 <em>cherry-pick</em> 把对bug #21的提交放入当前分支。 这意味着我们将应用(apply)这个提交(commit)，仅仅这一个提交(commit)，直接在HEAD上面。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(21)$ git cherry-pick e3851e8</span><br></pre></td></tr></table></figure><p>这时候, 这里可能会产生冲突， 参见<a href="#interactive-rebase">交互式 rebasing 章</a> <a href="#merge-conflict"><strong>冲突节</strong></a> 解决冲突.</p><p>再者， 我们为bug #14 创建一个新的分支, 也基于<code>master</code>分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(21)$ git checkout master</span><br><span class="line">(master)$ git checkout -b 14</span><br><span class="line">(14)$</span><br></pre></td></tr></table></figure><p>最后, 为 bug #14 执行 <code>cherry-pick</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(14)$ git cherry-pick 5ea5173</span><br></pre></td></tr></table></figure><h2 id="想删除上游分支被删除了的本地分支"><a class="markdownIt-Anchor" href="#想删除上游分支被删除了的本地分支"></a> 想删除上游分支被删除了的本地分支</h2><p>一旦你在github 上面合并(merge)了一个pull request, 你就可以删除你fork里被合并的分支。 如果你不准备继续在这个分支里工作, 删除这个分支的本地拷贝会更干净，使你不会陷入工作分支和一堆陈旧分支的混乱之中。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch -p</span><br></pre></td></tr></table></figure><h2 id="不小心删除了我的分支"><a class="markdownIt-Anchor" href="#不小心删除了我的分支"></a> 不小心删除了我的分支</h2><p>如果你定期推送到远程, 多数情况下应该是安全的，但有些时候还是可能删除了还没有推到远程的分支。 让我们先创建一个分支和一个新的文件:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git checkout -b my-branch</span><br><span class="line">(my-branch)$ git branch</span><br><span class="line">(my-branch)$ touch foo.txt</span><br><span class="line">(my-branch)$ ls</span><br><span class="line">README.md foo.txt</span><br></pre></td></tr></table></figure><p>添加文件并做一次提交</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git add .</span><br><span class="line">(my-branch)$ git commit -m <span class="string">'foo.txt added'</span></span><br><span class="line">(my-branch)$ foo.txt added</span><br><span class="line"> 1 files changed, 1 insertions(+)</span><br><span class="line"> create mode 100644 foo.txt</span><br><span class="line">(my-branch)$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">commit 4e3cd85a670ced7cc17a2b5d8d3d809ac88d5012</span><br><span class="line">Author: siemiatj &lt;siemiatj@example.com&gt;</span><br><span class="line">Date:   Wed Jul 30 00:34:10 2014 +0200</span><br><span class="line"></span><br><span class="line">    foo.txt added</span><br><span class="line"></span><br><span class="line">commit 69204cdf0acbab201619d95ad8295928e7f411d5</span><br><span class="line">Author: Kate Hudson &lt;katehudson@example.com&gt;</span><br><span class="line">Date:   Tue Jul 29 13:14:46 2014 -0400</span><br><span class="line"></span><br><span class="line">    Fixes <span class="comment">#6: Force pushing after amending commits</span></span><br></pre></td></tr></table></figure><p>现在我们切回到主(master)分支，‘不小心的’删除<code>my-branch</code>分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git checkout master</span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br><span class="line">Your branch is up-to-date with <span class="string">'origin/master'</span>.</span><br><span class="line">(master)$ git branch -D my-branch</span><br><span class="line">Deleted branch my-branch (was 4e3cd85).</span><br><span class="line">(master)$ <span class="built_in">echo</span> oh noes, deleted my branch!</span><br><span class="line">oh noes, deleted my branch!</span><br></pre></td></tr></table></figure><p>在这时候你应该想起了<code>reflog</code>, 一个升级版的日志，它存储了仓库(repo)里面所有动作的历史。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git reflog</span><br><span class="line">69204cd HEAD@&#123;0&#125;: checkout: moving from my-branch to master</span><br><span class="line">4e3cd85 HEAD@&#123;1&#125;: commit: foo.txt added</span><br><span class="line">69204cd HEAD@&#123;2&#125;: checkout: moving from master to my-branch</span><br></pre></td></tr></table></figure><p>正如你所见，我们有一个来自删除分支的提交hash(commit hash)，接下来看看是否能恢复删除了的分支。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git checkout -b my-branch-help</span><br><span class="line">Switched to a new branch <span class="string">'my-branch-help'</span></span><br><span class="line">(my-branch-help)$ git reset --hard 4e3cd85</span><br><span class="line">HEAD is now at 4e3cd85 foo.txt added</span><br><span class="line">(my-branch-help)$ ls</span><br><span class="line">README.md foo.txt</span><br></pre></td></tr></table></figure><p>看! 我们把删除的文件找回来了。 Git的 <code>reflog</code> 在rebasing出错的时候也是同样有用的。</p><h2 id="想删除一个分支"><a class="markdownIt-Anchor" href="#想删除一个分支"></a> 想删除一个分支</h2><p>删除一个远程分支:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git push origin --delete my-branch</span><br></pre></td></tr></table></figure><p>你也可以:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git push origin :my-branch</span><br></pre></td></tr></table></figure><p>删除一个本地分支:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git branch -D my-branch</span><br></pre></td></tr></table></figure><h2 id="想从别人正在工作的远程分支签出一个分支"><a class="markdownIt-Anchor" href="#想从别人正在工作的远程分支签出一个分支"></a> 想从别人正在工作的远程分支签出一个分支</h2><p>首先, 从远程拉取(fetch) 所有分支:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git fetch --all</span><br></pre></td></tr></table></figure><p>假设你想要从远程的<code>daves</code>分支签出到本地的<code>daves</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git checkout --track origin/daves</span><br><span class="line">Branch daves <span class="built_in">set</span> up to track remote branch daves from origin.</span><br><span class="line">Switched to a new branch <span class="string">'daves'</span></span><br></pre></td></tr></table></figure><p>(<code>--track</code> 是 <code>git checkout -b [branch] [remotename]/[branch]</code> 的简写)</p><p>这样就得到了一个<code>daves</code>分支的本地拷贝, 任何推过(pushed)的更新，远程都能看到.</p><h1 id="rebasing-和合并merging"><a class="markdownIt-Anchor" href="#rebasing-和合并merging"></a> Rebasing 和合并(Merging)</h1><h2 id="想撤销rebasemerge"><a class="markdownIt-Anchor" href="#想撤销rebasemerge"></a> 想撤销rebase/merge</h2><p>你可以合并(merge)或rebase了一个错误的分支, 或者完成不了一个进行中的rebase/merge。 Git 在进行危险操作的时候会把原始的HEAD保存在一个叫ORIG_HEAD的变量里, 所以要把分支恢复到rebase/merge前的状态是很容易的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git reset --hard ORIG_HEAD</span><br></pre></td></tr></table></figure><h2 id="已经rebase过-但是我不想强推"><a class="markdownIt-Anchor" href="#已经rebase过-但是我不想强推"></a> 已经rebase过, 但是我不想强推</h2><p>不幸的是，如果你想把这些变化(changes)反应到远程分支上，你就必须得强推(force push)。 是因你快进(Fast forward)了提交，改变了Git历史, 远程分支不会接受变化(changes)，除非强推(force push)。这就是许多人使用 merge 工作流, 而不是 rebasing 工作流的主要原因之一， 开发者的强推(force push)会使大的团队陷入麻烦。使用时需要注意，一种安全使用 rebase 的方法是，不要把你的变化(changes)反映到远程分支上, 而是按下面的做:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git checkout my-branch</span><br><span class="line">(my-branch)$ git rebase -i master</span><br><span class="line">(my-branch)$ git checkout master</span><br><span class="line">(master)$ git merge --ff-only my-branch</span><br></pre></td></tr></table></figure><p>更多, 参见 <a href="http://stackoverflow.com/questions/11058312/how-can-i-use-git-rebase-without-requiring-a-forced-push" target="_blank" rel="noopener">this SO thread</a>.</p><h2 id="需要组合几个提交"><a class="markdownIt-Anchor" href="#需要组合几个提交"></a> 需要组合几个提交</h2><p>假设你的工作分支将会做对于 <code>master</code> 的pull-request。 一般情况下你不关心提交(commit)的时间戳，只想组合 <em>所有</em> 提交(commit) 到一个单独的里面, 然后重置(reset)重提交(recommit)。 确保主(master)分支是最新的和你的变化都已经提交了, 然后:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git reset --soft master</span><br><span class="line">(my-branch)$ git commit -am <span class="string">"New awesome feature"</span></span><br></pre></td></tr></table></figure><p>如果你想要更多的控制, 想要保留时间戳, 你需要做交互式rebase (interactive rebase):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git rebase -i master</span><br></pre></td></tr></table></figure><p>如果没有相对的其它分支， 你将不得不相对自己的<code>HEAD</code> 进行 rebase。 例如：你想组合最近的两次提交(commit), 你将相对于<code>HEAD~2</code> 进行rebase， 组合最近3次提交(commit), 相对于<code>HEAD~3</code>, 等等。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git rebase -i HEAD~2</span><br></pre></td></tr></table></figure><p>在你执行了交互式 rebase的命令(interactive rebase command)后, 你将在你的编辑器里看到类似下面的内容:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pick a9c8a1d Some refactoring</span><br><span class="line">pick <span class="number">01</span>b2fd8 New awesome feature</span><br><span class="line">pick b729ad5 fixup</span><br><span class="line">pick e3851e8 another <span class="keyword">fix</span></span><br><span class="line"></span><br><span class="line"># Rebase <span class="number">8074</span>d12..b729ad5 onto <span class="number">8074</span>d12</span><br><span class="line">#</span><br><span class="line"># Command<span class="variable">s:</span></span><br><span class="line">#  <span class="keyword">p</span>, pick = use commit</span><br><span class="line">#  r, reword = use commit, but <span class="keyword">edit</span> the commit message</span><br><span class="line">#  <span class="keyword">e</span>, <span class="keyword">edit</span> = use commit, but <span class="keyword">stop</span> <span class="keyword">for</span> amending</span><br><span class="line">#  s, squash = use commit, but meld into <span class="keyword">previous</span> commit</span><br><span class="line">#  <span class="keyword">f</span>, fixup = like <span class="string">"squash"</span>, but discard this commit<span class="string">'s log message</span></span><br><span class="line"><span class="string">#  x, exec = run command (the rest of the line) using shell</span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string"># These lines can be re-ordered; they are executed from top to bottom.</span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string"># However, if you remove everything, the rebase will be aborted.</span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string"># Note that empty commits are commented out</span></span><br></pre></td></tr></table></figure><p>所有以 <code>#</code> 开头的行都是注释, 不会影响 rebase.</p><p>然后，你可以用任何上面命令列表的命令替换 <code>pick</code>, 你也可以通过删除对应的行来删除一个提交(commit)。</p><p>例如, 如果你想 <strong>单独保留最旧(first)的提交(commit),组合所有剩下的到第二个里面</strong>, 你就应该编辑第二个提交(commit)后面的每个提交(commit) 前的单词为 <code>f</code>:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pick a9c8a1d Some refactoring</span><br><span class="line">pick <span class="number">01</span>b2fd8 New awesome feature</span><br><span class="line"><span class="keyword">f</span> b729ad5 fixup</span><br><span class="line"><span class="keyword">f</span> e3851e8 another <span class="keyword">fix</span></span><br></pre></td></tr></table></figure><p>如果你想组合这些提交(commit) <strong>并重命名这个提交(commit)</strong>, 你应该在第二个提交(commit)旁边添加一个<code>r</code>，或者更简单的用<code>s</code> 替代 <code>f</code>:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pick a9c8a1d Some refactoring</span><br><span class="line">pick <span class="number">01</span>b2fd8 New awesome feature</span><br><span class="line">s b729ad5 fixup</span><br><span class="line">s e3851e8 another <span class="keyword">fix</span></span><br></pre></td></tr></table></figure><p>你可以在接下来弹出的文本提示框里重命名提交(commit)。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Newer, awesomer features</span><br><span class="line"></span><br><span class="line"># Please enter the commit message <span class="keyword">for</span> your <span class="keyword">changes</span>. Lines starting</span><br><span class="line"># with <span class="string">'#'</span> will <span class="keyword">be</span> ignored, <span class="built_in">and</span> <span class="keyword">an</span> <span class="built_in">empty</span> message aborts the commit.</span><br><span class="line"># rebase in progress; onto 8074d12</span><br><span class="line"># You are currently editing <span class="keyword">a</span> commit <span class="keyword">while</span> rebasing branch <span class="string">'master'</span> <span class="keyword">on</span> <span class="string">'8074d12'</span>.</span><br><span class="line">#</span><br><span class="line"># Changes <span class="keyword">to</span> <span class="keyword">be</span> committed:</span><br><span class="line">#modified:   README.md</span><br><span class="line">#</span><br></pre></td></tr></table></figure><p>如果成功了, 你应该看到类似下面的内容:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ Successfully rebased and updated refs/heads/master.</span><br></pre></td></tr></table></figure><h3 id="安全合并策略"><a class="markdownIt-Anchor" href="#安全合并策略"></a> 安全合并策略</h3><p><code>--no-commit</code> 执行合并(merge)但不自动提交, 给用户在做提交前检查和修改的机会。 <code>no-ff</code> 会为特性分支(feature branch)的存在过留下证据, 保持项目历史一致。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git merge --no-ff --no-commit my-branch</span><br></pre></td></tr></table></figure><h3 id="需要将一个分支合并成一个提交"><a class="markdownIt-Anchor" href="#需要将一个分支合并成一个提交"></a> 需要将一个分支合并成一个提交</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git merge --squash my-branch</span><br></pre></td></tr></table></figure><h3 id="只想组合未推的提交"><a class="markdownIt-Anchor" href="#只想组合未推的提交"></a> 只想组合未推的提交</h3><p>有时候，在将数据推向上游之前，你有几个正在进行的工作提交(commit)。这时候不希望把已经推(push)过的组合进来，因为其他人可能已经有提交(commit)引用它们了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git rebase -i @&#123;u&#125;</span><br></pre></td></tr></table></figure><p>这会产生一次交互式的rebase(interactive rebase), 只会列出没有推(push)的提交(commit)， 在这个列表时进行reorder/fix/squash 都是安全的。</p><h2 id="检查是否分支上的所有提交都合并过了"><a class="markdownIt-Anchor" href="#检查是否分支上的所有提交都合并过了"></a> 检查是否分支上的所有提交都合并过了</h2><p>检查一个分支上的所有提交(commit)是否都已经合并(merge)到了其它分支, 你应该在这些分支的head(或任何 commits)之间做一次diff:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git <span class="built_in">log</span> --graph --left-right --cherry-pick --oneline HEAD...feature/120-on-scroll</span><br></pre></td></tr></table></figure><p>这会告诉你在一个分支里有而另一个分支没有的所有提交(commit), 和分支之间不共享的提交(commit)的列表。 另一个做法可以是:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git <span class="built_in">log</span> master ^feature/120-on-scroll --no-merges</span><br></pre></td></tr></table></figure><h2 id="交互式rebase可能出现的问题"><a class="markdownIt-Anchor" href="#交互式rebase可能出现的问题"></a> 交互式rebase可能出现的问题</h2><h3 id="这个rebase编辑屏幕出现noop"><a class="markdownIt-Anchor" href="#这个rebase编辑屏幕出现noop"></a> 这个rebase编辑屏幕出现’noop’</h3><p>如果你看到的是这样:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">noop</span><br></pre></td></tr></table></figure><p>这意味着你rebase的分支和当前分支在同一个提交(commit)上, 或者 <em>领先(ahead)</em> 当前分支。 你可以尝试:</p><ul><li>检查确保主(master)分支没有问题</li><li>rebase  <code>HEAD~2</code> 或者更早</li></ul><h3 id="有冲突的情况"><a class="markdownIt-Anchor" href="#有冲突的情况"></a> 有冲突的情况</h3><p>如果你不能成功的完成rebase, 你可能必须要解决冲突。</p><p>首先执行 <code>git status</code> 找出哪些文件有冲突:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git status</span><br><span class="line">On branch my-branch</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">truemodified:   README.md</span><br></pre></td></tr></table></figure><p>在这个例子里面, <code>README.md</code> 有冲突。 打开这个文件找到类似下面的内容:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">some code</span><br><span class="line">=========</span><br><span class="line">some code</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; <span class="keyword">new</span>-commit</span><br></pre></td></tr></table></figure><p>你需要解决新提交的代码(示例里, 从中间<code>==</code>线到<code>new-commit</code>的地方)与<code>HEAD</code> 之间不一样的地方.</p><p>有时候这些合并非常复杂，你应该使用可视化的差异编辑器(visual diff editor):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master*)$ git mergetool -t opendiff</span><br></pre></td></tr></table></figure><p>在你解决完所有冲突和测试过后, <code>git add</code> 变化了的(changed)文件, 然后用<code>git rebase --continue</code> 继续rebase。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git add README.md</span><br><span class="line">(my-branch)$ git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure><p>如果在解决完所有的冲突过后，得到了与提交前一样的结果, 可以执行<code>git rebase --skip</code>。</p><p>任何时候你想结束整个rebase 过程，回来rebase前的分支状态, 你可以做:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(my-branch)$ git rebase --abort</span><br></pre></td></tr></table></figure><h1 id="杂项miscellaneous-objects"><a class="markdownIt-Anchor" href="#杂项miscellaneous-objects"></a> 杂项(Miscellaneous Objects)</h1><h2 id="克隆所有子模块"><a class="markdownIt-Anchor" href="#克隆所有子模块"></a> 克隆所有子模块</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --recursive git://github.com/foo/bar.git</span><br></pre></td></tr></table></figure><p>如果已经克隆了:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git submodule update --init --recursive</span><br></pre></td></tr></table></figure><h2 id="删除标签"><a class="markdownIt-Anchor" href="#删除标签"></a> 删除标签</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d &lt;tag_name&gt;</span><br><span class="line">$ git push &lt;remote&gt; :refs/tags/&lt;tag_name&gt;</span><br></pre></td></tr></table></figure><h2 id="恢复已删除标签"><a class="markdownIt-Anchor" href="#恢复已删除标签"></a> 恢复已删除标签</h2><p>如果你想恢复一个已删除标签(tag), 可以按照下面的步骤: 首先, 需要找到无法访问的标签(unreachable tag):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fsck --unreachable | grep tag</span><br></pre></td></tr></table></figure><p>记下这个标签(tag)的hash，然后用Git的 <a href="http://git-scm.com/docs/git-update-ref" target="_blank" rel="noopener">update-ref</a>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git update-ref refs/tags/&lt;tag_name&gt; &lt;<span class="built_in">hash</span>&gt;</span><br></pre></td></tr></table></figure><p>这时你的标签(tag)应该已经恢复了。</p><h2 id="已删除补丁"><a class="markdownIt-Anchor" href="#已删除补丁"></a> 已删除补丁</h2><p>如果某人在 GitHub 上给你发了一个pull request, 但是然后他删除了他自己的原始 fork, 你将没法克隆他们的提交(commit)或使用 <code>git am</code>。在这种情况下, 最好手动的查看他们的提交(commit)，并把它们拷贝到一个本地新分支，然后做提交。</p><p>做完提交后, 再修改作者，参见<a href="#commit-wrong-author">变更作者</a>。 然后, 应用变化, 再发起一个新的pull request。</p><h1 id="跟踪文件tracking-files"><a class="markdownIt-Anchor" href="#跟踪文件tracking-files"></a> 跟踪文件(Tracking Files)</h1><h2 id="只想改变一个文件名字的大小写而不修改内容"><a class="markdownIt-Anchor" href="#只想改变一个文件名字的大小写而不修改内容"></a> 只想改变一个文件名字的大小写，而不修改内容</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git mv --force myfile MyFile</span><br></pre></td></tr></table></figure><h2 id="想从git删除一个文件但保留该文件"><a class="markdownIt-Anchor" href="#想从git删除一个文件但保留该文件"></a> 想从Git删除一个文件，但保留该文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git rm --cached log.txt</span><br></pre></td></tr></table></figure><h1 id="配置configuration"><a class="markdownIt-Anchor" href="#配置configuration"></a> 配置(Configuration)</h1><h2 id="想给一些git命令添加别名"><a class="markdownIt-Anchor" href="#想给一些git命令添加别名"></a> 想给一些Git命令添加别名</h2><p>在 OS X 和 Linux 下, 你的 Git的配置文件储存在 <figure class="highlight plain"><figcaption><span>部分添加了一些快捷别名(和一些我容易拼写错误的)，如下:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```vim</span><br><span class="line">[alias]</span><br><span class="line">    a = add</span><br><span class="line">    amend = commit --amend</span><br><span class="line">    c = commit</span><br><span class="line">    ca = commit --amend</span><br><span class="line">    ci = commit -a</span><br><span class="line">    co = checkout</span><br><span class="line">    d = diff</span><br><span class="line">    dc = diff --changed</span><br><span class="line">    ds = diff --staged</span><br><span class="line">    f = fetch</span><br><span class="line">    loll = log --graph --decorate --pretty=oneline --abbrev-commit</span><br><span class="line">    m = merge</span><br><span class="line">    one = log --pretty=oneline</span><br><span class="line">    outstanding = rebase -i @&#123;u&#125;</span><br><span class="line">    s = status</span><br><span class="line">    unpushed = log @&#123;u&#125;</span><br><span class="line">    wc = whatchanged</span><br><span class="line">    wip = rebase -i @&#123;u&#125;</span><br><span class="line">    zap = fetch -p</span><br></pre></td></tr></table></figure></p><h2 id="想缓存一个仓库的用户名和密码"><a class="markdownIt-Anchor" href="#想缓存一个仓库的用户名和密码"></a> 想缓存一个仓库的用户名和密码</h2><p>你可能有一个仓库需要授权，这时你可以缓存用户名和密码，而不用每次推/拉(push/pull)的时候都输入，Credential helper能帮你。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global credential.helper cache</span><br><span class="line"><span class="comment"># Set git to use the credential memory cache</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global credential.helper <span class="string">'cache --timeout=3600'</span></span><br><span class="line"><span class="comment"># Set the cache to timeout after 1 hour (setting is in seconds)</span></span><br></pre></td></tr></table></figure><h1 id="不知道我做错了些什么"><a class="markdownIt-Anchor" href="#不知道我做错了些什么"></a> 不知道我做错了些什么</h1><p>你把事情搞砸了：你 <code>重置(reset)</code> 了一些东西, 或者你合并了错误的分支, 亦或你强推了后找不到你自己的提交(commit)了。有些时候, 你一直都做得很好, 但你想回到以前的某个状态。</p><p>这就是 <code>git reflog</code> 的目的， <code>reflog</code> 记录对分支顶端(the tip of a branch)的任何改变, 即使那个顶端没有被任何分支或标签引用。基本上, 每次HEAD的改变, 一条新的记录就会增加到<code>reflog</code>。遗憾的是，这只对本地分支起作用，且它只跟踪动作 (例如，不会跟踪一个没有被记录的文件的任何改变)。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(master)$ git reflog</span><br><span class="line">0a2e358 HEAD@&#123;0&#125;: reset: moving to HEAD~2</span><br><span class="line">0254ea7 HEAD@&#123;1&#125;: checkout: moving from 2.2 to master</span><br><span class="line">c10f740 HEAD@&#123;2&#125;: checkout: moving from master to 2.2</span><br></pre></td></tr></table></figure><p>上面的reflog展示了从master分支签出(checkout)到2.2 分支，然后再签回。 那里，还有一个硬重置(hard reset)到一个较旧的提交。最新的动作出现在最上面以 <code>HEAD@{0}</code>标识.</p><p>如果事实证明你不小心回移(move back)了提交(commit), reflog 会包含你不小心回移前master上指向的提交(0254ea7)。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard 0254ea7</span><br></pre></td></tr></table></figure><p>然后使用git reset就可以把master改回到之前的commit，这提供了一个在历史被意外更改情况下的安全网。</p><p>(<a href="https://www.atlassian.com/git/tutorials/rewriting-history/git-reflog" target="_blank" rel="noopener">摘自</a>).</p><h1 id="其它资源other-resources"><a class="markdownIt-Anchor" href="#其它资源other-resources"></a> 其它资源(Other Resources)</h1><h2 id="书books"><a class="markdownIt-Anchor" href="#书books"></a> 书(Books)</h2><ul><li><a href="https://git-scm.com/book/en/v2" target="_blank" rel="noopener">Pro Git</a> - Scott Chacon’s excellent git book</li><li><a href="https://github.com/pluralsight/git-internals-pdf" target="_blank" rel="noopener">Git Internals</a> - Scott Chacon’s other excellent git book</li></ul><h2 id="教程tutorials"><a class="markdownIt-Anchor" href="#教程tutorials"></a> 教程(Tutorials)</h2><ul><li><a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">Learn Git branching</a> 一个基于网页的交互式 branching/merging/rebasing 教程</li><li><a href="https://medium.com/@porteneuve/getting-solid-at-git-rebase-vs-merge-4fa1a48c53aa" target="_blank" rel="noopener">Getting solid at Git rebase vs. merge</a></li><li><a href="https://github.com/asmeurer/git-workflow" target="_blank" rel="noopener">git-workflow</a> - <a href="https://github.com/asmeurer" target="_blank" rel="noopener">Aaron Meurer</a>的怎么使用Git为开源仓库贡献</li><li><a href="http://hugogiraudel.com/2015/08/13/github-as-a-workflow/" target="_blank" rel="noopener">GitHub as a workflow</a> - 使用GitHub做为工作流的趣事, 尤其是空PRs</li></ul><h2 id="脚本和工具scripts-and-tools"><a class="markdownIt-Anchor" href="#脚本和工具scripts-and-tools"></a> 脚本和工具(Scripts and Tools)</h2><ul><li><a href="http://firstaidgit.io/" target="_blank" rel="noopener">firstaidgit.io</a> 一个可搜索的最常被问到的Git的问题</li><li><a href="https://github.com/unixorn/git-extra-commands" target="_blank" rel="noopener">git-extra-commands</a> - 一堆有用的额外的Git脚本</li><li><a href="https://github.com/tj/git-extras" target="_blank" rel="noopener">git-extras</a> - GIT 工具集 – repo summary, repl, changelog population, author commit percentages and more</li><li><a href="https://github.com/qw3rtman/git-fire" target="_blank" rel="noopener">git-fire</a> - git-fire 是一个 Git 插件，用于帮助在紧急情况下添加所有当前文件, 做提交(committing), 和推(push)到一个新分支(阻止合并冲突)。</li><li><a href="https://github.com/git-tips/tips" target="_blank" rel="noopener">git-tips</a> - Git小提示</li><li><a href="https://github.com/Originate/git-town" target="_blank" rel="noopener">git-town</a> - 通用，高级Git工作流支持！ <a href="http://www.git-town.com" target="_blank" rel="noopener">http://www.git-town.com</a></li></ul><h2 id="gui客户端gui-clients"><a class="markdownIt-Anchor" href="#gui客户端gui-clients"></a> GUI客户端(GUI Clients)</h2><ul><li><a href="https://www.gitkraken.com/" target="_blank" rel="noopener">GitKraken</a> - 豪华的Git客户端 Windows, Mac &amp; Linux</li><li><a href="https://git-cola.github.io/" target="_blank" rel="noopener">git-cola</a> - 另外一个Git客户端 Windows &amp; OS X</li><li><a href="https://github.com/git-up/GitUp" target="_blank" rel="noopener">GitUp</a> - 一个新的Git客户端，在处理Git的复杂性上有自己的特点</li><li><a href="https://rowanj.github.io/gitx/" target="_blank" rel="noopener">gitx-dev</a> - 图形化的Git客户端 OS X</li><li><a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">Source Tree</a> - 免费的图形化Git客户端 Windows &amp; OS X</li><li><a href="http://www.git-tower.com/" target="_blank" rel="noopener">Tower</a> - 图形化Git客户端 OS X(付费)</li><li><a href="https://www.syntevo.com/smartgit/" target="_blank" rel="noopener">SmartGit</a> - 推荐，对个人用户免费</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;图形化客户端强烈推荐：&lt;a href=&quot;https://www.syntevo.com/smartgit/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SmartGit&lt;/a&gt;， 本文是基于&lt;a href=&quot;https://gi
      
    
    </summary>
    
      <category term="飞行手册" scheme="http://ruanxinyu.github.io/categories/%E9%A3%9E%E8%A1%8C%E6%89%8B%E5%86%8C/"/>
    
    
      <category term="飞行手册" scheme="http://ruanxinyu.github.io/tags/%E9%A3%9E%E8%A1%8C%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下Mysql+Keepalived双主热备高可用环境的搭建</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Ubuntu%E4%B8%8BMysql-Keepalived%E5%8F%8C%E4%B8%BB%E7%83%AD%E5%A4%87%E9%AB%98%E5%8F%AF%E7%94%A8%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://ruanxinyu.github.io/posts/技术文档/Ubuntu下Mysql-Keepalived双主热备高可用环境的搭建/</id>
    <published>2018-10-04T04:50:27.000Z</published>
    <updated>2018-10-05T15:15:52.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql复制模式及原理"><a class="markdownIt-Anchor" href="#mysql复制模式及原理"></a> Mysql复制模式及原理</h1><p>Mysql内建的复制功能是构建大型，高性能应用程序的基础。Mysql将数据库的更改写入到二进制日志文件，而复制功能就是基于该日志完成的。Mysql的二进制日志格式也有三种：STATEMENT，ROW，MIXED。对应的是Mysql的三种复制模式.</p><h2 id="复制原理"><a class="markdownIt-Anchor" href="#复制原理"></a> 复制原理</h2><p>master服务器将数据的改变记录二进制binlog日志，当master上的数据发生改变时，则将其改变写入二进制日志中；salve服务器会在一定时间间隔内对master二进制日志进行探测其是否发生改变，如果发生改变，则开始一个I/OThread请求master二进制事件，同时主节点为每个I/O线程启动一个dump线程，用于向其发送二进制事件，并保存至从节点本地的中继日志中，从节点将启动SQL线程从中继日志中读取二进制日志，在本地重放，使得其数据和主节点的保持一致，最后I/OThread和SQLThread将进入睡眠状态，等待下一次被唤醒。过程如下：</p><img src="/posts/技术文档/Ubuntu下Mysql-Keepalived双主热备高可用环境的搭建/2018-10-04-20-43-35.png" title="[blog.ruanxinyu.cn]"><p>注意几点：</p><ul><li>master将操作语句记录到binlog日志中，然后授予slave远程连接的权限（master一定要开启binlog二进制日志功能；通常为了数据安全考虑，slave也开启binlog功能）。</li><li>slave开启两个线程：IO线程和SQL线程。其中：IO线程负责读取master的binlog内容到中继日志relay log里；SQL线程负责从relay log日志里读出binlog内容，并更新到slave的数据库里，这样就能保证slave数据和master数据保持一致了。</li><li>Mysql复制至少需要两个Mysql的服务，当然Mysql服务可以分布在不同的服务器上，也可以在一台服务器上启动多个服务。</li><li>Mysql复制最好确保master和slave服务器上的Mysql版本相同（如果不能满足版本一致，那么要保证master主节点的版本低于slave从节点的版本）</li><li>master和slave两节点间时间需同步</li><li>主服务写入日志和从数据库回访日志都是串行的</li></ul><blockquote><p>注意：所有对表的操作都需要在主服务器上操作，否则会造成数据冲突</p></blockquote><h2 id="基于sql语句的复制sbr"><a class="markdownIt-Anchor" href="#基于sql语句的复制sbr"></a> 基于SQL语句的复制(SBR)</h2><p>基于SQL语句的复制(statement-based replication, SBR)的优点有：</p><ol><li>产生的binlog文件较小，比较节省空间</li><li>binlog既可以用来复制，也可以用于实时的还原</li><li>主从版本可以不一样，从服务器版本可以比主服务器版本高。</li></ol><p>缺点有：</p><ol><li>不是所有的UPDATE语句都能被复制，尤其是包含不确定操作的时候。</li><li>调用具有不确定因素的 UDF 时复制也可能出问题，比如<code>LOAD_FILE()</code>，<code>UUID()</code>，<code>USER()</code>，<code>FOUND_ROWS()</code>，<code>SYSDATE()</code></li><li><code>INSERT ... SELECT</code> 会产生比 RBR 更多的行级锁</li></ol><h2 id="基于行的复制rbr"><a class="markdownIt-Anchor" href="#基于行的复制rbr"></a> 基于行的复制(RBR)</h2><p>基于行的复制(row-based replication, RBR)的优点有：</p><ol><li>任何情况都可以被复制，这对复制来说是最安全可靠的</li><li>多数情况下，从服务器上的表如果有主键的话，复制就会快了很多</li><li>执行 INSERT，UPDATE，DELETE 语句时锁更少</li><li>从服务器上采用多线程来执行复制成为可能</li></ol><p>缺点有：</p><ol><li>binlog 文件太大</li><li>复杂的回滚时 binlog 中会包含大量的数据</li><li>主服务器上执行 UPDATE 语句时，所有发生变化的记录都会写到 binlog 中，而 SBR 只会写一次，这会导致频繁发生 binlog 的并发写问题</li><li>UDF 产生的大 BLOB 值会导致复制变慢</li><li>无法从 binlog 中看到都复制了写什么语句，无法进行审计</li></ol><h2 id="混合模式复制mbr"><a class="markdownIt-Anchor" href="#混合模式复制mbr"></a> 混合模式复制(MBR)</h2><p>混合模式复制(mixed-based replication, MBR)</p><h2 id="解决的问题"><a class="markdownIt-Anchor" href="#解决的问题"></a> 解决的问题</h2><p>Mysql支持主从复制模式和主主复制模式，能够解决以下的问题：</p><ol><li>数据分布 (Data distribution )</li><li>负载平衡(load balancing)</li><li>数据备份(Backups) ，保证数据安全</li><li>高可用性和容错行(High availability and failover)</li><li>实现读写分离，缓解数据库压力</li></ol><h1 id="基础环境说明"><a class="markdownIt-Anchor" href="#基础环境说明"></a> 基础环境说明</h1><p>本次教程搭建的架构图如下所示，通过Mysql的主从同步实现数据的同步，通过KeepAlived实现Mysql的故障时的自动切换，其中为<code>192.168.1.132</code>和<code>192.168.1.133</code>，VIP为<code>192.168.1.134</code>。</p><img src="/posts/技术文档/Ubuntu下Mysql-Keepalived双主热备高可用环境的搭建/2018-10-05-19-29-21.png" title="[blog.ruanxinyu.cn]"><ol><li>使用的Ubuntu是<code>18.04.1</code>版本：</li><li>使用的Mysql是<code>8.0.12</code>版本：</li><li>使用的KeepAlived是<code>2.0.7</code>版本：</li></ol><h1 id="mysql的主从同步设置"><a class="markdownIt-Anchor" href="#mysql的主从同步设置"></a> Mysql的主从同步设置</h1><ol><li>用户配置文件位置：<code>/etc/mysql/my.cnf</code></li><li>pid文件位置：<code>/var/run/mysqld/mysqld.pid</code></li><li>socket文件位置：<code>/var/run/mysqld/mysqld.sock</code></li><li>数据目录： <code>/var/lib/mysql</code></li><li>错误日志文件： <code>/var/log/mysql/error.log</code></li></ol><h2 id="配置mycnf文件"><a class="markdownIt-Anchor" href="#配置mycnf文件"></a> 配置my.cnf文件</h2><p>Mysql_01(<code>192.168.1.132</code>)编辑<code>sudo vim /etc/mysql/my.cnf</code>文件，添加如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="built_in">log</span>-bin=mysql-bin</span><br><span class="line">relay_log=mysql-relay-bin</span><br><span class="line">server-id=1</span><br><span class="line">log_slave_updates=1</span><br></pre></td></tr></table></figure><p>Mysql_02(<code>192.168.1.133</code>)编辑<code>sudo vim /etc/mysql/my.cnf</code>文件，添加如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="built_in">log</span>-bin=mysql-bin</span><br><span class="line">relay_log=mysql-relay-bin</span><br><span class="line">server-id=2</span><br><span class="line">log_slave_updates=1</span><br></pre></td></tr></table></figure><p>上述配置mysql的二进制日志的名称为<code>mysql-bin</code>，采用的是相对目录，具体绝对目录可以通过执行<code>show variables like 'log_%';</code>得到，如下所示</p><img src="/posts/技术文档/Ubuntu下Mysql-Keepalived双主热备高可用环境的搭建/2018-10-05-21-11-21.png" title="[blog.ruanxinyu.cn]"><p>如上述配置指定了<code>relay_log</code>的值，否则mysql会自动根据主机的hostname命名，如果修改hostname的话可能就会出问题，在error.log中也可以看到对应的警告：</p><img src="/posts/技术文档/Ubuntu下Mysql-Keepalived双主热备高可用环境的搭建/2018-10-05-21-31-11.png" title="[blog.ruanxinyu.cn]"><h2 id="创建复制用户"><a class="markdownIt-Anchor" href="#创建复制用户"></a> 创建复制用户</h2><p>Mysql_01(<code>192.168.1.132</code>)中执行<code>mysql -u root -p</code>进入到mysql的控制台执行如下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'repl'</span>@<span class="string">'192.168.1.133'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'mysql'</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">REPLICATION</span> <span class="keyword">SLAVE</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'repl'</span>@<span class="string">'192.168.1.133'</span>;</span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure><p>Mysql_02(<code>192.168.1.133</code>)中执行<code>mysql -u root -p</code>进入到mysql的控制台执行如下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'repl'</span>@<span class="string">'192.168.1.132'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'mysql'</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">REPLICATION</span> <span class="keyword">SLAVE</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'repl'</span>@<span class="string">'192.168.1.132'</span>;</span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure><img src="/posts/技术文档/Ubuntu下Mysql-Keepalived双主热备高可用环境的搭建/2018-10-05-20-57-56.png" title="[blog.ruanxinyu.cn]"><h2 id="执行change-master-to语句"><a class="markdownIt-Anchor" href="#执行change-master-to语句"></a> 执行CHANGE MASTER TO语句</h2><p>Mysql_01(<code>192.168.1.132</code>)中执行<code>mysql -u root -p</code>进入到mysql的控制台执行如下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CHANGE</span> <span class="keyword">MASTER</span> <span class="keyword">TO</span></span><br><span class="line">  MASTER_HOST=<span class="string">'192.168.1.133'</span>,</span><br><span class="line">  MASTER_USER=<span class="string">'repl'</span>,</span><br><span class="line">  MASTER_PASSWORD=<span class="string">'mysql'</span>,</span><br><span class="line">  MASTER_LOG_FILE=<span class="string">'mysql-bin.000001'</span>,</span><br><span class="line">  MASTER_LOG_POS=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>Mysql_02(<code>192.168.1.133</code>)中执执行<code>mysql -u root -p</code>进入到mysql的控制台执行如下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CHANGE</span> <span class="keyword">MASTER</span> <span class="keyword">TO</span></span><br><span class="line">  MASTER_HOST=<span class="string">'192.168.1.132'</span>,</span><br><span class="line">  MASTER_USER=<span class="string">'repl'</span>,</span><br><span class="line">  MASTER_PASSWORD=<span class="string">'mysql'</span>,</span><br><span class="line">  MASTER_LOG_FILE=<span class="string">'mysql-bin.000001'</span>,</span><br><span class="line">  MASTER_LOG_POS=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><code>MASTER_LOG_FILE</code>用来指定初始复制时的mysql1中的binlog文件， <code>MASTER_LOG_POS</code>用来指定初始复制时binlog文件的位置</p><h2 id="重启并查看同步状态"><a class="markdownIt-Anchor" href="#重启并查看同步状态"></a> 重启并查看同步状态</h2><ol><li><code>sudo systemctl restart mysql.service</code>重启mysql</li><li><code>mysql -u root -p</code>进入到mysql的控制台执行<code>start slave;</code></li><li>通过<code>show slave status\G;</code>查看启动状态，如果出现下面的内容则表示成功</li></ol><img src="/posts/技术文档/Ubuntu下Mysql-Keepalived双主热备高可用环境的搭建/2018-10-05-22-29-06.png" title="[blog.ruanxinyu.cn]"><h1 id="keepalived的配置"><a class="markdownIt-Anchor" href="#keepalived的配置"></a> KeepAlived的配置</h1><p>Keepalived的安装请参考：。配置文件主要有如下几点变化：</p><ol><li>两台机器的<code>state</code>都设置为<code>BACKUP</code>，同时<code>nopreempt</code>配置，可以防止切换到从库后，主keepalived恢复后自动切换回主库</li><li><code>virtual_ipaddress</code>改为<code>192.168.1.134</code></li><li><code>vrrp_script</code>中的命令改为<code>netstat -na | grep LISTEN | grep 3306 || killall keepalived</code></li></ol><p>**特别说明: **</p><blockquote><p>此处仅仅简单的通过检查<code>33060</code>端口来判断mysql是否正常。你可以可以根据自己的需求，将该脚本设计的更复杂一些。比如根据数据库的插入、删除等是否可用、主从线程是否开启等进行细分。提高检测的精准度。</p></blockquote><p>Mysql_01(<code>192.168.1.132</code>)中KeepAlived的配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">vrrp_script chk_service_ok &#123;</span><br><span class="line">       script <span class="string">"netstat -na | grep LISTEN | grep 3306 || killall keepalived"</span></span><br><span class="line">       interval 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    interface enp0s3</span><br><span class="line">    state BACKUP    <span class="comment"># 通过下面的priority来区分MASTER和BACKUP，也只有如此，底下的nopreempt才有效</span></span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    nopreempt   <span class="comment"># 防止切换到从库后，主keepalived恢复后自动切换回主库</span></span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.1.134/24</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">       chk_service_ok</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mysql_02(<code>192.168.1.133</code>)中KeepAlived的配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">vrrp_script chk_service_ok &#123;</span><br><span class="line">       script <span class="string">"netstat -na | grep LISTEN | grep 3306 || killall keepalived"</span></span><br><span class="line">       interval 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    interface enp0s3</span><br><span class="line">    state BACKUP    <span class="comment"># 通过下面的priority来区分MASTER和BACKUP，也只有如此，底下的nopreempt才有效</span></span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 80</span><br><span class="line">    nopreempt   <span class="comment"># 防止切换到从库后，主keepalived恢复后自动切换回主库</span></span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.1.134/24</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">       chk_service_ok</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完毕之后执行<code>sudo systemctl restart keepalived</code>重新启动keepalived。</p><h1 id="功能验证"><a class="markdownIt-Anchor" href="#功能验证"></a> 功能验证</h1><h2 id="正常情况下的验证"><a class="markdownIt-Anchor" href="#正常情况下的验证"></a> 正常情况下的验证</h2><p>首先，通过<code>ip a</code>可以看到VIP在Mysql_01(<code>192.168.1.132</code>)上：</p><img src="/posts/技术文档/Ubuntu下Mysql-Keepalived双主热备高可用环境的搭建/2018-10-05-22-53-36.png" title="[blog.ruanxinyu.cn]"><p>在Mysql_01(<code>192.168.1.132</code>)上执行<code>mysql -u root -p</code>进入到mysql的控制台， 创建数据库<code>create database database_01;</code>;<br>在Mysql_02(<code>192.168.1.133</code>)上执行<code>mysql -u root -p</code>进入到mysql的控制台， 创建数据库<code>create database database_02;</code>;</p><p>然后分别在两台机器上执行<code>show databases；</code>，可以看到两台mysql中都包含<code>database_01</code>和<code>database_02</code>，说明mysql的主主同步生效。</p><img src="/posts/技术文档/Ubuntu下Mysql-Keepalived双主热备高可用环境的搭建/2018-10-05-22-59-11.png" title="[blog.ruanxinyu.cn]"><h2 id="异常恢复下的验证"><a class="markdownIt-Anchor" href="#异常恢复下的验证"></a> 异常恢复下的验证</h2><p>Mysql_01(<code>192.168.1.132</code>)上执行<code>sudo systemctl stop mysql.service</code>停止mysql以模拟故障，此时可以看到VIP(<code>192.168.1.134</code>)已经漂移到mysql_02上，我们ssh连接VIP并往数据库中创建一个数据库<code>create database database_vip;</code>，可以看到是可以正常创建的，说明keepalived已经能保证mysql的高可用。</p><img src="/posts/技术文档/Ubuntu下Mysql-Keepalived双主热备高可用环境的搭建/2018-10-05-23-09-29.png" title="[blog.ruanxinyu.cn]"><p>此时我们重新启动Mysql_01(<code>192.168.1.132</code>)以模拟故障恢复，此时发现VIP还在mysql_02上，同时Mysql_01的数据库中也已经存在<code>database_vip</code>数据库。说明故障恢复后数据仍旧能够正常同步。</p><img src="/posts/技术文档/Ubuntu下Mysql-Keepalived双主热备高可用环境的搭建/2018-10-05-23-12-07.png" title="[blog.ruanxinyu.cn]"><h1 id="常见操作说明"><a class="markdownIt-Anchor" href="#常见操作说明"></a> 常见操作说明</h1><h2 id="彻底解除主从复制关系"><a class="markdownIt-Anchor" href="#彻底解除主从复制关系"></a> 彻底解除主从复制关系</h2><ol><li><code>stop slave</code></li><li><code>reset slave</code>; 或直接删除<code>master.info</code>和<code>relay-log.info</code>这两个文件</li><li>修改<code>my.cnf</code>删除主从相关配置参数</li></ol><h2 id="让slave不随mysql自动启动"><a class="markdownIt-Anchor" href="#让slave不随mysql自动启动"></a> 让slave不随MySQL自动启动</h2><p>修改<code>my.cnf</code>, 在<code>[mysqld]</code>中增加<code>skip-slave-start</code>选项</p><h2 id="数据备份的快速恢复"><a class="markdownIt-Anchor" href="#数据备份的快速恢复"></a> 数据备份的快速恢复</h2><p>执行如下命令备份，可以保留 <code>file</code> 和 <code>position</code> 的信息，在新搭建一个slave的时候，还原完数据库， <code>file</code> 和 <code>position</code> 的信息也随之更新，接着再<code>start slave</code> 就可以很迅速的完成增量同步：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump <span class="comment">--master-data --single-transaction --user=username --password=password dbname&gt; dumpfilename</span></span><br></pre></td></tr></table></figure><h2 id="如何限制复制哪些数据库"><a class="markdownIt-Anchor" href="#如何限制复制哪些数据库"></a> 如何限制复制哪些数据库</h2><ol><li>在执行<code>grant</code>授权的时候就限定数据库</li><li>在主服务器上限定<code>binlog_do_db = 数据库名</code></li><li>主服务器上不限定数据库，在从服务器上限定<code>replicate-do-db = 数据库名</code></li></ol><h2 id="修改log-bin和relay_log后重启报错"><a class="markdownIt-Anchor" href="#修改log-bin和relay_log后重启报错"></a> 修改<code>log-bin</code>和<code>relay_log</code>后重启报错</h2><p>先执行<code>reset slave</code>，然后执行<code>start slave</code>即可。</p><h2 id="日志出现warning-ip-address-xxxx-could-not-be-resolved-name-or-service-not-known"><a class="markdownIt-Anchor" href="#日志出现warning-ip-address-xxxx-could-not-be-resolved-name-or-service-not-known"></a> 日志出现<code>[Warning] IP address 'xxxx' could not be resolved: Name or service not known</code></h2><p>mysql默认会反向解析DNS，对于访问者Mysql不会判断是hosts还是ip都会进行dns反向解析，我们可以通过在<code>my.cnf</code>中添加<code>skip-name-resolve</code>禁用dns反查即可。</p><h2 id="主备同步报fatal-error-the-slave-io-thread-stops-because-master-and-slave-have-equal-mysql-server-uuids"><a class="markdownIt-Anchor" href="#主备同步报fatal-error-the-slave-io-thread-stops-because-master-and-slave-have-equal-mysql-server-uuids"></a> 主备同步报：<code>Fatal error: The slave I/O thread stops because master and slave have equal MySQL server UUIDs</code></h2><p>是因为数据目录下的<code>/var/lib/mysql/auto.cnf</code>文件是一样导致的，我们可以删除备机上的该文件，然后重启mysql</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mysql复制模式及原理&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#mysql复制模式及原理&quot;&gt;&lt;/a&gt; Mysql复制模式及原理&lt;/h1&gt;
&lt;p&gt;Mysql内建的复制功能是构建大型，高性能应用程序的基础。Mysql将数据库的更改写
      
    
    </summary>
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript学习记录-1</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/TypeScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-1/"/>
    <id>http://ruanxinyu.github.io/posts/技术文档/TypeScript学习记录-1/</id>
    <published>2018-10-04T02:08:09.000Z</published>
    <updated>2018-10-14T09:09:44.388Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装和编译"><a class="markdownIt-Anchor" href="#安装和编译"></a> 安装和编译</h1><p>使用npm进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure><p>使用<code>tsc</code>可以将ts文件编译为js文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc greeter.ts</span><br></pre></td></tr></table></figure><h1 id="变量类型"><a class="markdownIt-Anchor" href="#变量类型"></a> 变量类型</h1><p>官方文档地址为：<a href="http://www.typescriptlang.org/docs/handbook/basic-types.html" target="_blank" rel="noopener">http://www.typescriptlang.org/docs/handbook/basic-types.html</a>。基本的数据类型及使用如下所示：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// number</span></span><br><span class="line"><span class="keyword">let</span> decimal: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> hex: <span class="built_in">number</span> = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="keyword">let</span> binary: <span class="built_in">number</span> = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> octal: <span class="built_in">number</span> = <span class="number">0o744</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串即字符串中的变量引用</span></span><br><span class="line"><span class="keyword">let</span> fullName: <span class="built_in">string</span> = <span class="string">`Bob Bobbington`</span>;</span><br><span class="line"><span class="keyword">let</span> age: <span class="built_in">number</span> = <span class="number">37</span>;</span><br><span class="line"><span class="keyword">let</span> sentence: <span class="built_in">string</span> = <span class="string">`Hello, my name is <span class="subst">$&#123; fullName &#125;</span>.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I'll be <span class="subst">$&#123; age + 1 &#125;</span> years old next month.`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元组</span></span><br><span class="line"><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">"hello"</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举</span></span><br><span class="line"><span class="keyword">enum</span> Color &#123;Red = <span class="number">1</span>, Green, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br></pre></td></tr></table></figure><p>还有其他的类型包括：<code>any</code>, <code>void</code>, <code>null</code>, <code>undifined</code>, <code>never</code>, <code>object</code>。</p><h1 id="变量声明"><a class="markdownIt-Anchor" href="#变量声明"></a> 变量声明</h1><p>变量的声明有3个关键字<code>var</code>, <code>let</code>, <code>const</code>。</p><ul><li>定义要尽可能使用<code>let</code>，而不是<code>var</code></li><li><code>const</code>是针对不可以重新复制的变量</li><li><code>object</code>的声明与json的定义方式是一样的</li></ul><h2 id="默认值"><a class="markdownIt-Anchor" href="#默认值"></a> 默认值</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keepWholeObject</span>(<span class="params">wholeObject: &#123; a: <span class="built_in">string</span>, b?: <span class="built_in">number</span> &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; a, b = <span class="number">1001</span> &#125; = wholeObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数声明"><a class="markdownIt-Anchor" href="#函数声明"></a> 函数声明</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> C = &#123; a: <span class="built_in">string</span>, b?: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">&#123; a, b &#125;: C</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function f(&#123; a, b = 0 &#125; = &#123; a: "" &#125;): void &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">f(&#123; a: <span class="string">"yes"</span> &#125;); <span class="comment">// ok, default b = 0</span></span><br><span class="line">f(); <span class="comment">// ok, default to &#123; a: "" &#125;, which then defaults b = 0</span></span><br><span class="line">f(&#123;&#125;); <span class="comment">// error, 'a' is required if you supply an argument</span></span><br></pre></td></tr></table></figure><h2 id="spread"><a class="markdownIt-Anchor" href="#spread"></a> Spread</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> first = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> second = [<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> bothPlus = [<span class="number">0</span>, ...first, ...second, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">let</span> defaults = &#123; food: <span class="string">"spicy"</span>, price: <span class="string">"$$"</span>, ambiance: <span class="string">"noisy"</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> search = &#123; ...defaults, food: <span class="string">"rich"</span> &#125;;</span><br></pre></td></tr></table></figure><h1 id="接口"><a class="markdownIt-Anchor" href="#接口"></a> 接口</h1><p>通过<code>interface</code>定义接口，只要校验传进来的参数是否包含接口中的变量，则认为传进来的参数与接口是兼容的。可以通过<code>?</code>来指定是否是函数的可选参数，通过<code>readonly</code>来指定参数是只读的。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SquareConfig &#123;</span><br><span class="line">    color?: <span class="built_in">string</span>;</span><br><span class="line">    width?: <span class="built_in">number</span>;</span><br><span class="line">    readonly height?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSquare</span>(<span class="params">config: SquareConfig</span>): </span>&#123; color: <span class="built_in">string</span>; area: <span class="built_in">number</span> &#125; &#123;</span><br><span class="line">    <span class="keyword">let</span> newSquare = &#123;color: <span class="string">"white"</span>, area: <span class="number">100</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (config.clor) &#123;</span><br><span class="line">        <span class="comment">// Error: Property 'clor' does not exist on type 'SquareConfig'</span></span><br><span class="line">        newSquare.color = config.clor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (config.width) &#123;</span><br><span class="line">        newSquare.area = config.width * config.width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newSquare;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mySquare = createSquare(&#123;color: <span class="string">"black"</span>&#125;);</span><br><span class="line">Readonly properties</span><br></pre></td></tr></table></figure><p>接口中也是可以定义函数的。</p><p>接口可以通过<code>extends</code>来继承</p><h1 id="类"><a class="markdownIt-Anchor" href="#类"></a> 类</h1><ul><li>通过<code>class</code>定义类，通过<code>implements</code>实现接口</li><li>通过<code>constructor</code>来定义构造函数</li><li>支持getter/setter方法</li><li>支持<code>static</code>关键字</li><li>支持<code>abstract</code>关键字</li></ul><h1 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h1><p>多参数支持</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, ...restOfName: <span class="built_in">string</span>[]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">" "</span> + restOfName.join(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> employeeName = buildName(<span class="string">"Joseph"</span>, <span class="string">"Samuel"</span>, <span class="string">"Lucas"</span>, <span class="string">"MacKinzie"</span>);</span><br></pre></td></tr></table></figure><h2 id="this和箭头函数"><a class="markdownIt-Anchor" href="#this和箭头函数"></a> this和箭头函数</h2><p><strong>Arrow functions capture the this where the function is created rather than where it is invoked.</strong> 所以在定义函数的时候尽量使用箭头函数，如果使用this的时候提示是<code>any</code>类型，可以显性的传入this变量</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Card &#123;</span><br><span class="line">    suit: <span class="built_in">string</span>;</span><br><span class="line">    card: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Deck &#123;</span><br><span class="line">    suits: <span class="built_in">string</span>[];</span><br><span class="line">    cards: <span class="built_in">number</span>[];</span><br><span class="line">    createCardPicker(<span class="keyword">this</span>: Deck): <span class="function"><span class="params">()</span> =&gt;</span> Card;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> deck: Deck = &#123;</span><br><span class="line">    suits: [<span class="string">"hearts"</span>, <span class="string">"spades"</span>, <span class="string">"clubs"</span>, <span class="string">"diamonds"</span>],</span><br><span class="line">    cards: <span class="built_in">Array</span>(<span class="number">52</span>),</span><br><span class="line">    <span class="comment">// 显性的传入this</span></span><br><span class="line">    createCardPicker: <span class="function"><span class="keyword">function</span>(<span class="params"><span class="keyword">this</span>: Deck</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 是哟弄个箭头函数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">52</span>);</span><br><span class="line">            <span class="keyword">let</span> pickedSuit = <span class="built_in">Math</span>.floor(pickedCard / <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;suit: <span class="keyword">this</span>.suits[pickedSuit], card: pickedCard % <span class="number">13</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cardPicker = deck.createCardPicker();</span><br><span class="line"><span class="keyword">let</span> pickedCard = cardPicker();</span><br><span class="line"></span><br><span class="line">alert(<span class="string">"card: "</span> + pickedCard.card + <span class="string">" of "</span> + pickedCard.suit);</span><br></pre></td></tr></table></figure><h1 id="泛型"><a class="markdownIt-Anchor" href="#泛型"></a> 泛型</h1><p>函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity: &#123;&lt;T&gt;(arg: T): T&#125; = identity;</span><br></pre></td></tr></table></figure><p>// 类</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> GenericNumber&lt;T&gt; &#123;</span><br><span class="line">    zeroValue: T;</span><br><span class="line">    add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenericNumber&lt;<span class="built_in">number</span>&gt;();</span><br></pre></td></tr></table></figure><p>类继承</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Lengthwise &#123;</span><br><span class="line">    length: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);  <span class="comment">// Now we know it has a .length property, so no more error</span></span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装和编译&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#安装和编译&quot;&gt;&lt;/a&gt; 安装和编译&lt;/h1&gt;
&lt;p&gt;使用npm进行安装：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
      <category term="学习记录" scheme="http://ruanxinyu.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="学习记录" scheme="http://ruanxinyu.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins的安装与使用</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Jenkins%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://ruanxinyu.github.io/posts/技术文档/Jenkins的安装与使用/</id>
    <published>2018-10-03T09:01:53.000Z</published>
    <updated>2018-10-20T14:15:05.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jenkins的介绍"><a class="markdownIt-Anchor" href="#jenkins的介绍"></a> Jenkins的介绍</h1><p>官方地址为：<a href="https://jenkins.io/" target="_blank" rel="noopener">https://jenkins.io/</a>。Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。</p><h1 id="jenkins的安装"><a class="markdownIt-Anchor" href="#jenkins的安装"></a> Jenkins的安装</h1><blockquote><p>在启动之前需要先安装java环境，具体可以参考教程：。该教程使用的Ubuntu版本是18.04.1版本，Ubuntu的安装教程参考。</p></blockquote><p>具体的安装文档可以参考：<a href="https://jenkins.io/doc/book/installing/" target="_blank" rel="noopener">https://jenkins.io/doc/book/installing/</a>。</p><blockquote><p>文档中直接通过<code>sudo apt-get install jenkins</code>的方式安装会报错，不兼容最新版本的Ubuntu系统，因此下文采用直接下载软件包安装的过程。</p></blockquote><ul><li><p>首先下载<code>http://mirrors.jenkins.io/war-stable/latest/jenkins.war</code>软件包，然后执行<code>java -jar jenkins.war</code>即可启动Jenkins。默认情况下Jenkins会监听<code>8080</code>端口，我们可以通过如下命令修改端口号<code>java -jar jenkins.war --httpPort=9090</code>。</p></li><li><p>访问<code>http://192.168.1.108:8080/</code>，可以看到如下的页面，提示输入密码，可以从界面中找到密码所在的文件路径，或者从启动日志中也可以看到。</p></li></ul><img src="/posts/技术文档/Jenkins的安装与使用/2018-10-03-17-27-12.png" title="[blog.ruanxinyu.cn]"><h1 id="修改jenkins的主目录"><a class="markdownIt-Anchor" href="#修改jenkins的主目录"></a> 修改Jenkins的主目录</h1><p>从Jenkins的启动日志中可以看出Jenkins默认的主目录为<code>$user.home/.jenkins</code>，我们在此将其主目录更改至<code>/usr/local/jenkins/.jenkins</code>，只需要导出环境<code>JENKINS_HOME</code>环境变量<code>export JENKINS_HOME=/usr/local/jenkins/.jenkins</code>，然后启动Jenkins即可，或者通过<code>-D</code>指定<code>java -DJENKINS_HOME=/usr/local/jenkins/.jenkins -jar /usr/local/jenkins/jenkins.war --httpPort=8080</code></p><h1 id="开机启动"><a class="markdownIt-Anchor" href="#开机启动"></a> 开机启动</h1><p>编辑<code>sudo vim /etc/rc.local</code>, 在最下面添加<code>sudo java -DJENKINS_HOME=/usr/local/jenkins/.jenkins -jar /usr/local/jenkins/jenkins.war --httpPort=8080 &amp;</code>语句即可。</p><blockquote><p>如下方式采用systemd的方式添加到系统服务启动报<code>Job for jenkins.service failed because a timeout was exceeded</code>错误，尚未调通。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;jenkins的介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#jenkins的介绍&quot;&gt;&lt;/a&gt; Jenkins的介绍&lt;/h1&gt;
&lt;p&gt;官方地址为：&lt;a href=&quot;https://jenkins.io/&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>SonatypeNexus的安装与使用</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/SonatypeNexus%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://ruanxinyu.github.io/posts/技术文档/SonatypeNexus的安装与使用/</id>
    <published>2018-10-02T10:21:06.000Z</published>
    <updated>2018-10-02T13:29:26.670Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sonatypenexus的介绍"><a class="markdownIt-Anchor" href="#sonatypenexus的介绍"></a> SonatypeNexus的介绍</h1><p>Sonatype Nexus可以用来作为Maven/Java, npm, NuGet, RubyGems, Docker, P2, OBR, APT and YUM等的代理仓和私有仓库，同时还与Eclipse, IntelliJ, Hudson, Jenkins, Puppet, Chef, Docker等工具有很好的集成。那么我们在开发中可以用SonatypeNexus做什么呢？</p><ol><li>代理并缓存Maven/npm/docker等中央仓，提升下载速度</li><li>作为Maven/npm/docker等的私有仓库，上传私有组件</li><li>作为编译构建仓库，用于分享或者部署到环境</li></ol><h1 id="sonatypenexus的安装"><a class="markdownIt-Anchor" href="#sonatypenexus的安装"></a> SonatypeNexus的安装</h1><blockquote><p>在启动之前需要先安装java环境，具体可以参考教程：。另外Nexus对内存要求比较大，请至少保持2G以上的内存。</p></blockquote><p>Linux下源码安装的脚本可以点击此处下载： <a href="/posts/技术文档/SonatypeNexus的安装与使用/nexus_install.sh" title="nexus_install.sh">nexus_install.sh</a>，下面对安装过程做一下说明。</p><p>SonatypeNexus的下载地址为： <a href="https://help.sonatype.com/repomanager3/download/download-archives---repository-manager-3" target="_blank" rel="noopener">https://help.sonatype.com/repomanager3/download/download-archives—repository-manager-3</a></p><p>Linux通过如下命令下载并解压：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.sonatype.com/nexus/3/nexus-3.13.0-01-unix.tar.gz</span><br><span class="line">sudo tar -zxvf nexus-3.13.0-01-unix.tar.gz -C /usr/<span class="built_in">local</span>/nexus</span><br><span class="line">sudo chown -R $(whoami):$(whoami) /usr/<span class="built_in">local</span>/nexus</span><br></pre></td></tr></table></figure><blockquote><p>Windows点击<a href="http://download.sonatype.com/nexus/3/nexus-3.13.0-01-win64.zip" target="_blank" rel="noopener">http://download.sonatype.com/nexus/3/nexus-3.13.0-01-win64.zip</a>下载后解压到本地磁盘</p></blockquote><p>解压后，有<code>nexus-3.13.0-01</code>和<code>sonatype-work</code>两个目录：</p><ol><li><code>nexus-3.13.0-01</code>是软件目录，升级SonatypeNexus版本是只需要替换这个目录即可</li><li><code>sonatype-work</code>是数据目录，所有配置信息，软件包都在这个目录</li></ol><h1 id="sonatypenexus的启动"><a class="markdownIt-Anchor" href="#sonatypenexus的启动"></a> SonatypeNexus的启动</h1><p>进入到Nexus的安装目录<code>nexus-3.13.0-01/bin/nexus</code>, Linux执行<code>./nexus start</code>即可启动。查看启动日志在<code>tail -100f sonatype-work/nexus3/log/nexus.log</code>，当日志中出现如下的字样时表示nexus已经启动成功。</p><blockquote><p>Windows下执行<code>nexus.exe /run</code>即可启动。</p></blockquote><img src="/posts/技术文档/SonatypeNexus的安装与使用/2018-10-02-20-27-22.png" title="[blog.ruanxinyu.cn]"><p>默认情况下，Nexus监听的端口号为<code>8081</code>，我们通过浏览器访问就可以看到Nexus的页面，默认的用户名为<code>admin</code>，密码为<code>admin123</code>。</p><img src="/posts/技术文档/SonatypeNexus的安装与使用/2018-10-02-20-33-44.png" title="[blog.ruanxinyu.cn]"><h1 id="系统服务与开机启动"><a class="markdownIt-Anchor" href="#系统服务与开机启动"></a> 系统服务与开机启动</h1><p>我们还是采用systemd的方式添加到系统服务，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line">cat &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Sonatyp Nexus Daemon</span><br><span class="line">After=network.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/nexus/nexus-3.13.0-01/bin/nexus start</span><br><span class="line">ExecStop=/usr/<span class="built_in">local</span>/nexus/nexus-3.13.0-01/bin/nexus stop</span><br><span class="line">User=$(whoami)</span><br><span class="line">Restart=on-abort</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line">) &gt; nexus.service</span><br><span class="line"></span><br><span class="line">sudo cp -a nexus.service /lib/systemd/system/nexus.service</span><br><span class="line">sudo ln -s /lib/systemd/system/nexus.service /etc/systemd/system/multi-user.target.wants/nexus.service</span><br></pre></td></tr></table></figure><p>然后启动并添加为开机启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start nexus</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> nexus</span><br></pre></td></tr></table></figure><p><strong>Nexus启动不起来的可能原因:</strong></p><ol><li>没有安装java，可以通过<code>java -version</code>进行测试</li><li>当前用户没有nexus所在目录的权限，可以在执行用户下执行<code>sudo chown -R $(whoami):$(whoami) /usr/local/nexus</code></li></ol><h1 id="sonatypenexus的配置"><a class="markdownIt-Anchor" href="#sonatypenexus的配置"></a> SonatypeNexus的配置</h1><h2 id="配置最大文件句柄数"><a class="markdownIt-Anchor" href="#配置最大文件句柄数"></a> 配置最大文件句柄数</h2><p>在Nexus的界面中可以看到提示<a href="https://help.sonatype.com/repomanager3/system-requirements#filehandles" target="_blank" rel="noopener"><code>System Requirement: max file descriptors [4096] likely too low, increase to at least [65536].</code></a>，点击进去可以看到具体的设置方式，如果采用上文中的systemd的方式启动nexus，则不存在这个问题，因为我们已经在<code>nexus.service</code>中设置最大文件句柄数<code>LimitNOFILE=65536</code>。</p><p>**注意：**设置完该参数后需要重新启动进程才可以生效。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sonatypenexus的介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#sonatypenexus的介绍&quot;&gt;&lt;/a&gt; SonatypeNexus的介绍&lt;/h1&gt;
&lt;p&gt;Sonatype Nexus可以用来作为Maven/Java
      
    
    </summary>
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下Nginx的安装与配置</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Ubuntu%E4%B8%8BNginx%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://ruanxinyu.github.io/posts/技术文档/Ubuntu下Nginx的安装与配置/</id>
    <published>2018-10-02T06:19:56.000Z</published>
    <updated>2018-10-21T03:31:44.925Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx的简介"><a class="markdownIt-Anchor" href="#nginx的简介"></a> Nginx的简介</h1><p>官方网址：<a href="http://nginx.org/" target="_blank" rel="noopener">http://nginx.org/</a>。 Nginx可以作为http服务器、反向代理服务器、邮件服务器和负载均衡服务器等功能，具有性能高、扩展灵活等特点，能够快速的响应静态网页的请求，支持FastCGI/SSL/Virtual Host/URL Rwrite/Gzip/HTTP Basic Auth等功能，并且支持丰富的第三方扩展功能。</p><h1 id="nginx的安装"><a class="markdownIt-Anchor" href="#nginx的安装"></a> Nginx的安装</h1><p>该教程使用的Ubuntu版本是18.04.1版本，Ubuntu的安装教程参考。Nginx可以直接通过apt-get安装，也可以通过源码编译安装。</p><h2 id="apt-get安装"><a class="markdownIt-Anchor" href="#apt-get安装"></a> apt-get安装</h2><p>Ubuntu下执行<code>sudo apt-get install nginx</code>命令即可安装。</p><p>通过<code>which nginx</code>可以看到Nginx是安装在<code>/usr/sbin/nginx</code>下，配置文件在<code>/etc/nginx/</code>目录下。</p><h2 id="源码编译安装"><a class="markdownIt-Anchor" href="#源码编译安装"></a> 源码编译安装</h2><p>源码安装的脚本可以点击此处下载： <a href="/posts/技术文档/Ubuntu下Nginx的安装与配置/nginx_install.sh" title="nginx_install.sh">nginx_install.sh</a>，下面对安装过程做一下说明。</p><p>首先安装编译工具和openssl，下载Nginx源码并解压，然后执行源码编译三件套（<code>./configure &amp;&amp; make &amp;&amp; make install</code>），我们安装的目录为<code>/usr/local/nginx</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential libssl-dev <span class="comment"># 安装编译工具和openssl依赖</span></span><br><span class="line">sudo apt-get install zlib1g-dev</span><br><span class="line">sudo apt-get install libpcre3 libpcre3-dev</span><br><span class="line">wget http://nginx.org/download/nginx-1.15.4.tar.gz <span class="comment"># 下载源码</span></span><br><span class="line">tar -zxvf nginx-1.15.4.tar.gz <span class="comment"># 解压源码</span></span><br><span class="line"><span class="built_in">cd</span> nginx-1.15.4/</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --with-http_stub_status_module --with-http_v2_module --with-http_gzip_static_module --with-http_sub_module --with-pcre --with-http_ssl_module <span class="comment"># 配置nginx的安装参数，可以根据自己的需要进行调整</span></span><br><span class="line">make <span class="comment"># 编译源码</span></span><br><span class="line">sudo make install <span class="comment"># 安装到安装目录，需要使用root权限</span></span><br></pre></td></tr></table></figure><h1 id="nginx的启动和关闭"><a class="markdownIt-Anchor" href="#nginx的启动和关闭"></a> Nginx的启动和关闭</h1><p>Nginx的启动直接使用<code>/usr/local/nginx/sbin/nginx</code>, 在源码安装下使用的配置文件是<code>/usr/local/nginx/conf/nginx.conf</code>，通过<code>/usr/local/nginx/sbin/nginx -s reload</code>命令重新加载, 可以通过<code>/usr/local/nginx/sbin/nginx -s stop</code>停止进程</p><h1 id="nginx的开机启动"><a class="markdownIt-Anchor" href="#nginx的开机启动"></a> Nginx的开机启动</h1><h2 id="方式1rclocal"><a class="markdownIt-Anchor" href="#方式1rclocal"></a> 方式1：rc.local</h2><p>编辑<code>sudo vim /etc/rc.local</code>, 在最下面添加<code>sudo /usr/local/nginx/sbin/nginx</code>语句即可。</p><h2 id="方式2systemctl"><a class="markdownIt-Anchor" href="#方式2systemctl"></a> 方式2：systemctl</h2><p>我们还是采用systemd的方式添加到系统服务，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line">cat &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Nginx Daemon</span><br><span class="line">After=syslog.target network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line">ConditionFileNotEmpty=/usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">KillMode=process</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line">ExecStop=/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s stop</span><br><span class="line">ExecReload=/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s reload</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line">) &gt; nginx.service</span><br><span class="line"></span><br><span class="line">sudo cp -a nginx.service /lib/systemd/system/nginx.service</span><br><span class="line">sudo ln -s /lib/systemd/system/nginx.service /etc/systemd/system/multi-user.target.wants/nginx.service</span><br></pre></td></tr></table></figure><p>启动Nginx进程，并设置为开机启动，通过<code>sudo systemctl status nginx</code>查看状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start nginx</span><br><span class="line">sudo systemctl status nginx</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure><h1 id="nginx的配置"><a class="markdownIt-Anchor" href="#nginx的配置"></a> Nginx的配置</h1><blockquote><p>Nginx功能强大，配置无法简单描述，因此，下文仅以一个最简单的静态文件服务器为例进行说明验证，更多的应用场景将会在其他的文章中进行说明。</p></blockquote><p>配置文件是<code>/usr/local/nginx/conf/nginx.conf</code>，源码安装后默认的配置文件就已经提供了静态文件服务器的配置，我们增加<code>autoindex on;</code>参数以便后续更加方便的验证功能，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html; <span class="comment"># 设置静态文件服务的本地目录为html目录</span></span><br><span class="line">            autoindex on; <span class="comment"># 增加该参数以便自动生成文件目录</span></span><br><span class="line">            index  index.html index.htm; <span class="comment"># 默认访问文件夹下的index.html</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的配置可以看出，配置文件包含全局的配置、<code>events</code>和<code>http</code>等几部分，其中<code>http</code>表示定义了一个HTTP服务器，其中包含一个<code>server</code>监听本地机器的80端口，<code>server</code>中的<code>location</code>用来定义网址路由，通过<code>root</code>用来定义静态文件服务的本地目录，此处指定的是nginx安装目录下的<code>html</code>目录<code>/usr/local/nginx/html/</code>.</p><h1 id="nginx的验证"><a class="markdownIt-Anchor" href="#nginx的验证"></a> Nginx的验证</h1><p>采用nginx的默认配置启动nginx，此时通过浏览器访问80端口即可以看到如下的页面，即<code>/usr/local/nginx/html/index.html</code>的内容。</p><img src="/posts/技术文档/Ubuntu下Nginx的安装与配置/2018-10-02-15-11-05.png" title="[blog.ruanxinyu.cn]"><p>我们在<code>/usr/local/nginx/html/</code>下创建一些文件夹和文件<code>cd /usr/local/nginx/html/ &amp;&amp; sudo mkdir -p aa/aa aa/bb aa/cc aa/dd &amp;&amp; sudo touch aa/a.txt</code>，可以通过浏览器看到对应的文件：</p><img src="/posts/技术文档/Ubuntu下Nginx的安装与配置/2018-10-02-15-15-27.png" title="[blog.ruanxinyu.cn]"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream app_ha&#123;</span><br><span class="line">    server 192.168.68.43:8080;</span><br><span class="line">    server 192.168.68.45:8080 ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    access_log  logs/quancha.access.log  main;</span><br><span class="line">    error_log  logs/quancha.error.log;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass   http://app_ha;    <span class="comment">#在这里设置一个代理，和upstream的名字一样</span></span><br><span class="line">            <span class="comment">#以下是一些反向代理的配置可删除</span></span><br><span class="line">            proxy_redirect             off; </span><br><span class="line">            <span class="comment"># 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span><br><span class="line">            proxy_set_header           Host <span class="variable">$host</span>; </span><br><span class="line">            proxy_set_header           X-Real-IP <span class="variable">$remote_addr</span>; </span><br><span class="line">            proxy_set_header           X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>; </span><br><span class="line">            client_max_body_size       10m; <span class="comment">#允许客户端请求的最大单文件字节数</span></span><br><span class="line">            client_body_buffer_size    128k; <span class="comment">#缓冲区代理缓冲用户端请求的最大字节数</span></span><br><span class="line">            proxy_connect_timeout      300; <span class="comment">#nginx跟后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line">            proxy_send_timeout         300; <span class="comment">#后端服务器数据回传时间(代理发送超时)</span></span><br><span class="line">            proxy_read_timeout         300; <span class="comment">#连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class="line">            proxy_buffer_size          4k; <span class="comment">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class="line">            proxy_buffers              4 32k; <span class="comment">#proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</span></span><br><span class="line">            proxy_busy_buffers_size    64k; <span class="comment">#高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class="line">            proxy_temp_file_write_size 64k; <span class="comment">#设定缓存文件夹大小，大于这个值，将从upstream服务器传</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;nginx的简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#nginx的简介&quot;&gt;&lt;/a&gt; Nginx的简介&lt;/h1&gt;
&lt;p&gt;官方网址：&lt;a href=&quot;http://nginx.org/&quot; target=&quot;_blank&quot; rel=&quot;
      
    
    </summary>
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>阿里ACA认证学习记录</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/%E9%98%BF%E9%87%8CACA%E8%AE%A4%E8%AF%81%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://ruanxinyu.github.io/posts/技术文档/阿里ACA认证学习记录/</id>
    <published>2018-09-28T07:23:31.000Z</published>
    <updated>2018-10-14T09:09:35.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大数据概述"><a class="markdownIt-Anchor" href="#大数据概述"></a> 大数据概述</h1><p>大数据，指无法在可承受的时间范围内用常规软件工具进行捕捉，管理和处理的数据集合，是需要新处理模式才能具有更强的决策力，洞察发现力和流程优化能力的海量，高增长率和多样化的信息资产。</p><p>大数据的主要特征：4V</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-15-39-47.png" title="[blog.ruanxinyu.cn]"><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-15-40-26.png" title="[blog.ruanxinyu.cn]"><p>数据分析流程</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-15-41-31.png" title="[blog.ruanxinyu.cn]"><p>Hadoop生态圈</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-15-43-04.png" title="[blog.ruanxinyu.cn]"><p>阿里云大数据体系</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-15-43-42.png" title="[blog.ruanxinyu.cn]"><p>数加的定位</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-15-44-21.png" title="[blog.ruanxinyu.cn]"><p>统一的大数据计算平台</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-15-45-11.png" title="[blog.ruanxinyu.cn]"><h1 id="分析型数据库"><a class="markdownIt-Anchor" href="#分析型数据库"></a> 分析型数据库</h1><h2 id="分析型数据库的介绍"><a class="markdownIt-Anchor" href="#分析型数据库的介绍"></a> 分析型数据库的介绍</h2><p>OLAP，OLTP，维度和度量，下钻，下图中时间，地区和产品就是维度，而销量和金额就是度量</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-15-47-20.png" title="[blog.ruanxinyu.cn]"><p>MPP（大规模并行处理， Massive Parallel Processing）</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-15-49-23.png" title="[blog.ruanxinyu.cn]"><p>分析型数据库：高并发在线分析（Realtime OLAP），与关系型数据库的区别是分析型数据库没有事务，是专门用于分析的，支持sql语句，但是跟关系型数据库没有什么关系</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-15-55-17.png" title="[blog.ruanxinyu.cn]"><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-15-57-34.png" title="[blog.ruanxinyu.cn]"><h2 id="分析型数据库的基本概念"><a class="markdownIt-Anchor" href="#分析型数据库的基本概念"></a> 分析型数据库的基本概念</h2><p>表组</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-16-13-05.png" title="[blog.ruanxinyu.cn]"><p>表组的特点</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-16-55-30.png" title="[blog.ruanxinyu.cn]"><p>维表的特点，以空间换时间</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-16-56-14.png" title="[blog.ruanxinyu.cn]"><p>事实表的特点</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-16-57-32.png" title="[blog.ruanxinyu.cn]"><p>数据类型</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-17-01-14.png" title="[blog.ruanxinyu.cn]"><p>多值列，不满足3范式，性能明显优于join</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-17-02-03.png" title="[blog.ruanxinyu.cn]"><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-17-05-08.png" title="[blog.ruanxinyu.cn]"><h2 id="分析型数据库的基本操作"><a class="markdownIt-Anchor" href="#分析型数据库的基本操作"></a> 分析型数据库的基本操作</h2><p>DMS在表组中新建表</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-17-17-52.png" title="[blog.ruanxinyu.cn]"><h1 id="maxcompute"><a class="markdownIt-Anchor" href="#maxcompute"></a> MaxCompute</h1><h2 id="maxcompute的介绍"><a class="markdownIt-Anchor" href="#maxcompute的介绍"></a> MaxCompute的介绍</h2><p>大数据计算服务</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-17-32-48.png" title="[blog.ruanxinyu.cn]"><p>对象</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-17-33-43.png" title="[blog.ruanxinyu.cn]"><p>分区</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-17-36-13.png" title="[blog.ruanxinyu.cn]"><p>分区表</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-17-36-38.png" title="[blog.ruanxinyu.cn]"><p>分区举例</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-17-39-09.png" title="[blog.ruanxinyu.cn]"><p>其他概念， 执行sql都是task，是异步的</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-17-40-15.png" title="[blog.ruanxinyu.cn]"><p>数据类型</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-17-41-46.png" title="[blog.ruanxinyu.cn]"><p>阿里小贷</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-17-42-31.png" title="[blog.ruanxinyu.cn]"><p>大数据架构</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-17-43-11.png" title="[blog.ruanxinyu.cn]"><h2 id="maxcompute的架构介绍"><a class="markdownIt-Anchor" href="#maxcompute的架构介绍"></a> MaxCompute的架构介绍</h2><p>客户端</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-20-04-58.png" title="[blog.ruanxinyu.cn]"><p>逻辑层</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-20-08-24.png" title="[blog.ruanxinyu.cn]"><p>计算层</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-28-20-09-02.png" title="[blog.ruanxinyu.cn]"><p>数据上传</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-09-16-43.png" title="[blog.ruanxinyu.cn]"><p>数据下载</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-09-17-42.png" title="[blog.ruanxinyu.cn]"><p>参数</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-09-19-12.png" title="[blog.ruanxinyu.cn]"><p>分隔符</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-09-19-31.png" title="[blog.ruanxinyu.cn]"><h2 id="ddl的介绍"><a class="markdownIt-Anchor" href="#ddl的介绍"></a> DDL的介绍</h2><p>创建表</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-09-23-24.png" title="[blog.ruanxinyu.cn]"><p>表的生命周期，比如用来保持最近7天的数据</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-09-26-16.png" title="[blog.ruanxinyu.cn]"><p>快捷建表</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-09-27-31.png" title="[blog.ruanxinyu.cn]"><p>分区操作</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-09-28-17.png" title="[blog.ruanxinyu.cn]"><p>修改表属性</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-09-29-08.png" title="[blog.ruanxinyu.cn]"><p>视图操作</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-09-29-42.png" title="[blog.ruanxinyu.cn]"><h2 id="dml的介绍"><a class="markdownIt-Anchor" href="#dml的介绍"></a> DML的介绍</h2><p>查询操作</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-09-32-11.png" title="[blog.ruanxinyu.cn]"><p>更新数据</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-09-35-05.png" title="[blog.ruanxinyu.cn]"><p>多路输出</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-09-36-03.png" title="[blog.ruanxinyu.cn]"><p>表关联</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-09-37-37.png" title="[blog.ruanxinyu.cn]"><p>MapJoin</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-09-37-58.png" title="[blog.ruanxinyu.cn]"><p>MapJoin举例</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-09-38-17.png" title="[blog.ruanxinyu.cn]"><p>分支表达式</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-09-39-59.png" title="[blog.ruanxinyu.cn]"><h2 id="内置函数"><a class="markdownIt-Anchor" href="#内置函数"></a> 内置函数</h2><p>数学运算函数-1</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-09-48-23.png" title="[blog.ruanxinyu.cn]"><p>数学运算函数-2</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-09-49-29.png" title="[blog.ruanxinyu.cn]"><p>字符串处理函数</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-09-49-48.png" title="[blog.ruanxinyu.cn]"><p>日期类型处理函数</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-09-57-01.png" title="[blog.ruanxinyu.cn]"><p>窗口函数</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-09-57-16.png" title="[blog.ruanxinyu.cn]"><p>聚合函数</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-09-57-50.png" title="[blog.ruanxinyu.cn]"><p>其他函数</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-09-58-28.png" title="[blog.ruanxinyu.cn]"><h2 id="其他使用方式"><a class="markdownIt-Anchor" href="#其他使用方式"></a> 其他使用方式</h2><p>自定义函数</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-09-59-23.png" title="[blog.ruanxinyu.cn]"><p>UDF开发流程</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-10-01-12.png" title="[blog.ruanxinyu.cn]"><p>MapReduce介绍</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-10-02-44.png" title="[blog.ruanxinyu.cn]"><p>MR框架</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-10-04-46.png" title="[blog.ruanxinyu.cn]"><p>Graph</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-10-05-25.png" title="[blog.ruanxinyu.cn]"><p>如何使用合适的方式</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-10-06-11.png" title="[blog.ruanxinyu.cn]"><h2 id="授权"><a class="markdownIt-Anchor" href="#授权"></a> 授权</h2><p>授权</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-10-08-40.png" title="[blog.ruanxinyu.cn]"><p>添加用户授权</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-10-28-41.png" title="[blog.ruanxinyu.cn]"><p>角色管理</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-10-29-26.png" title="[blog.ruanxinyu.cn]"><h1 id="dataide"><a class="markdownIt-Anchor" href="#dataide"></a> DataIDE</h1><h2 id="dataide介绍"><a class="markdownIt-Anchor" href="#dataide介绍"></a> DataIDE介绍</h2><p>产品概述</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-10-35-23.png" title="[blog.ruanxinyu.cn]"><p>开发流程-1</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-10-36-04.png" title="[blog.ruanxinyu.cn]"><p>开发流程-2</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-10-36-24.png" title="[blog.ruanxinyu.cn]"><p>应用场景</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-10-37-36.png" title="[blog.ruanxinyu.cn]"><h2 id="dataide基本概念"><a class="markdownIt-Anchor" href="#dataide基本概念"></a> DataIDE基本概念</h2><p>概念</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-10-39-19.png" title="[blog.ruanxinyu.cn]"><p>角色</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-10-43-11.png" title="[blog.ruanxinyu.cn]"><p>多环境</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-10-45-07.png" title="[blog.ruanxinyu.cn]"><h2 id="数据集成"><a class="markdownIt-Anchor" href="#数据集成"></a> 数据集成</h2><p>数据集成支持两种开发模式</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-10-11-15-25-52.png" title="[blog.ruanxinyu.cn]"><p>向导模式：选择来源</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-10-11-15-26-45.png" title="[blog.ruanxinyu.cn]"><p>一键生成数据表</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-10-11-15-27-31.png" title="[blog.ruanxinyu.cn]"><p>向导模式：选择目标</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-10-11-15-27-56.png" title="[blog.ruanxinyu.cn]"><p>向导模式：字段映射</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-10-11-15-28-34.png" title="[blog.ruanxinyu.cn]"><p>脚本模式：</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-10-11-15-31-05.png" title="[blog.ruanxinyu.cn]"><h2 id="数据开发"><a class="markdownIt-Anchor" href="#数据开发"></a> 数据开发</h2><h3 id="脚本开发"><a class="markdownIt-Anchor" href="#脚本开发"></a> 脚本开发</h3><p>提供参数配置</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-10-11-15-34-28.png" title="[blog.ruanxinyu.cn]"><p>执行脚本之前会提示费用情况</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-10-11-14-47-16.png" title="[blog.ruanxinyu.cn]"><h3 id="任务节点任务"><a class="markdownIt-Anchor" href="#任务节点任务"></a> 任务：节点任务</h3><p>支持调度，依赖管理，版本管理和参数配置</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-10-11-15-38-08.png" title="[blog.ruanxinyu.cn]"><h3 id="工作流任务"><a class="markdownIt-Anchor" href="#工作流任务"></a> 工作流任务</h3><p>支持编排</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-10-11-15-40-47.png" title="[blog.ruanxinyu.cn]"><h2 id="数据管理"><a class="markdownIt-Anchor" href="#数据管理"></a> 数据管理</h2><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-11-08-19.png" title="[blog.ruanxinyu.cn]"><p>数据表的信息在数据管理服务</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-10-11-15-21-48.png" title="[blog.ruanxinyu.cn]"><p>数据表的创建支持DDL和图像化两个模式</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-10-11-15-36-06.png" title="[blog.ruanxinyu.cn]"><h2 id="运维中心"><a class="markdownIt-Anchor" href="#运维中心"></a> 运维中心</h2><p>介绍</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-10-11-16-06-43.png" title="[blog.ruanxinyu.cn]"><p>任务管理</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-11-09-04.png" title="[blog.ruanxinyu.cn]"><h2 id="项目管理"><a class="markdownIt-Anchor" href="#项目管理"></a> 项目管理</h2><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-11-10-24.png" title="[blog.ruanxinyu.cn]"><h1 id="quickbi报表"><a class="markdownIt-Anchor" href="#quickbi报表"></a> QuickBI报表</h1><h2 id="quickbi的介绍"><a class="markdownIt-Anchor" href="#quickbi的介绍"></a> QuickBI的介绍</h2><p>产品概述</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-14-41-54.png" title="[blog.ruanxinyu.cn]"><p>产品架构</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-14-42-18.png" title="[blog.ruanxinyu.cn]"><p>角色定位</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-14-44-45.png" title="[blog.ruanxinyu.cn]"><p>常见应用步骤</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-14-45-39.png" title="[blog.ruanxinyu.cn]"><h2 id="quickbi的数据管理"><a class="markdownIt-Anchor" href="#quickbi的数据管理"></a> QuickBI的数据管理</h2><p>数据源管理</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-14-46-51.png" title="[blog.ruanxinyu.cn]"><p>数据集管理</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-14-51-55.png" title="[blog.ruanxinyu.cn]"><p>首页</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-15-03-22.png" title="[blog.ruanxinyu.cn]"><p>新建数据源</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-15-03-47.png" title="[blog.ruanxinyu.cn]"><p>表格分析</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-15-10-44.png" title="[blog.ruanxinyu.cn]"><p>图表与门户-常见图标</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-15-12-25.png" title="[blog.ruanxinyu.cn]"><p>图表</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-15-16-14.png" title="[blog.ruanxinyu.cn]"><p>门户</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-15-17-19.png" title="[blog.ruanxinyu.cn]"><h1 id="datav数据大屏"><a class="markdownIt-Anchor" href="#datav数据大屏"></a> DataV数据大屏</h1><h2 id="产品介绍"><a class="markdownIt-Anchor" href="#产品介绍"></a> 产品介绍</h2><p>产品概述</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-15-22-00.png" title="[blog.ruanxinyu.cn]"><p>特性1：多重场景模板</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-15-22-47.png" title="[blog.ruanxinyu.cn]"><p>特性2：丰富开放的图表库</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-15-23-21.png" title="[blog.ruanxinyu.cn]"><p>特性3：支持多种数据源</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-15-24-21.png" title="[blog.ruanxinyu.cn]"><p>特性4：零门槛图形化界面设计</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-15-25-13.png" title="[blog.ruanxinyu.cn]"><p>特性5，支持数据交互分析</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-15-26-53.png" title="[blog.ruanxinyu.cn]"><p>特性6：支持适配与发布方式</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-15-26-17.png" title="[blog.ruanxinyu.cn]"><h2 id="datav大屏介绍"><a class="markdownIt-Anchor" href="#datav大屏介绍"></a> DataV大屏介绍</h2><p>展示类大屏</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-15-29-42.png" title="[blog.ruanxinyu.cn]"><p>展示类大屏示例</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-15-30-22.png" title="[blog.ruanxinyu.cn]"><p>分析类大屏</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-15-30-51.png" title="[blog.ruanxinyu.cn]"><p>分析类大屏示例</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-15-31-18.png" title="[blog.ruanxinyu.cn]"><p>监控类大屏</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-15-31-39.png" title="[blog.ruanxinyu.cn]"><p>监控类大屏示例</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-15-32-12.png" title="[blog.ruanxinyu.cn]"><p>可视化大屏设计原则</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-15-33-01.png" title="[blog.ruanxinyu.cn]"><p>大屏样例1</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-15-33-33.png" title="[blog.ruanxinyu.cn]"><p>大屏样例2</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-15-36-21.png" title="[blog.ruanxinyu.cn]"><h2 id="datav演示"><a class="markdownIt-Anchor" href="#datav演示"></a> DataV演示</h2><p>添加数据</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-15-38-15.png" title="[blog.ruanxinyu.cn]"><p>视频和样例</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-15-38-33.png" title="[blog.ruanxinyu.cn]"><p>创建大屏-1</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-15-39-16.png" title="[blog.ruanxinyu.cn]"><p>创建大屏-2</p><img src="/posts/技术文档/阿里ACA认证学习记录/2018-09-29-15-39-37.png" title="[blog.ruanxinyu.cn]">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;大数据概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#大数据概述&quot;&gt;&lt;/a&gt; 大数据概述&lt;/h1&gt;
&lt;p&gt;大数据，指无法在可承受的时间范围内用常规软件工具进行捕捉，管理和处理的数据集合，是需要新处理模式才能具有更强的决策力，洞察发现
      
    
    </summary>
    
      <category term="学习记录" scheme="http://ruanxinyu.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="学习记录" scheme="http://ruanxinyu.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下搭建HAProxy+KeepAlived高可用集群</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Ubuntu%E4%B8%8B%E6%90%AD%E5%BB%BAHAProxy-KeepAlived%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/"/>
    <id>http://ruanxinyu.github.io/posts/技术文档/Ubuntu下搭建HAProxy-KeepAlived高可用集群/</id>
    <published>2018-09-28T02:48:23.000Z</published>
    <updated>2018-10-02T08:08:38.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境说明"><a class="markdownIt-Anchor" href="#环境说明"></a> 环境说明</h1><p>本次教程搭建的架构图如下所示，通过KeepAlived实现HAProxy的高可用，通过HAProxy实现后端服务器App01和App02的高可用和负载均衡。HAPrxoy有两台，分别为<code>192.168.1.102</code>和<code>192.168.1.103</code>，VIP为<code>192.168.1.104</code>，通过<code>8081</code>端口访问App01的两台机器，通过<code>8082</code>端口访问App02的两台机器。</p><img src="/posts/技术文档/Ubuntu下搭建HAProxy-KeepAlived高可用集群/2018-10-01-22-23-16.png" title="[blog.ruanxinyu.cn]"><p>本教程使用Ubuntu 18.04.01系统，同时需要安装KeepAlived和HAProxy，相关的教程请参考：</p><ol><li></li><li></li><li></li></ol><h1 id="haproxy的配置"><a class="markdownIt-Anchor" href="#haproxy的配置"></a> HAProxy的配置</h1><p>两台HAProxy的配置是相同的，通过<code>8081</code>端口访问App01的两台机器，通过<code>8082</code>端口访问App02的两台机器。为了简化配置过程，还是采用最简化的配置，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line">    daemon                          <span class="comment"># 配置为后台启动</span></span><br><span class="line">defaults</span><br><span class="line">    mode http</span><br><span class="line">    timeout connect 30s             <span class="comment"># 连接超时</span></span><br><span class="line">    timeout client 30s              <span class="comment"># 客户端超时</span></span><br><span class="line">    timeout server 30s              <span class="comment"># 服务器超时</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###########################################################</span></span><br><span class="line">frontend app01</span><br><span class="line">    <span class="built_in">bind</span> *:8081                     <span class="comment"># 绑定端口</span></span><br><span class="line">    default_backend app01_backend   <span class="comment"># 默认的backend的名称</span></span><br><span class="line"></span><br><span class="line">backend app01_backend</span><br><span class="line">    server web1 192.168.1.106:80    <span class="comment"># 设置后端服务器</span></span><br><span class="line">    server web1 192.168.1.108:80    <span class="comment"># 设置后端服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###########################################################</span></span><br><span class="line">frontend app02</span><br><span class="line">    <span class="built_in">bind</span> *:8082                     <span class="comment"># 绑定端口</span></span><br><span class="line">    default_backend app02_backend   <span class="comment"># 默认的backend的名称</span></span><br><span class="line"></span><br><span class="line">backend app02_backend</span><br><span class="line">    server web1 192.168.1.107:80    <span class="comment"># 设置后端服务器</span></span><br><span class="line">    server web1 192.168.1.109:80    <span class="comment"># 设置后端服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###########################################################</span></span><br><span class="line">listen stats</span><br><span class="line">    <span class="built_in">bind</span> *:8083                     <span class="comment"># 设置监控组的名称</span></span><br><span class="line">    stats refresh 30s               <span class="comment"># 统计页面自动刷新时间</span></span><br><span class="line">    stats uri /stats                <span class="comment"># 统计页面url</span></span><br></pre></td></tr></table></figure><h1 id="keepalived的配置"><a class="markdownIt-Anchor" href="#keepalived的配置"></a> KeepAlived的配置</h1><p>KeepAlived与HAProxy是在相同机器上，IP地址分别为主机haproxy_vm01（<code>192.168.1.102</code>）和备机haproxy_vm02（<code>192.168.1.103</code>）， VIP为<code>192.168.1.104</code>。因为KeepAlived是主备的，因此两台机器的配置是不一样的。</p><ol><li>主机haproxy_vm01（<code>192.168.1.102</code>）的配置如下：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vrrp_script chk_service_ok &#123;</span><br><span class="line">       script <span class="string">"killall -0 haproxy"</span></span><br><span class="line">       interval 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    interface enp0s3</span><br><span class="line">    state MASTER</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.1.104/25</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">       chk_service_ok</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>备机haproxy_vm02（<code>192.168.1.103</code>）的配置如下，相对于haproxy_vm01，只修改<code>state</code>和<code>priority</code>:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vrrp_script chk_service_ok &#123;</span><br><span class="line">       script <span class="string">"killall -0 haproxy"</span></span><br><span class="line">       interval 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    interface enp0s3</span><br><span class="line">    state BACKUP</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 80</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.1.104/25</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">       chk_service_ok</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述配置可以看到，检查haproxy是否可用使用的是<code>killall -0 haproxy</code>命令来判断haproxy的进程是否存在。</p><h1 id="app服务的配置"><a class="markdownIt-Anchor" href="#app服务的配置"></a> App服务的配置</h1><p>我们后台采用<code>apache</code>，首先在每一台后台机器安装apache，我们使用Apache服务器来模拟HAProxy后端的服务器，<code>sudo apt-get install apache2</code>。</p><p>为了区分App01和App02，我们做如下操作：</p><ol><li>在App01的两台机器执行<code>sudo sh -c 'echo &quot;This is apache server 01&quot; &gt; /var/www/html/index.html'</code></li><li>在App02的两台机器执行<code>sudo sh -c 'echo &quot;This is apache server 02&quot; &gt; /var/www/html/index.html'</code></li></ol><h1 id="高可用功能验证"><a class="markdownIt-Anchor" href="#高可用功能验证"></a> 高可用功能验证</h1><p>分别重新启动KeepAlived（<code>sudo systemctl restart keepalived</code>）和HAProxy（<code>sudo systemctl restart haproxy</code>）, 在HAProxy的两台机器上通过<code>ip a</code>命令，可以看到VIP（<code>192.168.1.104</code>）在haproxy_vm01（<code>192.168.1.102</code>）上.</p><img src="/posts/技术文档/Ubuntu下搭建HAProxy-KeepAlived高可用集群/2018-10-01-22-31-44.png" title="[blog.ruanxinyu.cn]"><p>通过VIP访问8081和8082端口，可以发现能够正常访问到后台的服务器，如下所示，此时我们关闭haproxy_vm01（<code>192.168.1.102</code>）上的HAproxy进程<code>sudo killall haproxy</code>，通过<code>ip a</code>可以看到VIP已经漂移到haproxy_vm02（<code>192.168.1.103</code>）上，但是通过VIP访问8081和8082端口，业务仍旧是正常的，说明HAProxy是高可用的。</p><img src="/posts/技术文档/Ubuntu下搭建HAProxy-KeepAlived高可用集群/2018-10-01-22-29-38.png" title="[blog.ruanxinyu.cn]"><p>我们关闭App01_vm01（<code>192.168.1.106</code>)，然后通过VIP访问8081端口，依旧可以正常访问，说明HAProxy已经保证后端App的高可用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;环境说明&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#环境说明&quot;&gt;&lt;/a&gt; 环境说明&lt;/h1&gt;
&lt;p&gt;本次教程搭建的架构图如下所示，通过KeepAlived实现HAProxy的高可用，通过HAProxy实现后端服务器App01和App
      
    
    </summary>
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下HAProxy的安装与配置</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Ubuntu%E4%B8%8BHAProxy%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://ruanxinyu.github.io/posts/技术文档/Ubuntu下HAProxy的安装与配置/</id>
    <published>2018-09-24T23:07:50.000Z</published>
    <updated>2018-10-14T02:08:06.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="haproxy的简介"><a class="markdownIt-Anchor" href="#haproxy的简介"></a> HAProxy的简介</h1><p>HAProxy是一款提供高可用性、负载均衡以及基于TCP（第四层）和HTTP（第七层）应用的代理软件，支持虚拟主机，它是免费、快速并且可靠的一种解决方案。</p><p>HAProxy实现了一种事件驱动、单一进程模型，此模型支持非常大的并发连接数，特别适用于那些负载特大的web站点，完全可以支持数以万计的并发连接，根据官方文档，haproxy可以跑满10Gbps。并且它的运行模式使得它可以很简单安全的整合进您当前的架构中，同时可以保护你的web服务器不被暴露到网络上。</p><p>HAProxy支持全透明代理，可以用客户端IP地址或者任何其他地址来连接后端服务器，同时提供连接拒绝功能，可以有效的限制攻击蠕虫。</p><h1 id="haproxy的安装"><a class="markdownIt-Anchor" href="#haproxy的安装"></a> HAProxy的安装</h1><p>该教程使用的Ubuntu版本是18.04.1版本，Ubuntu的安装教程参考。HAProxy可以直接通过apt-get安装，也可以通过源码编译安装。</p><h2 id="apt-get安装"><a class="markdownIt-Anchor" href="#apt-get安装"></a> apt-get安装</h2><p>Ubuntu下执行<code>sudo apt-get install haproxy</code>命令即可安装。</p><p>通过<code>which haproxy</code>可以看到haproxy是安装在<code>/usr/sbin/haproxy</code>下，HAProxy的配置文件路径为：<code>/etc/haproxy/haproxy.cfg</code></p><p>使用<code>sudo haproxy -f /etc/haproxy/haproxy.cfg</code>即可启动HAProxy。</p><h2 id="源码编译安装"><a class="markdownIt-Anchor" href="#源码编译安装"></a> 源码编译安装</h2><p>源码安装的脚本可以点击此处下载： <a href="/posts/技术文档/Ubuntu下HAProxy的安装与配置/haproxy_install.sh" title="haproxy_install.sh">haproxy_install.sh</a>，下面对安装过程做一下说明。</p><p>一般源码安装目录为<code>/usr/local/haproxy</code>，在源码目录中的<code>README</code>文件有安装说明，下面罗列出几点内容：</p><ol><li>在执行make命令之前是不需要执行<code>./configure</code>命令的，因此执行的参数都在make命令中指定</li><li>我们操作系统为Ubuntu 18.04.1，不涉及嵌入式编译，因此使用<code>TARGET=linux26 ARCH=x86_64</code>参数</li><li>PCRE(Perl Compatible Regular Expressions)的速度是其他的2-10倍，因此添加<code>USE_PCRE=1</code>选项，但是前提需要安装<code>libpcre3 libpcre3-dev</code></li><li>为支持HTTPS协议，我们需要添加<code>USE_OPENSSL=1</code>选项，但是前提需要安装<code>libssl-dev</code></li><li>为支持HTTP的压缩功能，我们需要添加<code>USE_ZLIB=1</code>，但是前提需要安装<code>zlib1g-dev</code></li><li>为了保证安装目录为<code>/usr/local/haproxy</code>，我们需要在<code>make install</code>命令中指定<code>PREFIX</code>参数</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential libssl-dev <span class="comment"># 安装编译工具和openssl依赖</span></span><br><span class="line">sudo apt-get install zlib1g-dev</span><br><span class="line">sudo apt-get install libpcre3 libpcre3-dev</span><br><span class="line">wget https://www.haproxy.org/download/1.8/src/haproxy-1.8.8.tar.gz <span class="comment"># 下载源码</span></span><br><span class="line">tar -zxvf haproxy-1.8.8.tar.gz <span class="comment"># 解压源码</span></span><br><span class="line"><span class="built_in">cd</span> haproxy-1.8.8/</span><br><span class="line">make TARGET=linux26 ARCH=x86_64 USE_PCRE=1 USE_OPENSSL=1 USE_ZLIB=1 <span class="comment"># 编译源码，从README中可以看出如何编译</span></span><br><span class="line">sudo make install PREFIX=/usr/<span class="built_in">local</span>/haproxy <span class="comment"># 安装到安装目录，需要使用root权限</span></span><br><span class="line"></span><br><span class="line">sudo mkdir -p /etc/haproxy</span><br><span class="line">sudo cp -a examples/transparent_proxy.cfg /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure><p>启动HAProxy: <code>sudo /usr/local/haproxy/sbin/haproxy -f /etc/haproxy/haproxy.cfg</code></p><p><strong>可能遇到的问题</strong></p><ol><li>提示<code>make is not found</code></li></ol><blockquote><p>源码安装需要安装编译器将源码转换为二进制可执行文件，因此执行<code>sudo apt-get install build-essential</code>安装编译器即可</p></blockquote><ol><li>启动时提示<code>parsing [/etc/haproxy/haproxy.cfg:12] : unknown keyword 'ca-base' in 'global' section</code></li></ol><blockquote><p>编译haproxy时没有使能openssl的支持，安装<code>libssl-dev</code>并在编译时指定<code>USE_OPENSSL=1</code>选项即可</p></blockquote><h2 id="开机启动"><a class="markdownIt-Anchor" href="#开机启动"></a> 开机启动</h2><h3 id="方式1rclocal"><a class="markdownIt-Anchor" href="#方式1rclocal"></a> 方式1：rc.local</h3><p>编辑<code>sudo vim /etc/rc.local</code>, 在最下面添加<code>sudo /usr/local/haproxy/sbin/haproxy -f /etc/haproxy/haproxy.cfg</code>语句即可。</p><h3 id="方式2systemctl"><a class="markdownIt-Anchor" href="#方式2systemctl"></a> 方式2：systemctl</h3><p>我们还是采用systemd的方式添加到系统服务，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line">cat &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=HAproxy Daemon</span><br><span class="line">After=syslog.target network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line">ConditionFileNotEmpty=/etc/haproxy/haproxy.cfg</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">KillMode=process</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/haproxy/sbin/haproxy -f /etc/haproxy/haproxy.cfg</span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -HUP <span class="variable">$MAINPID</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line">) &gt; haproxy.service</span><br><span class="line"></span><br><span class="line">sudo cp -a haproxy.service /lib/systemd/system/haproxy.service</span><br><span class="line">sudo ln -s /lib/systemd/system/haproxy.service /etc/systemd/system/multi-user.target.wants/haproxy.service</span><br></pre></td></tr></table></figure><p>启动haproxy进程，并设置为开机启动，通过<code>sudo systemctl status haproxy</code>查看状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start haproxy  <span class="comment"># 注意： 如果配置文件不正确的话HPAProxy是启动不起来的</span></span><br><span class="line">sudo systemctl status haproxy</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> haproxy</span><br></pre></td></tr></table></figure><h1 id="haproxy的配置"><a class="markdownIt-Anchor" href="#haproxy的配置"></a> HAProxy的配置</h1><p>下面我们以一个最简单的用例说明如何配置HAProxy，架构图如下，<code>192.168.1.102</code>上安装有HAProxy, <code>8081</code>端口转向<code>192.168.1.106</code>服务器，<code>8082</code>端口转向<code>192.168.1.107</code>服务器。因为HAProxy是提供有统计功能的，因此打开该功能，并监听在<code>8083</code>端口。</p><img src="/posts/技术文档/Ubuntu下HAProxy的安装与配置/2018-09-27-22-03-48.png" title="[blog.ruanxinyu.cn]"><h2 id="配置haproxy"><a class="markdownIt-Anchor" href="#配置haproxy"></a> 配置HAProxy</h2><p>编辑<code>sudo vim /etc/haproxy/haproxy.cfg</code>文件，写入如下的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line">    daemon                          <span class="comment"># 配置为后台启动</span></span><br><span class="line">defaults</span><br><span class="line">    mode http</span><br><span class="line">    timeout connect 30s             <span class="comment"># 连接超时</span></span><br><span class="line">    timeout client 30s              <span class="comment"># 客户端超时</span></span><br><span class="line">    timeout server 30s              <span class="comment"># 服务器超时</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###########################################################</span></span><br><span class="line">frontend app01</span><br><span class="line">    <span class="built_in">bind</span> *:8081                     <span class="comment"># 绑定端口</span></span><br><span class="line">    default_backend app01_backend   <span class="comment"># 默认的backend的名称</span></span><br><span class="line"></span><br><span class="line">backend app01_backend</span><br><span class="line">    server web1 192.168.1.106:80    <span class="comment"># 设置后端服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###########################################################</span></span><br><span class="line">frontend app02</span><br><span class="line">    <span class="built_in">bind</span> *:8082                     <span class="comment"># 绑定端口</span></span><br><span class="line">    default_backend app02_backend   <span class="comment"># 默认的backend的名称</span></span><br><span class="line"></span><br><span class="line">backend app02_backend</span><br><span class="line">    server web1 192.168.1.107:80    <span class="comment"># 设置后端服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###########################################################</span></span><br><span class="line">listen stats</span><br><span class="line">    <span class="built_in">bind</span> *:8083                     <span class="comment"># 设置监控组的名称</span></span><br><span class="line">    stats refresh 30s               <span class="comment"># 统计页面自动刷新时间</span></span><br><span class="line">    stats uri /stats                <span class="comment"># 统计页面url</span></span><br></pre></td></tr></table></figure><p>然后执行<code>sudo /usr/local/haproxy/sbin/haproxy -f /etc/haproxy/haproxy.cfg</code>启动HAProxy，通过<code>sudo netstat -lntp | grep haproxy</code>，可以看出HAProxy已经监听配置文件中的三个端口：</p><img src="/posts/技术文档/Ubuntu下HAProxy的安装与配置/2018-09-26-15-08-13.png" title="[blog.ruanxinyu.cn]"><p><strong>可能遇到的问题</strong></p><ol><li>启动时提示<code>unknown keyword</code>，如下所示：</li></ol><blockquote><p>从错误信息中可以看出keyword前都多了好多空格，说明我们的配置文件没有正确的使用tab键</p></blockquote><img src="/posts/技术文档/Ubuntu下HAProxy的安装与配置/2018-09-26-13-22-19.png" title="[blog.ruanxinyu.cn]"><ol><li>启动HAProxy后配置文件没有生效</li></ol><blockquote><p>因为之前启动的HAProxy进程没有关闭，可以执行<code>sudo killall haproxy</code>关闭进程。</p></blockquote><h2 id="搭建apache服务器"><a class="markdownIt-Anchor" href="#搭建apache服务器"></a> 搭建Apache服务器</h2><p>我们使用Apache服务器来模拟HAProxy后端的服务器，首先分别在<code>192.168.1.106</code>和<code>192.168.1.107</code>两台机器上执行<code>sudo apt-get install apache2</code>，完成后Apache会自动启动并监听80端口，此时在浏览器中访问对应机器，既可以看到Apache2的首页，默认使用的首页文件路径为<code>/var/www/html/index.html</code>。</p><p>为了对两台机器做一下区分，我们做如下操作：</p><ol><li>在<code>192.168.1.106</code>执行<code>sudo sh -c 'echo &quot;This is apache server 01&quot; &gt; /var/www/html/index.html'</code></li><li>在<code>192.168.1.107</code>执行<code>sudo sh -c 'echo &quot;This is apache server 02&quot; &gt; /var/www/html/index.html'</code></li></ol><p>此时分别访问<code>http://192.168.1.106/</code>和<code>http://192.168.1.107/</code>可以看到下面的界面：</p><img src="/posts/技术文档/Ubuntu下HAProxy的安装与配置/2018-09-27-22-18-00.png" title="[blog.ruanxinyu.cn]"><h1 id="haproxy的验证"><a class="markdownIt-Anchor" href="#haproxy的验证"></a> HAProxy的验证</h1><p>此时访问HAProxy（<code>192.168.1.102</code>）的<code>8081</code>和<code>8082</code>可以看到分别访问到后端的<code>192.168.1.106</code>和<code>192.168.1.107</code>的<code>80</code>端口，如下所示，说明HAProxy的功能已经生效。</p><img src="/posts/技术文档/Ubuntu下HAProxy的安装与配置/2018-09-27-22-19-32.png" title="[blog.ruanxinyu.cn]"><p>访问HAProxy的<code>8083</code>端口：<code>http://192.168.1.102:8083/stats</code>，可以看到HAProxy自带的的统计数据页面，如下所示：</p><img src="/posts/技术文档/Ubuntu下HAProxy的安装与配置/2018-09-27-22-20-09.png" title="[blog.ruanxinyu.cn]"><h1 id="haproxy详细配置说明高级"><a class="markdownIt-Anchor" href="#haproxy详细配置说明高级"></a> HAProxy详细配置说明（高级）</h1><p>对于初级使用者可以不必详细掌握所有的配置，只需要在使用的时候能查到即可，因此将说明放置在此处，参数说明来源于<code>https://www.linuxidc.com/Linux/2012-07/65350.htm</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">####################全局配置信息########################</span></span><br><span class="line"><span class="comment">#######参数是进程级的，通常和操作系统（OS）相关#########</span></span><br><span class="line">global</span><br><span class="line">  maxconn 20480 <span class="comment">#默认最大连接数</span></span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local3 <span class="comment">#[err warning info debug]</span></span><br><span class="line">  chroot /var/haproxy <span class="comment">#chroot运行的路径</span></span><br><span class="line">  uid 99 <span class="comment">#所属运行的用户uid</span></span><br><span class="line">  gid 99 <span class="comment">#所属运行的用户组</span></span><br><span class="line">  daemon <span class="comment">#以后台形式运行haproxy</span></span><br><span class="line">  nbproc 1 <span class="comment">#进程数量(可以设置多个进程提高性能)</span></span><br><span class="line">  pidfile /var/run/haproxy.pid <span class="comment">#haproxy的pid存放路径,启动进程的用户必须有权限访问此文件</span></span><br><span class="line">  <span class="built_in">ulimit</span>-n 65535 <span class="comment">#ulimit的数量限制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#####################默认的全局设置######################</span></span><br><span class="line"><span class="comment">##这些参数可以被利用配置到frontend，backend，listen组件##</span></span><br><span class="line">defaults</span><br><span class="line">  <span class="built_in">log</span> global</span><br><span class="line">  mode http <span class="comment">#所处理的类别 (#7层 http;4层tcp )</span></span><br><span class="line">  maxconn 20480 <span class="comment">#最大连接数</span></span><br><span class="line">  option httplog <span class="comment">#日志类别http日志格式</span></span><br><span class="line">  option httpclose <span class="comment">#每次请求完毕后主动关闭http通道</span></span><br><span class="line">  option dontlognull <span class="comment">#不记录健康检查的日志信息</span></span><br><span class="line">  option forwardfor <span class="comment">#如果后端服务器需要获得客户端真实ip需要配置的参数，可以从Http Header中获得客户端ip</span></span><br><span class="line">  option redispatch <span class="comment">#serverId对应的服务器挂掉后,强制定向到其他健康的服务器</span></span><br><span class="line">  option abortonclose <span class="comment">#当服务器负载很高的时候，自动结束掉当前队列处理比较久的连接</span></span><br><span class="line">  stats refresh 30 <span class="comment">#统计页面刷新间隔</span></span><br><span class="line">  retries 3 <span class="comment">#3次连接失败就认为服务不可用，也可以通过后面设置</span></span><br><span class="line">  balance roundrobin <span class="comment">#默认的负载均衡的方式,轮询方式</span></span><br><span class="line">  <span class="comment"># balance source #默认的负载均衡的方式,类似nginx的ip_hash</span></span><br><span class="line">  <span class="comment"># balance leastconn #默认的负载均衡的方式,最小连接</span></span><br><span class="line">  contimeout 5000 <span class="comment">#连接超时</span></span><br><span class="line">  clitimeout 50000 <span class="comment">#客户端超时</span></span><br><span class="line">  srvtimeout 50000 <span class="comment">#服务器超时</span></span><br><span class="line">  timeout check 2000 <span class="comment">#心跳检测超时</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################监控页面的设置#######################</span></span><br><span class="line">listen admin_status <span class="comment">#Frontend和Backend的组合体,监控组的名称，按需自定义名称</span></span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:65532 <span class="comment">#监听端口</span></span><br><span class="line">  mode http <span class="comment">#http的7层模式</span></span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local3 err <span class="comment">#错误日志记录</span></span><br><span class="line">  stats refresh 5s <span class="comment">#每隔5秒自动刷新监控页面</span></span><br><span class="line">  stats uri /admin?stats <span class="comment">#监控页面的url</span></span><br><span class="line">  stats realm itnihao\ itnihao <span class="comment">#监控页面的提示信息</span></span><br><span class="line">  stats auth admin:admin <span class="comment">#监控页面的用户和密码admin,可以设置多个用户名</span></span><br><span class="line">  stats auth admin1:admin1 <span class="comment">#监控页面的用户和密码admin1</span></span><br><span class="line">  stats hide-version <span class="comment">#隐藏统计页面上的HAproxy版本信息</span></span><br><span class="line">  stats admin <span class="keyword">if</span> TRUE <span class="comment">#手工启用/禁用,后端服务器(haproxy-1.4.9以后版本)</span></span><br><span class="line"></span><br><span class="line">  rrorfile 403 /etc/haproxy/errorfiles/403.http</span><br><span class="line">  rrorfile 500 /etc/haproxy/errorfiles/500.http</span><br><span class="line">  rrorfile 502 /etc/haproxy/errorfiles/502.http</span><br><span class="line">  rrorfile 503 /etc/haproxy/errorfiles/503.http</span><br><span class="line">  rrorfile 504 /etc/haproxy/errorfiles/504.http</span><br><span class="line"></span><br><span class="line"><span class="comment">#################HAProxy的日志记录内容设置###################</span></span><br><span class="line">  capture request header Host len 40</span><br><span class="line">  capture request header Content-Length len 10</span><br><span class="line">  capture request header Referer len 200</span><br><span class="line">  capture response header Server len 40</span><br><span class="line">  capture response header Content-Length len 10</span><br><span class="line">  capture response header Cache-Control len 8</span><br><span class="line"></span><br><span class="line"><span class="comment">#######################网站监测listen配置#####################</span></span><br><span class="line"><span class="comment">###########此用法主要是监控haproxy后端服务器的监控状态############</span></span><br><span class="line">listen site_status</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:1081 <span class="comment">#监听端口</span></span><br><span class="line">  mode http <span class="comment">#http的7层模式</span></span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local3 err <span class="comment">#[err warning info debug]</span></span><br><span class="line">  monitor-uri /site_status <span class="comment">#网站健康检测URL，用来检测HAProxy管理的网站是否可以用，正常返回200，不正常返回503</span></span><br><span class="line">  acl site_dead nbsrv(server_web) lt 2 <span class="comment">#定义网站down时的策略当挂在负载均衡上的指定backend的中有效机器数小于1台时返回true</span></span><br><span class="line">  acl site_dead nbsrv(server_blog) lt 2</span><br><span class="line">  acl site_dead nbsrv(server_bbs) lt 2</span><br><span class="line">  monitor fail <span class="keyword">if</span> site_dead <span class="comment">#当满足策略的时候返回503，网上文档说的是500，实际测试为503</span></span><br><span class="line">  monitor-net 192.168.16.2/32 <span class="comment">#来自192.168.16.2的日志信息不会被记录和转发</span></span><br><span class="line">  monitor-net 192.168.16.3/32</span><br><span class="line"></span><br><span class="line"><span class="comment">########frontend配置############</span></span><br><span class="line"><span class="comment">#####注意，frontend配置里面可以定义多个acl进行匹配操作########</span></span><br><span class="line">frontend http_80_in</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:80 <span class="comment">#监听端口，即haproxy提供web服务的端口，和lvs的vip端口类似</span></span><br><span class="line">  mode http <span class="comment">#http的7层模式</span></span><br><span class="line">  <span class="built_in">log</span> global <span class="comment">#应用全局的日志配置</span></span><br><span class="line">  option httplog <span class="comment">#启用http的log</span></span><br><span class="line">  option httpclose <span class="comment">#每次请求完毕后主动关闭http通道，HA-Proxy不支持keep-alive模式</span></span><br><span class="line">  option forwardfor <span class="comment">#如果后端服务器需要获得客户端的真实IP需要配置次参数，将可以从Http Header中获得客户端IP</span></span><br><span class="line">  <span class="comment">########acl策略配置#############</span></span><br><span class="line">  acl itnihao_web hdr_reg(host) -i ^(www.itnihao.cn|ww1.itnihao.cn)$</span><br><span class="line">  <span class="comment">#如果请求的域名满足正则表达式中的2个域名返回true -i是忽略大小写</span></span><br><span class="line">  acl itnihao_blog hdr_dom(host) -i blog.itnihao.cn</span><br><span class="line">  <span class="comment">#如果请求的域名满足www.itnihao.cn返回true -i是忽略大小写</span></span><br><span class="line">  <span class="comment">#acl itnihao hdr(host) -i itnihao.cn</span></span><br><span class="line">  <span class="comment">#如果请求的域名满足itnihao.cn返回true -i是忽略大小写</span></span><br><span class="line">  <span class="comment">#acl file_req url_sub -i killall=</span></span><br><span class="line">  <span class="comment">#在请求url中包含killall=，则此控制策略返回true,否则为false</span></span><br><span class="line">  <span class="comment">#acl dir_req url_dir -i allow</span></span><br><span class="line">  <span class="comment">#在请求url中存在allow作为部分地址路径，则此控制策略返回true,否则返回false</span></span><br><span class="line">  <span class="comment">#acl missing_cl hdr_cnt(Content-length) eq 0</span></span><br><span class="line">  <span class="comment">#当请求的header中Content-length等于0时返回true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########acl策略匹配相应#############</span></span><br><span class="line">  <span class="comment">#block if missing_cl</span></span><br><span class="line">  <span class="comment">#当请求中header中Content-length等于0阻止请求返回403</span></span><br><span class="line">  <span class="comment">#block if !file_req || dir_req</span></span><br><span class="line">  <span class="comment">#block表示阻止请求，返回403错误，当前表示如果不满足策略file_req，或者满足策略dir_req，则阻止请求</span></span><br><span class="line">  use_backend server_web <span class="keyword">if</span> itnihao_web</span><br><span class="line">  <span class="comment">#当满足itnihao_web的策略时使用server_web的backend</span></span><br><span class="line">  use_backend server_blog <span class="keyword">if</span> itnihao_blog</span><br><span class="line">  <span class="comment">#当满足itnihao_blog的策略时使用server_blog的backend</span></span><br><span class="line">  <span class="comment">#redirect prefix http://blog.itniaho.cn code 301 if itnihao</span></span><br><span class="line">  <span class="comment">#当访问itnihao.cn的时候，用http的301挑转到http://192.168.16.3</span></span><br><span class="line">  default_backend server_bbs</span><br><span class="line">  <span class="comment">#以上都不满足的时候使用默认server_bbs的backend</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##########backend的设置##############</span></span><br><span class="line"><span class="comment">#下面我将设置三组服务器 server_web，server_blog，server_bbs</span></span><br><span class="line"><span class="comment">##################backend server_web####################</span></span><br><span class="line">backend server_web</span><br><span class="line">  mode http <span class="comment">#http的7层模式</span></span><br><span class="line">  balance roundrobin <span class="comment">#负载均衡的方式，roundrobin平均方式</span></span><br><span class="line">  cookie SERVERID <span class="comment">#允许插入serverid到cookie中，serverid后面可以定义</span></span><br><span class="line">  option httpchk GET /index.html <span class="comment">#心跳检测的文件</span></span><br><span class="line">  server web1 192.168.16.2:80 cookie web1 check inter 1500 rise 3 fall 3 weight 1</span><br><span class="line">  <span class="comment">#服务器定义，cookie 1表示serverid为web1，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用，</span></span><br><span class="line">  <span class="comment">#fall 3是3次失败认为服务器不可用，weight代表权重</span></span><br><span class="line">  server web2 192.168.16.3:80 cookie web2 check inter 1500 rise 3 fall 3 weight 2</span><br><span class="line">  <span class="comment">#服务器定义，cookie 1表示serverid为web2，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用，</span></span><br><span class="line">  <span class="comment">#fall 3是3次失败认为服务器不可用，weight代表权重</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################backend server_blog######################</span></span><br><span class="line">backend server_blog</span><br><span class="line">  mode http <span class="comment">#http的7层模式</span></span><br><span class="line">  balance roundrobin <span class="comment">#负载均衡的方式，roundrobin平均方式</span></span><br><span class="line">  cookie SERVERID <span class="comment">#允许插入serverid到cookie中，serverid后面可以定义</span></span><br><span class="line">  option httpchk GET /index.html <span class="comment">#心跳检测的文件</span></span><br><span class="line">  server blog1 192.168.16.2:80 cookie blog1 check inter 1500 rise 3 fall 3 weight 1</span><br><span class="line">  <span class="comment">#服务器定义，cookie 1表示serverid为blog1，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用，fall 3是3次失败认为服务器不可用，weight代表权重</span></span><br><span class="line">  server blog2 192.168.16.3:80 cookie blog2 check inter 1500 rise 3 fall 3 weight 2</span><br><span class="line">  <span class="comment">#服务器定义，cookie 1表示serverid为blog2，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用，fall 3是3次失败认为服务器不可用，weight代表权重</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##################backend server_bbs########################</span></span><br><span class="line">backend server_bbs</span><br><span class="line">  mode http <span class="comment">#http的7层模式</span></span><br><span class="line">  balance roundrobin <span class="comment">#负载均衡的方式，roundrobin平均方式</span></span><br><span class="line">  cookie SERVERID <span class="comment">#允许插入serverid到cookie中，serverid后面可以定义</span></span><br><span class="line">  option httpchk GET /index.html <span class="comment">#心跳检测的文件</span></span><br><span class="line">  server bbs1 192.168.16.2:80 cookie bbs1 check inter 1500 rise 3 fall 3 weight 1</span><br><span class="line">  <span class="comment">#服务器定义，cookie 1表示serverid为bbs1，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用，fall 3是3次失败认为服务器不可用，weight代表权重</span></span><br><span class="line">  server bbs2 192.168.16.3:80 cookie bbs2 check inter 1500 rise 3 fall 3 weight 2</span><br><span class="line">  <span class="comment">#服务器定义，cookie 1表示serverid为bbs2，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用，fall 3是3次失败认为服务器不可用，weight代表权重</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;haproxy的简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#haproxy的简介&quot;&gt;&lt;/a&gt; HAProxy的简介&lt;/h1&gt;
&lt;p&gt;HAProxy是一款提供高可用性、负载均衡以及基于TCP（第四层）和HTTP（第七层）应用的代理
      
    
    </summary>
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Linux初始化init系统：Sysvinit、Upstart和Systemd</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Linux%E5%88%9D%E5%A7%8B%E5%8C%96init%E7%B3%BB%E7%BB%9F/"/>
    <id>http://ruanxinyu.github.io/posts/技术文档/Linux初始化init系统/</id>
    <published>2018-09-22T07:04:38.000Z</published>
    <updated>2018-10-01T04:55:08.279Z</updated>
    
    <content type="html"><![CDATA[<h1 id="init系统介绍"><a class="markdownIt-Anchor" href="#init系统介绍"></a> init系统介绍</h1><p>Linux操作系统的启动首先从BIOS开始，接下来进入bootloader，由bootloader载入内核，进行内核初始化。内核初始化的最后一步就是启动<code>pid</code>为<code>1</code>的<code>init进程</code>。init以守护进程方式存在，是系统的第一个进程,，是所有其他进程的祖先。</p><p>Init系统能够定义、管理和控制 init进程的行为。它负责组织和运行许多独立的或相关的始化工作(因此被称为init系统)，从而让计算机系统进入某种用户预订的运行模式。</p><p>Linux初始化init系统包括：<code>Sysvinit</code>、<code>Upstart</code>和<code>Systemd</code>，它们在Ubuntu系统下的演化如下：</p><ol><li><code>Ubuntu 6.10</code>及以前版本使用Sysvinit。</li><li><code>Ubuntu 14.10</code>及以前版本使用Upstart，通过与Sysvinit并存。</li><li><code>Ubuntu 15.04</code>开始默认使用Systemd，不能与Sysvinit或Upstart并存</li></ol><h1 id="sysvinit介绍"><a class="markdownIt-Anchor" href="#sysvinit介绍"></a> Sysvinit介绍</h1><blockquote><p>Sysvinit就是System V风格的init系统，顾名思义，它源于System V系列UNIX。</p></blockquote><h2 id="运行级别"><a class="markdownIt-Anchor" href="#运行级别"></a> 运行级别</h2><p>Sysvinit用术语<code>runlevel</code>来定义&quot;预订的运行模式&quot;，默认的运行模式定义在<code>/etc/inittab</code>文件的<code>initdefault</code>项。如果没有默认的运行模式，那么用户将进入系统控制台，手动决定进入何种运行模式。</p><p>Sysvinit中运行模式描述了系统各种预订的运行模式。通常会有8种运行模式，即运行模式<code>0-6和S</code>。其中<code>0</code>表示关机，<code>1</code>表示单用户模式，<code>3</code>为命令行模式，<code>5</code>为GUI模式，<code>6</code>表示重启，<code>1和S</code>等往往用于系统故障之后的排错和恢复。可以看出每一种运行模式所作的初始化工作是不一样的。</p><h2 id="sysvinit执行顺序"><a class="markdownIt-Anchor" href="#sysvinit执行顺序"></a> Sysvinit执行顺序</h2><ul><li>/etc/rc.d/rc.sysinit</li><li>/etc/rc.d/rc 和/etc/rc.d/rcX.d/ (X 代表运行级别 0-6)</li><li>/etc/rc.d/rc.local</li><li>X Display Manager（可选）</li></ul><p>首先，运行<code>rc.sysinit</code>以便执行一些重要的系统初始化任务。</p><p>然后，Sysvinit开始运行<code>/etc/rc.d/rc</code>脚本。根据不同的runlevel，rc脚本将执行<code>/etc/rc.d/rcX.d</code>(X就是runlevel)目录下的所有启动脚本。当所有的初始化脚本执行完毕。该目录下有多个脚本，为了保证系统正常关闭，脚本是要按照顺序执行的在该目录下所有以<code>K</code>开头的脚本都将在关闭系统时调用，字母<code>K</code>之后的数字定义了它们的执行顺序。</p><p>然后，Sysvinit运行<code>/etc/rc.d/rc.local</code>脚本。rc.local是Linux 留给用户进行个性化设置的地方。</p><h2 id="sysvinit优缺点"><a class="markdownIt-Anchor" href="#sysvinit优缺点"></a> Sysvinit优缺点</h2><p>Sysvinit的优点：</p><ol><li>是概念简单，开发人员只需要编写启动和停止脚本，概念非常清楚</li><li>确定的执行顺序，脚本严格按照启动数字的大小顺序执行，一个执行完毕再执行下一个，这非常有益于错误排查</li></ol><p>Sysvinit的缺点：</p><ol><li>串行地执行脚本导致Sysvinit运行效率较慢</li><li>对动态设备加载等Linux新特性支持不友好</li></ol><h1 id="upstart介绍"><a class="markdownIt-Anchor" href="#upstart介绍"></a> Upstart介绍</h1><h2 id="开发upstart的缘由"><a class="markdownIt-Anchor" href="#开发upstart的缘由"></a> 开发UpStart的缘由</h2><p>当Linux内核进入2.6时代时，系统支持热插拔功能，一旦新外设连接到系统，内核便可以自动实时地发现它们，并初始化这些设备，进而使用它们。这为便携式设备用户提供了很大的灵活性。</p><p>Sysvinit启动时必须一次性把所有可能用到的服务都启动起来，即使该设备没有连接，因此会造成浪费，比如为了管理打印任务，系统需要启动CUPS等服务。</p><p>UpStart基于事件机制，比如U盘插入USB接口后，udev得到内核通知，发现该设备，这就是一个新的事件。UpStart在感知到该事件之后触发相应的等待任务，比如处理/etc/fstab 中存在的挂载点。采用这种事件驱动的模式，upstart 完美地解决了即插即用设备带来的新问题。</p><p>UpStart相对于Sysvinit具有如下的优势：</p><ul><li>更快地启动系统</li><li>当新硬件被发现时动态启动服务</li><li>硬件被拔除时动态停止服务</li></ul><h2 id="upstart的原理"><a class="markdownIt-Anchor" href="#upstart的原理"></a> UpStart的原理</h2><p>Upstart的基本概念和设计清晰明确。UpStart主要的概念是job和event。Job就是一个工作单元，用来完成一件工作，比如启动一个后台服务，或者运行一个配置命令。每个Job都等待一个或多个事件，一旦事件发生，upstart就触发该 job 完成相应的工作。</p><p>Job包括包括<code>TaskJob</code>，<code>SeriveJob</code>和<code>AbstractJob</code>。其中SeriveJob代表后台服务进程，一旦开始运行就成为一个后台进程，由init进程管理。</p><p>事件是个非常抽象的概念，下面我罗列出一些常见的事件，希望可以帮助您进一步了解事件的含义：</p><ul><li>系统上电启动，init 进程会发送&quot;start&quot;事件</li><li>根文件系统可写时，相应 job 会发送文件系统就绪的事件</li><li>一个块设备被发现并初始化完成，发送相应的事件</li><li>某个文件系统被挂载，发送相应的事件</li><li>类似 atd 和 cron，可以在某个时间点，或者周期的时间点发送事件</li><li>另外一个 job 开始或结束时，发送相应的事件</li><li>一个磁盘文件被修改时，可以发出相应的事件</li><li>一个网络设备被发现时，可以发出相应的事件</li><li>缺省路由被添加或删除时，可以发出相应的事件</li></ul><p>系统初始化的过程是在工作和事件的相互协作下完成的，可以大致描述如下:</p><blockquote><p>系统初始化时，init 进程开始运行，init 进程自身会发出不同的事件，这些最初的事件会触发一些工作运行。每个工作运行过程中会释放不同的事件，这些事件又将触发新的工作运行。如此反复，直到整个系统正常运行起来。</p></blockquote><p>UpStart是兼容SysvInit的runlevel的，通过触发执行<code>/etc/init/rc.conf</code>来执行<code>/etc/rc$.d/</code>目录下的所有脚本。</p><h1 id="systemd介绍"><a class="markdownIt-Anchor" href="#systemd介绍"></a> Systemd介绍</h1><p>Systemd提供了和Sysvinit以及LSBinitscripts兼容的特性。系统中已经存在的服务和进程无需修改。这降低了系统向systemd 迁移的成本，使得Systemd替换现有初始化系统成为可能。</p><p>Systemd的启动速度更快，提供了比UpStart更激进的并行启动能力，采用了socket/D-Bus Activation等技术启动服务，提供按需启动的能力，只有在某个服务被真正请求的时候才启动它，当该服务结束，systemd 可以关闭它，等待下次需要时再次启动它。</p><p>Systemd还提供如下等特性:</p><ul><li>和init比起来引导过程简化了很多</li><li>Systemd支持并发引导过程从而可以更快启动</li><li>通过控制组来追踪进程，而不是PID</li><li>优化了处理引导过程和服务之间依赖的方式</li><li>支持系统快照和恢复</li><li>监控已启动的服务；也支持重启已崩溃服务</li><li>包含了systemd-login模块用于控制用户登录</li><li>支持加载和卸载组件</li><li>低内存使用痕迹以及任务调度能力</li><li>记录事件的Journald模块和记录系统日志的syslogd模块</li></ul><h2 id="systemd的单元概念"><a class="markdownIt-Anchor" href="#systemd的单元概念"></a> Systemd的单元概念</h2><p>系统初始化需要执行的任务非常多。每一个任务都被Systemd 抽象为一个配置单元，即unit。当前单元类型如下：</p><ul><li><strong>service</strong>：代表一个后台服务进程，比如 mysqld。这是最常用的一类。</li><li><strong>socket</strong>：此类配置单元封装系统和互联网中的一个 套接字 。当下，systemd 支持流式、数据报和连续包的 AF_INET、AF_INET6、AF_UNIX socket 。每一个套接字配置单元都有一个相应的服务配置单元 。相应的服务在第一个&quot;连接&quot;进入套接字时就会启动(例如：nscd.socket 在有新连接后便启动 nscd.service)。</li><li><strong>device</strong>：此类配置单元封装一个存在于 Linux 设备树中的设备。每一个使用 udev 规则标记的设备都将会在 systemd 中作为一个设备配置单元出现。</li><li><strong>mount</strong>：此类配置单元封装文件系统结构层次中的一个挂载点。Systemd 将对这个挂载点进行监控和管理。比如可以在启动时自动将其挂载；可以在某些条件下自动卸载。Systemd 会将/etc/fstab 中的条目都转换为挂载点，并在开机时处理。</li><li><strong>automount</strong>：此类配置单元封装系统结构层次中的一个自挂载点。每一个自挂载配置单元对应一个挂载配置单元 ，当该自动挂载点被访问时，systemd 执行挂载点中定义的挂载行为。</li><li><strong>swap</strong>: 和挂载配置单元类似，交换配置单元用来管理交换分区。用户可以用交换配置单元来定义系统中的交换分区，可以让这些交换分区在启动时被激活。</li><li><strong>target</strong>：此类配置单元为其他配置单元进行逻辑分组。它们本身实际上并不做什么，只是引用其他配置单元而已。这样便可以对配置单元做一个统一的控制。这样就可以实现大家都已经非常熟悉的运行级别概念。比如想让系统进入图形化模式，需要运行许多服务和配置命令，这些操作都由一个个的配置单元表示，将所有这些配置单元组合为一个目标(target)，就表示需要将这些配置单元全部执行一遍以便进入目标所代表的系统运行状态。 (例如：multi-user.target 相当于在传统使用 SysV 的系统中运行级别 5)</li><li><strong>timer</strong>：定时器配置单元用来定时触发用户定义的操作，这类配置单元取代了 atd、crond 等传统的定时服务。</li><li><strong>snapshot</strong>：与 target 配置单元相似，快照是一组配置单元。它保存了系统当前的运行状态。</li></ul><h2 id="systemd的target和运行级别"><a class="markdownIt-Anchor" href="#systemd的target和运行级别"></a> Systemd的Target和运行级别</h2><p>systemd使用目标（target）替代了运行级别的概念，提供了更大的灵活性，如您可以继承一个已有的目标，并添加其它服务，来创建自己的目标。通过target文件夹的命令也可以看出对应的runlevel：</p><table><thead><tr><th>Sysvinit运行级别</th><th>Systemd目标</th><th>备注</th></tr></thead><tbody><tr><td>0</td><td>poweroff.target</td><td>关闭系统</td></tr><tr><td>1,s</td><td>rescue.target</td><td>单用户模式</td></tr><tr><td>2,4</td><td>multi-user.target</td><td>多用户，非图形化</td></tr><tr><td>3</td><td>multi-user.target</td><td>多用户，非图形化</td></tr><tr><td>5</td><td>graphical.target</td><td>多用户，图形化</td></tr><tr><td>6</td><td>reboot.target</td><td>重启</td></tr></tbody></table><img src="/posts/技术文档/Linux初始化init系统/2018-09-22-16-29-55.png" title="[blog.ruanxinyu.cn]"><h2 id="使用cc开发新的系统服务"><a class="markdownIt-Anchor" href="#使用cc开发新的系统服务"></a> 使用C/C++开发新的系统服务</h2><p>使用C/C++开发新的系统服务可能需要关注如下的内容：</p><ol><li>后台服务进程代码不需要执行两次派生来实现后台精灵进程，只需要实现服务本身的主循环即可。</li><li>不要调用 setsid()，交给 systemd 处理</li><li>不再需要维护 pid 文件。</li><li>Systemd 提供了日志功能，服务进程只需要输出到 stderr 即可，无需使用 syslog。</li><li>处理信号 SIGTERM，这个信号的唯一正确作用就是停止当前服务，不要做其他的事情。</li><li>SIGHUP 信号的作用是重启服务。</li><li>需要套接字的服务，不要自己创建套接字，让 systemd 传入套接字。</li><li>使用 sd_notify()函数通知 systemd 服务自己的状态改变。一般地，当服务初始化结束，进入服务就绪状态时，可以调用它。</li></ol><h2 id="unit文件的编写"><a class="markdownIt-Anchor" href="#unit文件的编写"></a> Unit文件的编写</h2><p>服务配置单元文件以<code>.service</code>为文件名后缀，默认时存放在<code>/lib/systemd/system/</code>目录下，然后链接到<code>/etc/systemd/system/</code>对应的目录下。下面以sshd的为例<code>/etc/system/system/sshd.service</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=OpenSSH server daemon</span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=/etc/sysconfig/sshd <span class="comment">#设置环境变量</span></span><br><span class="line">ExecStartPre=/usr/sbin/sshd-keygen</span><br><span class="line">ExecStart=/usrsbin/sshd –D <span class="variable">$OPTIONS</span></span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> –HUP <span class="variable">$MAINPID</span></span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=42s</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target  <span class="comment">#系统以该形式运行时，服务方可启动</span></span><br></pre></td></tr></table></figure><p>文件分为三个小节，其中<code>[Unit]</code>段和<code>[Install]</code>段是所有Unit文件通用的，用于配置服务的描述、依赖和随系统启动方式，而<code>[Service]</code>断则是服务类型的Unit文件（后缀为.service)特有的，用于定义服务的具体管理和操作方法。</p><p>在/etc/systemd/system 目录下还可以看到诸如*.wants 的目录，放在该目录下的配置单元文件等同于在<code>[Unit]</code>小节中的 wants关键字，即本单元启动时，还需要启动这些单元。比如您可以简单地把您自己写的 foo.service 文件放入 multi-user.target.wants 目录下，这样每次都会被默认启动了。</p><h3 id="unit参数"><a class="markdownIt-Anchor" href="#unit参数"></a> [Unit]参数</h3><ul><li><strong>Description</strong>： 一段描述这个Unit文件的文字，通常只是简短的一句话。</li><li><strong>Documentation</strong>：指定服务的文档，可以是一个或多个文档的URL路径。</li><li><strong>Requires</strong>：依赖的其他Unit列表，列在其中的Unit模块会在这个服务启动的同时被启动。</li><li><strong>Wants</strong>：与Requires相似，但只是在被配置的这个Unit启动时，触发启动列出的每个Unit模块，而不去考虑这些模块启动时候是否成功。</li><li><strong>After</strong>：与Requires相似，但是在后面列出的所有模块启动完成以后，才会启动当前的服务。与Requires不同的是，After不会因为依赖程序在运行过程中停止运行，导致当前服务也停止。</li><li><strong>Before</strong>：与After相反，在启动指定的任意一个模块之前，都会首先确保当前服务已经运行。</li><li><strong>BindsTo</strong>：与Requires非常相似，但是一种更强的关联。启动这个服务时会同时启动列出的所有模块，当有模块启动失败时终止当前服务。反之，只要列出的模块全部启动以后，就会自动启动当前服务。并且，这些模块中有任意一个出现意外结束或重启，这个服务会跟着终止或重启。</li><li><strong>PartOf</strong>：这是一个BindsTo作用的子集，仅在列出的任何模块失败或重启时，终止或重启当前服务，而不会随列出模块的启动而启动。</li><li><strong>OnFailure</strong>：当这个模块启动失败时，就自动启动列出的每个模块。</li><li><strong>Conflicts</strong>：与这个模块有冲突的模块，如果列出的模块中有已经在运行的，则会将已启动的冲突模块停止，并启动当前模块；反过来，冲突模块启动时会把当前模块停止。</li></ul><blockquote><p>上面的这些配置，除了Description外，其他都可以被添加多次。比如After参数，可以使用多个After参数，也可以在一行内使用空格分割，写多个依赖模块。</p></blockquote><h3 id="install参数"><a class="markdownIt-Anchor" href="#install参数"></a> [install]参数</h3><ul><li><strong>WantedBy</strong>：和前面Wants作用相似，但此处表示当前模块被依赖。</li><li><strong>RequiredBy</strong>：和前面的Requires作用相似，但此处表示当前模块被依赖。</li><li><strong>Also</strong>：当这个服务被enable/disable时，将自动enable/disable后面列出的每个模块。</li></ul><h3 id="service参数"><a class="markdownIt-Anchor" href="#service参数"></a> [service]参数</h3><h4 id="服务生命周期控制相关的参数"><a class="markdownIt-Anchor" href="#服务生命周期控制相关的参数"></a> 服务生命周期控制相关的参数</h4><ul><li><strong>Type</strong>：服务的类型，常用的有simple（默认类型）和forking，默认的simple类型可以适用于绝大多数场景，因此一般可以忽略者这个参数的配置。对于服务进程启动后通过fork系统调用创建子进程，然后关闭应用程序本身进程的情况，则应该将Type的值设置为forking；否则Systemd将不会跟踪子进程的行为，而认为服务已经退出。</li><li><strong>RemainAfterExit</strong>：指为true或false（也可以写yes或no），默认为false。当配置为true时，Systemd只会负责启动服务进程，之后即便服务进程退出了，Systemd也仍然会认为这个服务还在运行中。这个配置主要是提供给一些并非常驻内存，而是启动注册后立即退出，然后等待消息按需启动的特殊类型服务使用的。</li><li><strong>ExecStart</strong>：这个参数是几乎每个“.service”文件都会有的，指定服务启动的主要命令，在每个配置文件中只能使用一次.</li><li><strong>ExecStartPre</strong>：指定在启动执行ExecStart命令前的准备工作，在同一个配置文件中可以有多个，所有命令会按照文件中书写的顺序依次被执行。</li><li><strong>ExecStartPost</strong>：指定在启动执行ExecStart命令后的收尾工作，在同一个配置文件中也可有多个。</li><li><strong>TimeoutSec</strong>：快速设置TimeoutStartSec和TimeoutStopSec参数成指定值。（另外，关于默认时间设定都在systemd配置文件中的DefaultTimeoutStartSec、DefaultTimeoutStopSec和DefaultRestartSec字段进行配置，如果这些字段缺省，DefaultTimeoutStartSec和DefaultTimeoutStopSec的默认指为90s，DefaultRestartSec默认为100ms）</li><li><strong>TimeoutStartSec</strong>：启动服务时的等待秒数，如果超出这个时间服务仍然没有执行完所有的启动命令，则Systemd会认为服务自动失败。这一配置对于使用Docker容器托管的应用十分重要。由于Docker第一次运行时可能会需要从网络上下载服务的镜像文件，因此造成比较严重的延时，容易被Systemd误判断为启动失败而杀死。通常，对于这种服务，需要将TimeoutStartSec设置为0，关闭超时检测。</li><li><strong>ExecStop</strong>：停止服务所需要执行的主要命令，在每个配置文件中只能够有一个。</li><li><strong>ExecStopPost</strong>：指定在ExecStop命令执行后的收尾工作，在同一配置文件中可以有多个。</li><li><strong>TimeoutStopSec</strong>：停止服务时的等待秒数，如果超过这个时间服务仍然没有停止，Systemd会使用SIGKILL信号强行干掉服务进程。</li><li><strong>Restart</strong>：这个值用于指定在什么情况下需要重启服务进程。常用的值有：no、no-success、on-failure、on-abnormal、on-abort和always。默认值为no，即不会自动重启服务。这些不同的值分别表示在哪些情况下，服务会重新启动。</li><li><strong>RestartSec</strong>：如果服务需要被重启，这个参数的值为服务被重启前的等待秒数。默认为100ms。</li><li><strong>ExecReload</strong>：重新加载服务所需执行的主要命令。</li></ul><h4 id="服务上下文配置相关的参数"><a class="markdownIt-Anchor" href="#服务上下文配置相关的参数"></a> 服务上下文配置相关的参数</h4><ul><li><strong>Environment</strong>：为服务添加环境变量，格式直接为Environment=“foo=bar”（看了一下Systemd的手册，这个参数所接受的格式有些奇葩，建议是直接“foo=bar”，取的时候使用${foo}进行获取）</li><li><strong>EnvironmentFile</strong>：指定加载一个包含服务所需的环境变量列表的文件，文件中的每一行都是一个环境变量的定义。顺便提一下，建议使用的时候将=换成=-，如EnvironmentFile=-/etc/my.env，和=的区别是，使用=-时，假如/etc/my.env文件不在也不会报错。</li><li><strong>Nice</strong>：服务的进程优先级，指越小优先级越高，默认为0，。其中-20为最高优先级，19为最低优先级。</li><li><strong>WorkingDirectory</strong>：指定当前服务的工作目录。</li><li><strong>RootDirectory</strong>：指定当前服务进程的根目录（/目录）。如果配置了这个参数，服务将无法访问指定目录外的任何文件。</li><li><strong>User</strong>：指定运行服务的用户，会影响服务对本地文件系统的访问权限。</li><li><strong>Group</strong>：指定运行服务的用户组，会影响服务对本地文件系统的访问权限。</li><li><strong>MountFlags</strong>：这个值其实是服务的Mount Namespace的配置，会影响服务进程上下文中挂载点的信息，即服务是否会继承主机上已有的挂载点，以及如果服务运行时执行了挂载或卸载设备的操作，是否会真实地在主机上产生效果。可选值为shared、slave和private，具体作用如下表所示：</li><li><strong>LimitCPU/LimitSTACK/LimitNOFILE/LimitNPROC等</strong>：限定服务可用的系统资源量，CPU、程序堆栈、文件句柄数量、子进程数量等</li></ul><h2 id="systemd命令行工具的使用"><a class="markdownIt-Anchor" href="#systemd命令行工具的使用"></a> Systemd命令行工具的使用</h2><p>systemd 的主要命令行工具是<code>systemctl</code>，可以替换<code>service</code>、<code>chkconfig</code>以及<code>telinit</code>命令的使用。</p><h3 id="systemd命令和sysvinit命令的对照表"><a class="markdownIt-Anchor" href="#systemd命令和sysvinit命令的对照表"></a> Systemd命令和sysvinit命令的对照表</h3><table><thead><tr><th>Sysvinit命令</th><th>Systemd命令</th><th>备注</th></tr></thead><tbody><tr><td>service foo start</td><td>systemctl start foo.service</td><td>用来启动一个服务 (并不会重启现有的)</td></tr><tr><td>service foo stop</td><td>systemctl stop foo.service</td><td>用来停止一个服务 (并不会重启现有的)</td></tr><tr><td>service foo restart</td><td>systemctl restart foo.service</td><td>用来停止并启动一个服务</td></tr><tr><td>service foo reload</td><td>systemctl reload foo.service</td><td>当支持时，重新装载配置文件而不中断等待操作</td></tr><tr><td>service foo condrestart</td><td>systemctl condrestart foo.service</td><td>如果服务正在运行那么重启它</td></tr><tr><td>service foo status</td><td>systemctl status foo.service</td><td>汇报服务是否正在运行</td></tr><tr><td>ls /etc/rc.d/init.d/</td><td>systemctl list-unit-files --type=service</td><td>用来列出可以启动或停止的服务列表</td></tr><tr><td>chkconfig foo on</td><td>systemctl enable foo.service</td><td>在下次启动时或满足其他触发条件时设置服务为启用</td></tr><tr><td>chkconfig foo off</td><td>systemctl disable foo.service</td><td>在下次启动时或满足其他触发条件时设置服务为禁用</td></tr><tr><td>chkconfig foo</td><td>systemctl is-enabled foo.service</td><td>用来检查一个服务在当前环境下被配置为启用还是禁用</td></tr><tr><td>chkconfig –list</td><td>systemctl list-unit-files --type=service</td><td>输出在各个运行级别下服务的启用和禁用情况</td></tr><tr><td>chkconfig foo –list</td><td>ls /etc/systemd/system/*.wants/foo.service</td><td>用来列出该服务在哪些运行级别下启用和禁用</td></tr><tr><td>chkconfig foo –add</td><td>systemctl daemon-reload</td><td>当您创建新服务文件或者变更设置时使用</td></tr><tr><td>telinit 3</td><td>systemctl isolate multi-user.target (OR systemctl isolate runlevel3.target OR telinit 3)</td><td>改变至多用户运行级别</td></tr></tbody></table><h3 id="systemd电源管理命令"><a class="markdownIt-Anchor" href="#systemd电源管理命令"></a> systemd电源管理命令</h3><table><thead><tr><th>命令</th><th>操作</th></tr></thead><tbody><tr><td>systemctl reboot</td><td>重启机器</td></tr><tr><td>systemctl poweroff</td><td>关机</td></tr><tr><td>systemctl suspend</td><td>待机</td></tr><tr><td>systemctl hibernate</td><td>休眠</td></tr><tr><td>systemctl hybrid-sleep</td><td>混合休眠模式（同时休眠到硬盘并待机）</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;init系统介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#init系统介绍&quot;&gt;&lt;/a&gt; init系统介绍&lt;/h1&gt;
&lt;p&gt;Linux操作系统的启动首先从BIOS开始，接下来进入bootloader，由bootloader载入内核，
      
    
    </summary>
    
      <category term="Linux" scheme="http://ruanxinyu.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ruanxinyu.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下KeepAlived的安装与配置</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/Ubuntu%E4%B8%8BKeepAlived%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://ruanxinyu.github.io/posts/技术文档/Ubuntu下KeepAlived的安装与配置/</id>
    <published>2018-09-18T12:42:46.000Z</published>
    <updated>2018-10-05T12:20:45.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="keepalived介绍"><a class="markdownIt-Anchor" href="#keepalived介绍"></a> KeepAlived介绍</h1><p>Keepalived是一个基于VRRP协议来实现的服务高可用方案，可以利用其来避免IP单点故障，一般与其它负载均衡技术（如lvs、haproxy、nginx）一起工作来达到集群的高可用。</p><p>健康检查和失败切换是keepalived的两大核心功能。</p><p>keepalived的健康检查支持tcp三次握手、icmp请求、http请求、udp和echo请求等方式对负载均衡器后面的实际的服务器)进行保活，具体采用哪种检查方式可以根据自己的业务需要进行选择；</p><p>失败切换主要是应用于配置了主备模式的负载均衡器， 由VRRP(虚拟路由冗余协议）协议实现，对外提供一个VIP（虚拟IP），VIP在其中master机器上，当该机器出现故障时，VIP会自动漂移到slave的机器上，从而保证对外的功能是正常的。如果mastr机器功能正常之后，会自动加入到服务器集群中，无需人工干预，只需要人工做修复故障的服务器。</p><h1 id="vrrp协议介绍"><a class="markdownIt-Anchor" href="#vrrp协议介绍"></a> VRRP协议介绍</h1><p>VRRP（虚拟路由协议，virtual redundant routing protocol)是为消除网络设备单点故障而设计的主备模式的协议，使得在发生故障时，可以在不影响内外数据通信，不修改内部网络的网络参数的情况下切换设备。</p><p>VRRP协议通过配置虚拟路由ID(VRID)来将两台或多台设备虚拟成一个虚拟设备，对外提供一个或多个虚拟IP(VIP)和虚拟的MAC地址（VMC），通过该VIP和VMC对外提供服务，可以保证在设备切换时网络参数不变。所以当VIP在哪一台设备上，则该设备为master节点对外提供服务，其他的节点为backup节点不实际对外提供服务。</p><p>VRRP协议通过心跳算法自动选举哪个节点为master节点，默认使用多播数据来传输VRRP数据。通过配置文件可以指定每个设备的优先级，所以在初始状态时，优先级最大的为master节点。VRRP运行时只有MASTER路由器定时发送VRRP通告信息，表示master工作正常，backup只接收VRRP数据，不发送数据，如果一定时间内没有接收到master的通告信息，各backup将宣告自己成为master，发送通告信息，重新进行master选举状态。</p><h1 id="keepalived的安装"><a class="markdownIt-Anchor" href="#keepalived的安装"></a> KeepAlived的安装</h1><p>该教程使用的Ubuntu版本是18.04.1版本，Ubuntu的安装教程参考。KeepAlived可以直接通过apt-get安装，也可以通过源码编译安装。</p><h2 id="apt-get安装"><a class="markdownIt-Anchor" href="#apt-get安装"></a> apt-get安装</h2><p>Ubuntu下执行<code>sudo apt-get install keepalived</code>命令即可安装。</p><p>通过<code>which keepalived</code>可以看到KeepAlived是安装在<code>/usr/sbin/keepalived</code>下。</p><p>使用<code>sudo service keepalived start</code>即可启动KeepAlived。</p><h2 id="源码编译安装"><a class="markdownIt-Anchor" href="#源码编译安装"></a> 源码编译安装</h2><p>源码安装的脚本可以点击此处下载： <a href="/posts/技术文档/Ubuntu下KeepAlived的安装与配置/keepalived_install.sh" title="keepalived_install.sh">keepalived_install.sh</a>，下面对安装过程做一下说明。</p><p>首先安装编译工具和openssl，下载KeepAlived源码并解压，然后执行源码编译三件套（<code>./configure &amp;&amp; make &amp;&amp; make install</code>），我们安装的目录为<code>/usr/local/keepalived</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential libssl-dev <span class="comment"># 安装编译工具和openssl依赖</span></span><br><span class="line">wget http://www.keepalived.org/software/keepalived-2.0.7.tar.gz <span class="comment"># 下载源码</span></span><br><span class="line">tar -zxvf keepalived-2.0.7.tar.gz <span class="comment"># 解压源码</span></span><br><span class="line"><span class="built_in">cd</span> keepalived-2.0.7/</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/keepalived <span class="comment"># 配置keepalived的安装目录</span></span><br><span class="line">make <span class="comment"># 编译源码</span></span><br><span class="line">sudo make install <span class="comment"># 安装到安装目录，需要使用root权限</span></span><br></pre></td></tr></table></figure><p><strong>可能遇到的问题</strong></p><ol><li>执行<code>./configure</code>时提示<code>g++ is not found</code></li></ol><blockquote><p>源码安装需要安装编译器将源码转换为二进制可执行文件，因此执行<code>sudo apt-get install build-essential</code>安装编译器即可</p></blockquote><ol><li>执行<code>./configure</code>时提示<code>OpenSSL is not properly installed on your system</code></li></ol><blockquote><p>你的系统没有安装openssl，执行<code>sudo apt-get install libssl-dev</code>即可</p></blockquote><h1 id="守护进程和开机启动"><a class="markdownIt-Anchor" href="#守护进程和开机启动"></a> 守护进程和开机启动</h1><p>由于Ubunt 18.04.1默认使用Systemd作为init程序，因此设置守护进程也采用该方式，了解详细请参考</p><p>首先，创建相关文件的链接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/keepalived</span><br><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/keepalived/sbin/keepalived /usr/sbin/</span><br><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf</span><br><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/keepalived/etc/sysconfig/keepalived /etc/default/keepalived</span><br></pre></td></tr></table></figure><p>我们还是采用systemd的方式添加到系统服务，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line">cat &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Keepalive Daemon (LVS and VRRP)</span><br><span class="line">After=syslog.target network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"><span class="comment"># Only start if there is a configuration file</span></span><br><span class="line">ConditionFileNotEmpty=/etc/keepalived/keepalived.conf</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">KillMode=process</span><br><span class="line"><span class="comment"># Read configuration variable file if it is present</span></span><br><span class="line">EnvironmentFile=-/etc/default/keepalived</span><br><span class="line">ExecStart=/usr/sbin/keepalived <span class="variable">$KEEPALIVED_OPTIONS</span></span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -HUP <span class="variable">$MAINPID</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line">) &gt; keepalived.service</span><br><span class="line"></span><br><span class="line">sudo cp -a keepalived.service /lib/systemd/system/keepalived.service</span><br><span class="line">sudo ln -s /lib/systemd/system/keepalived.service /etc/systemd/system/multi-user.target.wants/keepalived.service</span><br></pre></td></tr></table></figure><p>启动keepalived进程，并设置为开机启动，通过<code>sudo systemctl status keepalived</code>查看状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start keepalived</span><br><span class="line">sudo systemctl status keepalived</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> keepalived</span><br></pre></td></tr></table></figure><img src="/posts/技术文档/Ubuntu下KeepAlived的安装与配置/2018-09-24-16-41-22.png" title="[blog.ruanxinyu.cn]"><h1 id="keepalive的配置"><a class="markdownIt-Anchor" href="#keepalive的配置"></a> KeepAlive的配置</h1><h2 id="keepalivedconf"><a class="markdownIt-Anchor" href="#keepalivedconf"></a> keepalived.conf</h2><p>在keepalived的安装目录<code>/usr/local/keepalived/etc/keepalived/samples/</code>有很多样例配置，每一种配置对应的都是一种使用场景，后续会做详细说明，因此在此处不做过多的分析。</p><p>此处使用最简单的配置入门，假设我们以<code>/tmp/</code>目录下是否存在<code>service_ok</code>这个文件来判断服务是否可用。可参考样例<code>/usr/local/keepalived/etc/keepalived/samples/keepalived.conf.vrrp.localcheck</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vrrp_script chk_service_ok &#123;</span><br><span class="line">       script <span class="string">"ls /tmp/service_ok"</span>    <span class="comment"># 检查文件是否存在</span></span><br><span class="line">       interval 2                     <span class="comment"># 每两秒钟检查一次</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    interface enp0s3                  <span class="comment"># 指定网卡</span></span><br><span class="line">    state MASTER                      <span class="comment"># 角色，主机为MASTER，备机为BACKUP</span></span><br><span class="line">    virtual_router_id 51              <span class="comment"># 虚拟路由Id，相同的ID表示在相同的组</span></span><br><span class="line">    priority 100                      <span class="comment"># 优先级，MASTER的优先级要比BACKUP的大</span></span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;               <span class="comment"># 虚拟IP地址，即VIP</span></span><br><span class="line">        192.168.42.23/25</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;                    <span class="comment"># 设置vrrp检查脚本的名称</span></span><br><span class="line">       chk_service_ok</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="keepalived的验证"><a class="markdownIt-Anchor" href="#keepalived的验证"></a> KeepAlived的验证</h1><p>我们使用两台虚拟机，IP地址分别为主机vm01（<code>192.168.42.21</code>）和备机vm02（<code>192.168.42.22</code>）， VIP为<code>192.168.42.23</code>。安装好KeepAlived后, 编辑配置文件<code>sudo vim /etc/keepalived/keepalived.conf</code></p><ol><li>主机vm01（<code>192.168.42.21</code>）的配置如下：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vrrp_script chk_service_ok &#123;</span><br><span class="line">       script <span class="string">"ls /tmp/service_ok"</span></span><br><span class="line">       interval 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    interface enp0s3</span><br><span class="line">    state MASTER</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.42.23/25</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">       chk_service_ok</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>备机vm02（<code>192.168.42.22</code>）的配置如下，相对于vm01，只修改<code>state</code>和<code>priority</code>:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vrrp_script chk_service_ok &#123;</span><br><span class="line">       script <span class="string">"ls /tmp/service_ok"</span></span><br><span class="line">       interval 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    interface enp0s3</span><br><span class="line">    state BACKUP</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 80</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.42.23/25</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">       chk_service_ok</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，我们在两台机器上都创建一个system_ok文件，表示机器是OK的，<code>touch /tmp/service_ok</code>。然后执行<code>sudo systemctl restart keepalived</code>重新启动两台机器的keepalived。</p><p>分别在两台机器上执行<code>ip a</code>查看机器的网络信息，可以发现VIP（<code>192.168.42.23</code>）已经在主机vm01上，我们通过<code>ssh ruan@192.168.42.23</code>登陆到的也是主机vm01。</p><img src="/posts/技术文档/Ubuntu下KeepAlived的安装与配置/2018-09-24-16-53-52.png" title="[blog.ruanxinyu.cn]"><p>我们删除主机vm01上的<code>/tmp/service_ok</code>文件，然后重新执行<code>ip a</code>，发现VIP（<code>192.168.42.23</code>）已经漂移到备机vm02上，此时我们通过<code>ssh ruan@192.168.42.23</code>登陆则是备机vm02。即当主机故障时，业务可以自动切换至备机。</p><img src="/posts/技术文档/Ubuntu下KeepAlived的安装与配置/2018-09-24-16-58-02.png" title="[blog.ruanxinyu.cn]"><p>我们重新创建主机vm01上的<code>/tmp/service_ok</code>文件，，然后重新执行<code>ip a</code>，发现VIP（<code>192.168.42.23</code>）已经重新漂移到备机vm01上，此时我们通过<code>ssh ruan@192.168.42.23</code>登陆重新回到主机vm01。即当主机恢复时，可以自动将该主机加入到服务器群提供服务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;keepalived介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#keepalived介绍&quot;&gt;&lt;/a&gt; KeepAlived介绍&lt;/h1&gt;
&lt;p&gt;Keepalived是一个基于VRRP协议来实现的服务高可用方案，可以利用其来避免I
      
    
    </summary>
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>VirtualBox安装Ubuntu教程</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/VirtualBox%E5%AE%89%E8%A3%85Ubuntu%E6%95%99%E7%A8%8B/"/>
    <id>http://ruanxinyu.github.io/posts/技术文档/VirtualBox安装Ubuntu教程/</id>
    <published>2018-09-16T11:59:38.000Z</published>
    <updated>2018-10-02T12:13:47.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础准备工作"><a class="markdownIt-Anchor" href="#基础准备工作"></a> 基础准备工作</h1><p>本教程使用的VirtualBox版本为<code>5.2.18</code>，Ubuntu版本为<code>server 18.04.1</code>。</p><p>首先，下载Ubuntu Server镜像，本文以ubuntu-18.04.1为例，可以从华为开源镜像站提供加速下载，地址为： <a href="http://mirrors.huaweicloud.com/repository/ubuntu-releases/18.04.1/ubuntu-18.04.1-live-server-amd64.iso" target="_blank" rel="noopener">http://mirrors.huaweicloud.com/repository/ubuntu-releases/18.04.1/ubuntu-18.04.1-live-server-amd64.iso</a></p><p>下载并安装VirtualBox，下载地址为: <a href="https://download.virtualbox.org/virtualbox/5.2.18/VirtualBox-5.2.18-124319-Win.exe" target="_blank" rel="noopener">https://download.virtualbox.org/virtualbox/5.2.18/VirtualBox-5.2.18-124319-Win.exe</a></p><h1 id="创建虚拟机"><a class="markdownIt-Anchor" href="#创建虚拟机"></a> 创建虚拟机</h1><ol><li>打开VirtualBox，点击<code>新建</code>, 输入名称，比如叫做<code>UbuntuTemplate</code>，之所以叫这个名称是因为如果后续需要多个Ubuntu虚拟机的话，可以直接复制该虚拟机，这样每次都可以有一个全新的虚拟机。操作系统版本选择<code>Ubuntu(64bit)</code>, 点击下一步，内存选择512M或者1024M都可以，因为我们下载的镜像是没有桌面的，因此对内存要求没有那么大。</li></ol><img src="/posts/技术文档/VirtualBox安装Ubuntu教程/2018-09-16-20-11-35.png" title="[blog.ruanxinyu.cn]"><ol start="2"><li>选择<code>现在创建虚拟磁盘</code>，当然，如果也可以使用已经存在的磁盘，下一步，磁盘类型我更愿意用<code>VMDK(虚拟机磁盘)</code>，因此该磁盘VMWare也是可以使用的，磁盘大小选择<code>动态分配大小</code>。</li></ol><img src="/posts/技术文档/VirtualBox安装Ubuntu教程/2018-09-16-20-14-32.png" title="[blog.ruanxinyu.cn]"><ol start="3"><li>此处有两个地方需要注意一下：</li></ol><blockquote><ol><li>选择磁盘的保存位置默认为虚拟机名称，这个时候是保存在用户目录下的，也就是C盘，因此<strong>最好是自己选择路径保存到其他目录</strong>，以免占用过多的C盘空间。</li><li>此处设置的其实是磁盘的最大大小，默认的10G肯定是太小了，可以直接改成<code>100G</code>, 这个是最大值，不是立即分配这么大的磁盘空间。</li></ol></blockquote><img src="/posts/技术文档/VirtualBox安装Ubuntu教程/2018-09-16-20-18-22.png" title="[blog.ruanxinyu.cn]"><h1 id="设置虚拟机"><a class="markdownIt-Anchor" href="#设置虚拟机"></a> 设置虚拟机</h1><h2 id="设置粘贴板"><a class="markdownIt-Anchor" href="#设置粘贴板"></a> 设置粘贴板</h2><img src="/posts/技术文档/VirtualBox安装Ubuntu教程/2018-09-16-20-26-02.png" title="[blog.ruanxinyu.cn]"><h2 id="导入操作系统镜像"><a class="markdownIt-Anchor" href="#导入操作系统镜像"></a> 导入操作系统镜像</h2><p>从设置的系统标签页中可以看出系统的启动顺序是“软驱”-&gt;“光驱”-&gt;“硬盘”，因此只要在光驱中导入刚刚下载的操作系统镜像，启动的虚拟机的时候就会开始安装操作系统。</p><img src="/posts/技术文档/VirtualBox安装Ubuntu教程/2018-09-16-20-30-36.png" title="[blog.ruanxinyu.cn]"><h2 id="设置虚拟机网络"><a class="markdownIt-Anchor" href="#设置虚拟机网络"></a> 设置虚拟机网络</h2><p>虚拟机的网络连接方式有很多中，因为涉及到很多网络知识，总结起来就是一张表，如下所示：</p><img src="/posts/技术文档/VirtualBox安装Ubuntu教程/2018-09-16-21-22-53.png" title="[blog.ruanxinyu.cn]"><p>因为在做实验的情况下，默认都是希望虚拟机能够访问外网，虚拟机与虚拟机之间，虚拟机与宿主机之间也是可以相互访问的，因此选择桥接模式，网卡选择你当前正在使用的网卡，这样你的虚拟机就相当于是另外与宿主机相同的电脑。</p><img src="/posts/技术文档/VirtualBox安装Ubuntu教程/2018-09-16-20-35-30.png" title="[blog.ruanxinyu.cn]"><h1 id="安装ubuntu"><a class="markdownIt-Anchor" href="#安装ubuntu"></a> 安装Ubuntu</h1><blockquote><p>通过方向键移动，回车确认，如果发现鼠标在虚拟机捕获出不来了，可以按键盘右边的<code>CTRL</code>键</p></blockquote><p>启动虚拟机，语言选择英文，然后选择<code>Install Ubuntu</code>。</p><img src="/posts/技术文档/VirtualBox安装Ubuntu教程/2018-09-16-20-55-08.png" title="[blog.ruanxinyu.cn]"><p>如果你的宿主机连接的是路由器，那么一般都是通过DHCP自动分配的IP地址，这样的话虚拟机也能通过DHCP自动获取IP地址，从下图中可以看出对应的IP。</p><img src="/posts/技术文档/VirtualBox安装Ubuntu教程/2018-09-16-20-55-47.png" title="[blog.ruanxinyu.cn]"><p>如果你的宿主机能够正常上网就不需要配置proxy，直接回车确认下一步就可以。</p><img src="/posts/技术文档/VirtualBox安装Ubuntu教程/2018-09-16-20-58-24.png" title="[blog.ruanxinyu.cn]"><p>配置Ubuntu的源，也就是安装软件的默认下载地址，为了提高下载速度，我一般使用华为开源镜像站的源：<a href="https://mirrors.huaweicloud.com/ubuntu/" target="_blank" rel="noopener">https://mirrors.huaweicloud.com/ubuntu/</a></p><img src="/posts/技术文档/VirtualBox安装Ubuntu教程/2018-09-16-21-02-30.png" title="[blog.ruanxinyu.cn]"><p>我们可以手动对磁盘进行分区，但是这个需要对Linux很熟悉，因此此处我们直接选择<code>Use An Entre Disk</code>，让操作系统自动分区。</p><img src="/posts/技术文档/VirtualBox安装Ubuntu教程/2018-09-16-21-03-45.png" title="[blog.ruanxinyu.cn]"><p>接下来会让你确认磁盘和分区信息，我们继续就可以。</p><img src="/posts/技术文档/VirtualBox安装Ubuntu教程/2018-09-16-21-06-02.png" title="[blog.ruanxinyu.cn]"><p>然后输入你的主机名和密码等信息，<code>ssh identify</code>是用于免密码登陆linux的，一般不需要设置。</p><img src="/posts/技术文档/VirtualBox安装Ubuntu教程/2018-09-16-21-08-19.png" title="[blog.ruanxinyu.cn]"><p>接下来会让你安装一些默认的应用程序，也可以什么都不装，保持一个最纯净的系统。</p><img src="/posts/技术文档/VirtualBox安装Ubuntu教程/2018-09-16-21-09-27.png" title="[blog.ruanxinyu.cn]"><p>等待安装完毕，就可以开开心心重启了，</p><img src="/posts/技术文档/VirtualBox安装Ubuntu教程/2018-09-16-21-15-58.png" title="[blog.ruanxinyu.cn]"><p>重启的过程中VirtualBox会提示你是否将光驱中的镜像移除掉，直接回车就可以移除就剋有了，这样就可以直接从磁盘启动你刚刚安装的系统，否则还是会从光驱中启动。</p><img src="/posts/技术文档/VirtualBox安装Ubuntu教程/2018-09-16-21-17-37.png" title="[blog.ruanxinyu.cn]"><p>启动后输入用户名密码，输入<code>ip a</code>命令可以看到虚拟机的IP地址:</p><blockquote><p>由于Ubuntu自带的控制台使用不是很方便，因此可以直接通过xshell连接该虚拟机</p></blockquote><img src="/posts/技术文档/VirtualBox安装Ubuntu教程/2018-09-16-21-26-23.png" title="[blog.ruanxinyu.cn]"><h1 id="virtualbox的使用说明"><a class="markdownIt-Anchor" href="#virtualbox的使用说明"></a> VirtualBox的使用说明</h1><h2 id="鼠标捕获"><a class="markdownIt-Anchor" href="#鼠标捕获"></a> 鼠标捕获</h2><p>如果发现鼠标在虚拟机捕获出不来了，可以按键盘右边的<code>CTRL</code>键</p><h2 id="保存快照"><a class="markdownIt-Anchor" href="#保存快照"></a> 保存快照</h2><p>如下所示，一般第一次安装的时候都做一次快照，因此这样即使后续做了破坏性的操作也可以快速还原。</p><img src="/posts/技术文档/VirtualBox安装Ubuntu教程/2018-09-16-21-29-57.png" title="[blog.ruanxinyu.cn]"><h2 id="快速保存并恢复"><a class="markdownIt-Anchor" href="#快速保存并恢复"></a> 快速保存并恢复</h2><p>关闭虚拟机时可以选择<code>快速休眠</code>，下次启动的时候就可以快速从将虚拟机从当前状态恢复。</p><img src="/posts/技术文档/VirtualBox安装Ubuntu教程/2018-09-16-21-34-53.png" title="[blog.ruanxinyu.cn]"><h2 id="复制虚拟机"><a class="markdownIt-Anchor" href="#复制虚拟机"></a> 复制虚拟机</h2><p>在做实验的时候需要使用多个虚拟机，不用重新安装，直接复制虚拟机即可，在对应的虚拟机上右键就可以，需要在关机的状态下才能复制。但是在复制虚拟机之后最后刷新一下网卡的MAC地址，否则可能会出现相同MAC地址的情况。</p><img src="/posts/技术文档/VirtualBox安装Ubuntu教程/2018-09-26-15-33-38.png" title="[blog.ruanxinyu.cn]">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础准备工作&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基础准备工作&quot;&gt;&lt;/a&gt; 基础准备工作&lt;/h1&gt;
&lt;p&gt;本教程使用的VirtualBox版本为&lt;code&gt;5.2.18&lt;/code&gt;，Ubuntu版本为&lt;code&gt;server
      
    
    </summary>
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>每天学习一个Linux命令（3）：echo命令</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4%EF%BC%883%EF%BC%89%EF%BC%9Aecho%E5%91%BD%E4%BB%A4/"/>
    <id>http://ruanxinyu.github.io/posts/每天学习一个Linux命令/每天学习一个Linux命令（3）：echo命令/</id>
    <published>2018-05-02T11:20:58.000Z</published>
    <updated>2018-08-12T13:13:07.219Z</updated>
    
    <content type="html"><![CDATA[<p><code>echo</code>命令用于输出字符串，可以通过参数和转义等来控制输出格式。</p><h1 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> 语法</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo [-neE] [arg ...]</span><br></pre></td></tr></table></figure><h1 id="参数"><a class="markdownIt-Anchor" href="#参数"></a> 参数</h1><ul><li><code>-n</code> 打印不添加换行符</li><li><code>-e</code> 使能转义字符</li></ul><h1 id="转义字符"><a class="markdownIt-Anchor" href="#转义字符"></a> 转义字符</h1><ul><li><code>\b</code> 退格键，即删除一个字符</li><li><code>\c</code> 抑制后续的输出</li><li><code>\n</code> 换行</li><li><code>\t</code> tab键</li><li><code>\\</code> 斜杠</li></ul><h1 id="使用小技巧"><a class="markdownIt-Anchor" href="#使用小技巧"></a> 使用小技巧</h1><ol><li><code>echo</code>是shell的内部命令，因此查看帮助需要使用<code>help echo</code></li><li><code>echo</code>后的字符串如果使用单引号括起来，则转义和变量都失效<code>(重要)</code></li><li>通过<code>-e</code>参数和<code>\c</code>转义可以控制换行的输出</li></ol><h1 id="常用范例"><a class="markdownIt-Anchor" href="#常用范例"></a> 常用范例</h1><p><strong>范例1： 显示普通字符串</strong><br>命令： <code>echo &quot;this is a text&quot;</code> # 也可以不加引号<br>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is a text</span><br></pre></td></tr></table></figure><p><strong>范例2： 显示转义字符</strong><br>命令： <code>echo &quot;\&quot;this is a text\&quot;&quot;</code><br>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;this is a text&quot;</span><br></pre></td></tr></table></figure><p><strong>范例3： 显示变量</strong><br>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">text=<span class="string">"ffff"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"this is a <span class="variable">$&#123;text&#125;</span>"</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is a ffff</span><br></pre></td></tr></table></figure><p><strong>范例4： 输出换行</strong><br>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"this \n"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"is a text"</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this </span><br><span class="line"></span><br><span class="line">is a text</span><br></pre></td></tr></table></figure><p><strong>范例5： 不输出换行</strong><br>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"this \c"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"is a text"</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is a text （注：相比于上面的命令，少了两个换行）</span><br></pre></td></tr></table></figure><p><strong>范例6： 禁止显示转义和变量（使用单引号）</strong><br>命令： <code>echo '$name\&quot;'</code> # 这个很重要<br>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$name\&quot;</span><br></pre></td></tr></table></figure><p><strong>范例7： 显示命令执行的结果</strong><br>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> `date`</span><br><span class="line"><span class="built_in">echo</span> $(date)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Tue May 1 21:16:57 CST 2018</span><br><span class="line">Tue May 1 21:16:57 CST 2018</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;echo&lt;/code&gt;命令用于输出字符串，可以通过参数和转义等来控制输出格式。&lt;/p&gt;
&lt;h1 id=&quot;语法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#语法&quot;&gt;&lt;/a&gt; 语法&lt;/h1&gt;
&lt;figure class=&quot;highlig
      
    
    </summary>
    
      <category term="Linux" scheme="http://ruanxinyu.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ruanxinyu.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>每天学习一个Linux命令（2）：cd命令</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4%EF%BC%882%EF%BC%89%EF%BC%9Acd%E5%91%BD%E4%BB%A4/"/>
    <id>http://ruanxinyu.github.io/posts/每天学习一个Linux命令/每天学习一个Linux命令（2）：cd命令/</id>
    <published>2018-05-01T10:00:58.000Z</published>
    <updated>2018-08-12T13:13:07.219Z</updated>
    
    <content type="html"><![CDATA[<p><code>cd</code>命令用于切换至目标目录，以/开头的则为绝对路径，否则为相对路径。</p><h1 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> 语法</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd [dir]</span><br></pre></td></tr></table></figure><h1 id="使用小技巧"><a class="markdownIt-Anchor" href="#使用小技巧"></a> 使用小技巧</h1><ol><li>切换至用户所示在的目录可以使用<code>cd ~</code> 或者 <code>cd</code>(不带参数)</li><li><code>&quot;.&quot;</code> 则是表示目前所在的目录，<code>&quot;..&quot;</code> 则表示目前目录位置的上一层目录</li><li>通过<code>pwd</code>命令可以打印当前所在的目录</li><li><code>cd -</code>表示切换至上一次所在的目录</li></ol><h1 id="常用范例"><a class="markdownIt-Anchor" href="#常用范例"></a> 常用范例</h1><p><strong>范例1： 切换至根目录下的var目录下</strong><br>命令： <code>cd /var</code>(绝对路径)</p><hr><p><strong>范例2： 切换至当前目录下的var目录下</strong><br>命令： <code>cd var</code>(相对目录)</p><hr><p><strong>范例3： 切换至上两级的目录</strong><br>命令： <code>cd ../../</code></p><hr><p><strong>范例4： 切换至包含空格的目录</strong><br>命令： <code>cd 'aa aa'</code>或者<code>cd aa\ aa</code></p><hr><p><strong>范例5： 切换至当前用户的home目录</strong><br>命令： <code>cd ~</code>或者<code>cd</code></p><hr><p><strong>范例6： 打印当前所在的目录</strong><br>命令： <code>pwd</code></p><hr><p><strong>范例7： 切换到上一次所在的目录</strong><br>命令： <code>cd -</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;cd&lt;/code&gt;命令用于切换至目标目录，以/开头的则为绝对路径，否则为相对路径。&lt;/p&gt;
&lt;h1 id=&quot;语法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#语法&quot;&gt;&lt;/a&gt; 语法&lt;/h1&gt;
&lt;figure class=&quot;highl
      
    
    </summary>
    
      <category term="Linux" scheme="http://ruanxinyu.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ruanxinyu.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>每天学习一个Linux命令（1）：ls命令</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4%EF%BC%881%EF%BC%89%EF%BC%9Als%E5%91%BD%E4%BB%A4/"/>
    <id>http://ruanxinyu.github.io/posts/每天学习一个Linux命令/每天学习一个Linux命令（1）：ls命令/</id>
    <published>2018-05-01T08:18:02.000Z</published>
    <updated>2018-10-01T04:52:36.720Z</updated>
    
    <content type="html"><![CDATA[<p><code>ls</code>命令是linux下最常用的命令。<code>ls</code>命令就是<code>list</code>的缩写，用于显示指定工作目录下之内容（列出目前工作目录所含之文件及子目录)。</p><h1 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> 语法</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls [OPTION]... [FILE]...</span><br></pre></td></tr></table></figure><h1 id="参数"><a class="markdownIt-Anchor" href="#参数"></a> 参数</h1><ul><li><code>-a</code> 显示所有文件及目录，包括以.开头的隐藏文件</li><li><code>-A</code> 同 -a ，但不列出 “.” (目前目录) 及 “…” (父目录)</li><li><code>-l</code> 除文件名称外，亦将文件型态、权限、拥有者、文件大小等资讯详细列出</li><li><code>-h</code> human-readable，默认-l参数显示出来的文件大小是字节大小，-h参数可以按照KB/MB/GB来显示</li><li><code>-r</code> reverse，将文件以相反次序显示(原定依英文字母次序)</li><li><code>-t</code> 将文件依建立时间之先后次序列出</li><li><code>-F</code> 在列出的文件名称后加一符号；例如可执行档则加 “*”, 目录则加 “/”</li><li><code>-R</code> recursive，若目录下有文件，则以下之文件亦皆依序列出</li></ul><h1 id="使用小技巧"><a class="markdownIt-Anchor" href="#使用小技巧"></a> 使用小技巧</h1><ol><li>一般Linux操作系统都会存在一个<code>ll</code>的命令，相当于<code>ls -l --color=auto</code></li><li>ls命令使支持<code>*</code>通配符的</li></ol><h1 id="常用范例"><a class="markdownIt-Anchor" href="#常用范例"></a> 常用范例</h1><p><strong>范例1： 列出<code>/var</code>目录下的文件</strong><br>命令： <code>ls /var</code><br>结果：</p><img src="/posts/每天学习一个Linux命令/每天学习一个Linux命令（1）：ls命令/1.png" title="[1]"><hr><p><strong>范例2： 列出目前工作目录下所有名称是<code>s</code>开头的文件，越新的排越后面</strong><br>命令： <code>ls -ltr s*</code><br>结果：</p><img src="/posts/每天学习一个Linux命令/每天学习一个Linux命令（1）：ls命令/2.png" title="[2]"><hr><p><strong>范例3： 将<code>/bin</code>目录以下所有目录及文件详细资料列出</strong><br>命令： <code>ls -lR /bin</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;ls&lt;/code&gt;命令是linux下最常用的命令。&lt;code&gt;ls&lt;/code&gt;命令就是&lt;code&gt;list&lt;/code&gt;的缩写，用于显示指定工作目录下之内容（列出目前工作目录所含之文件及子目录)。&lt;/p&gt;
&lt;h1 id=&quot;语法&quot;&gt;&lt;a class=&quot;markd
      
    
    </summary>
    
      <category term="Linux" scheme="http://ruanxinyu.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ruanxinyu.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>如何使用GitHubPages搭建个人博客</title>
    <link href="http://ruanxinyu.github.io/posts/%E5%8D%9A%E5%AE%A2/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://ruanxinyu.github.io/posts/博客/如何使用GitHubPages搭建个人博客/</id>
    <published>2018-04-30T12:07:11.000Z</published>
    <updated>2018-10-20T09:47:25.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我对个人博客的要求"><a class="markdownIt-Anchor" href="#我对个人博客的要求"></a> 我对个人博客的要求</h1><p>我对个人博客有如下几点要求，因此最终选定通过<code>Hexo</code>+<code>GitHub Pages</code>来搭建。</p><ol><li>存在独立域名，别人能通过互联网访问</li><li>通过Git进行管理，支持MarkDown语法</li><li>不需要自己购买主机维护环境</li><li>支持评论分享等功能</li></ol><h1 id="配置github-pages"><a class="markdownIt-Anchor" href="#配置github-pages"></a> 配置GitHub Pages</h1><blockquote><p>前提： 您需要有一个GitHub的账号，请将下文中的<code>ruanxinyu</code>替换为您的用户名。</p></blockquote><ol><li>点击<a href="https://github.com/new" target="_blank" rel="noopener">此处</a>，创建一个仓库， 一般GitHub Pages对应的仓库名称规则为： <code>用户名.github.io</code>， 如下图所示：</li></ol><img src="/posts/博客/如何使用GitHubPages搭建个人博客/创建GitHub仓库.png" title="[创建GitHub仓库]"><ol start="2"><li>现在仓库有了，但是在推送内容之前还需要设置GitHub的SSH秘钥，通过如下命令生成并查看SSH秘钥，如果需要输入，一路回车就即可：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot; </span><br><span class="line">cat /c/Users/you/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><ol start="3"><li>进入到GitHub的Setting页面，添加SSH秘钥，如下图所示：</li></ol><img src="/posts/博客/如何使用GitHubPages搭建个人博客/添加GitHub的SSHKey.png" title="[添加GitHub的SSHKey]"><ol start="4"><li>下面，我们往仓库中推送一个<code>index.html</code>页面来充当我们的博客，可以参考如下命令：（Windows下可以使用git bash终端运行如下命令）</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:RuanXinyu/ruanxinyu.github.io.git</span><br><span class="line">cd ruanxinyu.github.io</span><br><span class="line">echo "Hello World" &gt; index.html</span><br><span class="line">git add --all</span><br><span class="line">git commit -m "Initial commit"</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><ol start="5"><li>此时你的博客已经产生，网址为：<a href="https://ruanxinyu.github.io/">https://ruanxinyu.github.io/</a>, 点击即可访问:</li></ol><h1 id="安装并体验hexo"><a class="markdownIt-Anchor" href="#安装并体验hexo"></a> 安装并体验Hexo</h1><blockquote><p>GitHub Pages相当于一个静态网站，您需要将您的博客全部转换为html页面才可以，当然，这个繁琐的过程不需要我们自己去完成，当前有两个框架可以做这个事情：<code>Jekyll</code>和<code>Hexo</code>，下面我就介绍一下如何通过<code>Hexo</code>快速的发表自己的文章。</p></blockquote><p>Hexo是一个NodeJS实现的博客框架，官方文档地址为： <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a>, 文档存在中文哦，给力吧！下面说一下使用过程：</p><ol><li><p>执行<code>npm install -g hexo-cli</code>命令安装Hexo（在安装Hexo之前，请您自行安装NodeJS和NPM）</p></li><li><p>执行<code>hexo init xxx</code>创建一个博客</p></li><li><p>执行<code>hexo generate</code>渲染MarkDown博文，渲染出来的结果在<code>public</code>目录下</p></li><li><p>执行<code>npm install hexo-server --save</code>安装server工具，然后执行<code>hexo server</code>，访问<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>网址可在本地访问你的博客，该方式主要用于调试。</p></li><li><p>执行<code>hexo new xxx</code>创建一篇博文，博文的文件存放在<code>source\_posts</code>目录下，编辑文档内容，hexo server会自动检测文章的变化并运行generate命令，因此刷新本地网址即可看到你更新的内容。</p></li><li><p>在将博文推送到GitHub Pages之前，执行<code>npm install hexo-deployer-git --save</code>安装部署工具，然后将根目录下的<code>_config.yml</code>文件中的如下内容更改为您的GitHub Pages的仓库地址，注意是<code>git@</code>开头的地址，否则在使用<code>hexo deploy</code>会报错</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:RuanXinyu/ruanxinyu.github.com.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><ol start="7"><li><p>执行<code>hexo deploy</code>， Hexo将渲染后的页面放到<code>.deploy_git</code>目录，本地提交后，自动将您的博文推送到GitHub Pages所对应的仓库</p></li><li><p>此时，访问您的GitHubPages就可以看到你更新的文章内容。</p></li></ol><h1 id="切换到indigo主题"><a class="markdownIt-Anchor" href="#切换到indigo主题"></a> 切换到Indigo主题</h1><p>Hexo默认使用的是<code>landscape</code>主题，如果不符合自己的审美，可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a>查找自己喜欢的主题。我比较喜欢<code>indigo</code>主题，该主题有平铺和卡片两种显示方式，卡片模式的代码是在<code>card</code>分支下，下面以此主题为例。</p><ol><li>克隆该主题的代码仓库，如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b card https://github.com/yscoder/hexo-theme-indigo.git themes/indigo</span><br></pre></td></tr></table></figure><ol start="2"><li>安装Indigo主题依赖的插件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-less --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-json-content --save</span><br><span class="line">npm install hexo-helper-qrcode --save</span><br></pre></td></tr></table></figure><ol start="3"><li>修改顶层配置文件<code>_config.yml</code>中的<code>theme: landscape</code>为<code>theme: indigo</code>，刷新页面即可看到新的主题。</li></ol><h1 id="配置hexo和indigo主题"><a class="markdownIt-Anchor" href="#配置hexo和indigo主题"></a> 配置Hexo和Indigo主题</h1><p>Hexo的配置文件为<code>_config.yml</code>，Indigo主题的配置文件在<code>themes/indigo/_config.yml</code>。</p><p>Hexo的配置说明文档地址为： <a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/configuration.html</a><br>Indigo主题的配置说明文档地址为： <a href="https://github.com/yscoder/hexo-theme-indigo/wiki/%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">https://github.com/yscoder/hexo-theme-indigo/wiki/%E9%85%8D%E7%BD%AE</a></p><p>官方文档已经描述很清楚，当然，最简单的方式是基于别人的进行修改，因此在此我贡献出我的配置，然后对几个点做一下说明。</p><h2 id="hexo配置文件样例"><a class="markdownIt-Anchor" href="#hexo配置文件样例"></a> Hexo配置文件样例</h2><blockquote><ol><li><code>language: zh-CN</code>: 语言的种类可以参考<code>themes/indigo/languages</code>目录下的文件</li><li><code>post_asset_folder: true</code>: 在创建博文的时候自动生成对应的文件夹，以存放该博文对应的图片</li><li>配置文件末尾的<code>feed</code>和<code>jsonContent</code>两部分分别是<code>hexo-generator-feed</code>和<code>hexo-generator-json-content</code>两个插件的配置，该部分说明在Indigo的说明文章中。</li></ol></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"></span><br><span class="line"><span class="attr">title:</span> <span class="string">RuanXinYu's</span> <span class="string">Blog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">路漫漫其修远兮，吾将上下而求索</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">阮新宇的成长记录</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">Ruandy</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">阮新宇</span></span><br><span class="line"><span class="attr">email:</span> <span class="number">1096421257</span><span class="string">@qq.com</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">http://ruanxinyu.github.io/</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  auto_detect:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  tab_replace:</span> <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = '')</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">  order_by:</span> <span class="bullet">-date</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="attr">HH:mm:ss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">indigo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@github.com:RuanXinyu/ruanxinyu.github.com.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">atom</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jsonContent:</span></span><br><span class="line"><span class="attr">  meta:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  pages:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  posts:</span></span><br><span class="line"><span class="attr">    title:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    date:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    path:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    raw:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    content:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    slug:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    updated:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    permalink:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    excerpt:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    categories:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    tags:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="indigo配置文件样例"><a class="markdownIt-Anchor" href="#indigo配置文件样例"></a> Indigo配置文件样例</h2><blockquote><ol><li>该主题对应的图片在<code>themes/indigo/source/img</code>，请自行进行替换</li><li>样例内容配置了百度统计功能，下文有详细描述</li><li>样例内容配置了gitment的评论功能，下文有详细描述</li></ol></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-theme-indigo</span></span><br><span class="line"><span class="comment"># https://github.com/yscoder/hexo-theme-indigo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加新菜单项遵循以下规则</span></span><br><span class="line"><span class="comment"># menu:</span></span><br><span class="line"><span class="comment">#  link:               fontawesome图标，省略前缀，本主题前缀为 icon-，必须</span></span><br><span class="line"><span class="comment">#    text: About       菜单显示的文字，如果省略即默认与图标一致，首字母会转大写</span></span><br><span class="line"><span class="comment">#    url: /about       链接，绝对或相对路径，必须。</span></span><br><span class="line"><span class="comment">#    target: _blank    是否跳出，省略则在当前页面打开</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span></span><br><span class="line"><span class="attr">    text:</span> <span class="string">主页</span></span><br><span class="line"><span class="attr">    url:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">  archives:</span></span><br><span class="line"><span class="attr">    text:</span> <span class="string">归档</span></span><br><span class="line"><span class="attr">    url:</span> <span class="string">/archives</span></span><br><span class="line"><span class="attr">  tags:</span></span><br><span class="line"><span class="attr">    text:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">    url:</span> <span class="string">/tags</span></span><br><span class="line"><span class="attr">  th-list:</span></span><br><span class="line"><span class="attr">    text:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">    url:</span> <span class="string">/categories</span></span><br><span class="line"><span class="attr">  github:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">https://github.com/RuanXinyu</span></span><br><span class="line"><span class="attr">    target:</span> <span class="string">_blank</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 你的头像url</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">/img/avatar.png</span></span><br><span class="line"><span class="comment"># avatar link</span></span><br><span class="line"><span class="attr">avatar_link:</span> <span class="string">/</span></span><br><span class="line"><span class="comment"># 头像背景图</span></span><br><span class="line"><span class="attr">brand:</span> <span class="string">/img/brand.jpg</span></span><br><span class="line"><span class="comment"># favicon</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/favicon.ico</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># email</span></span><br><span class="line"><span class="attr">email:</span> <span class="number">1096421257</span><span class="string">@qq.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Android L Chrome 浏览器状态栏颜色</span></span><br><span class="line"><span class="attr">color:</span> <span class="string">'#3F51B5'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 页面标题</span></span><br><span class="line"><span class="attr">tags_title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">archives_title:</span> <span class="string">归档</span></span><br><span class="line"><span class="attr">categories_title:</span> <span class="string">分类</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章截断</span></span><br><span class="line"><span class="attr">excerpt_render:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">excerpt_length:</span> <span class="number">200</span></span><br><span class="line"><span class="attr">excerpt_link:</span> <span class="string">阅读全文...</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">archive_yearly:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否显示文章最后更新时间</span></span><br><span class="line"><span class="attr">show_last_updated:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启分享</span></span><br><span class="line"><span class="attr">share:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启打赏，关闭 reward: false</span></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line"><span class="attr">  title:</span> <span class="string">谢谢您的打赏</span></span><br><span class="line"><span class="attr">  wechat:</span> <span class="string">/img/wechat.png</span>     <span class="comment">#微信，关闭设为 false</span></span><br><span class="line"><span class="attr">  alipay:</span> <span class="string">/img/alipay.jpg</span>     <span class="comment">#支付宝，关闭设为 false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启搜索</span></span><br><span class="line"><span class="attr">search:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否大屏幕下文章页隐藏导航</span></span><br><span class="line"><span class="attr">hideMenu:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启toc</span></span><br><span class="line"><span class="comment"># toc: false</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line"><span class="attr">  list_number:</span> <span class="literal">true</span>  <span class="comment"># 是否显示数字排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章页留言内容，hexo中所有变量及辅助函数等均可调用，具体请查阅 hexo.io</span></span><br><span class="line"><span class="attr">postMessage:</span> <span class="string">原始链接：&lt;a</span> <span class="string">href="&lt;%-</span> <span class="string">url_for(page.path).replace(/index\.html$/,</span> <span class="string">''</span><span class="string">)</span> <span class="string">%&gt;"</span> <span class="string">target="_blank"</span> <span class="string">rel="external"&gt;&lt;%-</span> <span class="string">page.permalink.replace(/index\.html$/,</span> <span class="string">''</span><span class="string">)</span> <span class="string">%&gt;&lt;/a&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 站长统计，如要开启，输入CNZZ站点id，如 cnzz: 1255152447</span></span><br><span class="line"><span class="attr">cnzz:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 百度统计，如要开启，改为你的 key</span></span><br><span class="line"><span class="attr">baidu_tongji:</span> <span class="string">b4c4998e548a16b827d4ffe9dbe2b47b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 腾讯分析，如要开启，输入站点id</span></span><br><span class="line"><span class="attr">tajs:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># google</span></span><br><span class="line"><span class="attr">google_analytics:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">google_site_verification:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sogou站长验证 http://zhanzhang.sogou.com/</span></span><br><span class="line"><span class="attr">sogou_site_verification:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># less</span></span><br><span class="line"><span class="attr">less:</span></span><br><span class="line"><span class="attr">  compress:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  paths:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">source/css/style.less</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下评论插件开启一个即可</span></span><br><span class="line"><span class="comment"># 是否开启 disqus</span></span><br><span class="line"><span class="attr">disqus_shortname:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 是否开启友言评论, 填写友言用户id</span></span><br><span class="line"><span class="attr">uyan_uid:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 是否使用 gitment，https://github.com/imsun/gitment</span></span><br><span class="line"><span class="comment">#gitment: false</span></span><br><span class="line"><span class="attr">gitment:</span></span><br><span class="line"><span class="attr">  owner:</span> <span class="string">RuanXinyu</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">ruanxinyu.github.com</span></span><br><span class="line"><span class="attr">  client_id:</span> <span class="number">2</span><span class="string">a6e23cf2e39e54ef316</span></span><br><span class="line"><span class="attr">  client_secret:</span> <span class="string">f237d3eb9fc94607a0454f894b143efe72eb8aca</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Valine Comment system. https://valine.js.org</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span> <span class="comment"># 如果你想使用valine，请将值设置为 true</span></span><br><span class="line"><span class="attr">  appId:</span>  <span class="comment"># your leancloud appId</span></span><br><span class="line"><span class="attr">  appKey:</span>  <span class="comment"># your leancloud appKey</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="literal">false</span> <span class="comment"># Mail notify</span></span><br><span class="line"><span class="attr">  verify:</span> <span class="literal">false</span> <span class="comment"># Verify code</span></span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">mm</span> <span class="comment"># Gravatar style : mm/identicon/monsterid/wavatar/retro/hide</span></span><br><span class="line"><span class="attr">  placeholder:</span> <span class="string">Just</span> <span class="string">go</span> <span class="string">go</span> <span class="comment"># Comment Box placeholder</span></span><br><span class="line"><span class="attr">  guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># Comment header info</span></span><br><span class="line"><span class="attr">  pageSize:</span> <span class="number">10</span> <span class="comment"># comment list page size</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启Hyper Comments，填写id则启用，false则禁用。http://hypercomments.com</span></span><br><span class="line"><span class="comment"># Hyper Comments support. Write your id here, or false to disable</span></span><br><span class="line"><span class="attr">hyper_id:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 规范网址</span></span><br><span class="line"><span class="comment"># 让搜索引擎重定向你的不同域名、不同子域、同域不同目录的站点到你期望的路径</span></span><br><span class="line"><span class="comment"># https://support.google.com/webmasters/answer/139066</span></span><br><span class="line"><span class="comment"># 假设配置为 canonical: http://imys.net，那么从搜索引擎中 www.imys.net 进入会重定向到 imys.net</span></span><br><span class="line"><span class="attr">canonical:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 版权起始年份</span></span><br><span class="line"><span class="attr">since_year:</span> <span class="number">2015</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户页面中作者相关的描述性文字，如不需要设为 false</span></span><br><span class="line"><span class="attr">about:</span> <span class="string">用户页面中作者相关的描述性文字，如不需要设为</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># “不蒜子”访问量统计，详见 http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line"><span class="attr">visit_counter:</span></span><br><span class="line"><span class="attr">  site_uv:</span> <span class="string">站点总访客数：</span></span><br><span class="line"><span class="attr">  site_pv:</span> <span class="string">站点总访问量：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态定义title</span></span><br><span class="line"><span class="attr">title_change:</span></span><br><span class="line"><span class="attr">  normal:</span> <span class="string">欢迎回来！</span></span><br><span class="line"><span class="attr">  leave:</span> <span class="string">您还会回来吗？</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置为 true 发布后将使用 unpkg cdn 最新的主题样式</span></span><br><span class="line"><span class="comment"># 如果想让你的自定义样式生效，把此项设为 false</span></span><br><span class="line"><span class="attr">cdn:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置为 true 将使用 lightbox render 图片</span></span><br><span class="line"><span class="attr">lightbox:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># icp备案号  ICP_license: 京ICP备1234556号-1</span></span><br><span class="line"><span class="attr">ICP_license:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h1 id="配置百度统计"><a class="markdownIt-Anchor" href="#配置百度统计"></a> 配置百度统计</h1><ol><li>百度统计是可以免费试用的，进入到<a href="https://tongji.baidu.com/web/homepage/index" target="_blank" rel="noopener">百度统计</a>注册账号，然后进入到管理页面添加你的网址，如下图所示：</li></ol><img src="/posts/博客/如何使用GitHubPages搭建个人博客/百度统计添加网站.png" title="[百度统计添加网站]"><ol start="2"><li>添加完成之后，你就可以看到你的Key，如下图所示：</li></ol><img src="/posts/博客/如何使用GitHubPages搭建个人博客/百度统计key.png" title="[百度统计key]"><ol start="3"><li>将你的key值添加到indigo主题的配置文件中即可，如下所示：</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 百度统计，如要开启，改为你的 key</span></span><br><span class="line"><span class="attr">baidu_tongji:</span> <span class="string">b4c4998e548a16b827d4ffe9dbe2b47b</span></span><br></pre></td></tr></table></figure><ol start="4"><li>访问百度统计查看你的网站访问情况等数据。</li></ol><img src="/posts/博客/如何使用GitHubPages搭建个人博客/百度统计结果.png" title="[百度统计结果]"><h1 id="配置评论功能"><a class="markdownIt-Anchor" href="#配置评论功能"></a> 配置评论功能</h1><ol><li><p>友言评论功能已经关闭，因此采用的是gitment插件，该插件是依托于GitHub的Issue的功能的。采用<code>npm install --save gitment</code>命令安装gitment。</p></li><li><p>点击<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">此处</a>注册<code>OAuth Application</code>。其他内容可以随意填写，但要确保填入正确的 callback URL（一般是评论页面对应的域名，比如： <a href="https://ruanxinyu.github.io">https://ruanxinyu.github.io</a> ）。</p></li></ol><img src="/posts/博客/如何使用GitHubPages搭建个人博客/GitHubOAuth.png" title="[blog.ruanxinyu.cn]"><ol start="3"><li>你会得到一个<code>client ID</code>和一个<code>client secret</code>，将其配置到indigo的配置文件中：</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否使用 gitment，https://github.com/imsun/gitment</span></span><br><span class="line"><span class="comment">#gitment: false</span></span><br><span class="line"><span class="attr">gitment:</span></span><br><span class="line"><span class="attr">  owner:</span> <span class="string">RuanXinyu</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">ruanxinyu.github.com</span></span><br><span class="line"><span class="attr">  client_id:</span> <span class="number">2</span><span class="string">a6e23cf2e29e54ef316</span></span><br><span class="line"><span class="attr">  client_secret:</span> <span class="string">f237d3eb9fc94607a0354f894b143efe52eb8aca</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>页面发布后，你需要访问页面并使用你的GitHub账号登录（<code>请确保你的账号是第二步所填repo的owner</code>），点击初始化按钮，之后其他用户即可在该页面发表评论。</p></li><li><p>如果初始化时出现<code>Error：validation failed</code>，则说明你的网址超过50个字符，这是由GitHub的Issue限制的，此时可以修改<code>themes\indigo\layout\_partial\plugins\gitment.ejs</code>文件的如下内容，以时间为ID：</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span><br><span class="line">    id: <span class="string">'&lt;%- page.date %&gt;'</span>,</span><br><span class="line">    owner: <span class="string">'&lt;%- theme.gitment.owner %&gt;'</span>,</span><br><span class="line">    repo: <span class="string">'&lt;%- theme.gitment.repo %&gt;'</span>,</span><br><span class="line">    oauth: &#123;</span><br><span class="line">        client_id: <span class="string">'&lt;%- theme.gitment.client_id %&gt;'</span>,</span><br><span class="line">        client_secret: <span class="string">'&lt;%- theme.gitment.client_secret %&gt;'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="6"><li>现在在你的博文下就可以进行评论了：</li></ol><img src="/posts/博客/如何使用GitHubPages搭建个人博客/博文评论.png" title="[博文评论]"><ol start="7"><li>在你所指定的GitHub仓库中的Issue中也会有你的评论信息：</li></ol><img src="/posts/博客/如何使用GitHubPages搭建个人博客/GitHubIssue.png" title="[GitHubIssue]"><blockquote><p>如果出现其他问题，可以参考：<a href="https://imsun.net/posts/gitment-introduction/" target="_blank" rel="noopener">https://imsun.net/posts/gitment-introduction/</a>和<a href="https://www.jianshu.com/p/57afa4844aaa" target="_blank" rel="noopener">https://www.jianshu.com/p/57afa4844aaa</a></p></blockquote><h1 id="使用个人独立域名"><a class="markdownIt-Anchor" href="#使用个人独立域名"></a> 使用个人独立域名</h1><p>经过上述的配置，我们的博客已经能够在公网访问，但是如果您还想需要自己的域名，而不是以<code>github.io</code>结尾的，比如我的域名为：<code>blog.ruanxinyu.cn</code>，那么您可以按照下面的说明进行配置。</p><h2 id="配置域名解析dns"><a class="markdownIt-Anchor" href="#配置域名解析dns"></a> 配置域名解析DNS</h2><p>首先您需要购买自己的域名，比如通过阿里云进行购买<a href="https://wanwang.aliyun.com/?spm=5176.8142029.388261.275.a7236d3earZNnp" target="_blank" rel="noopener">https://wanwang.aliyun.com/?spm=5176.8142029.388261.275.a7236d3earZNnp</a>，该过程比较繁琐，需要认证。</p><p>域名认证通过之后，需要在添在云解析DNS中加一项<code>CNAME</code>将你的独立域名指向你的GitHub Pages网址，如下图所示，</p><blockquote><p>其中<code>ruanxinyu.cn</code>是我购买的域名；<code>blog</code>是我为我的博客分配的二级域名，二级域名是自己随意指定的；<code>ruanxinyu.github.io</code>是我的GitHub Pages地址。</p></blockquote><img src="/posts/博客/如何使用GitHubPages搭建个人博客/阿里云域名解析设置.png" title="[阿里云域名解析设置]"><h2 id="配置github仓库"><a class="markdownIt-Anchor" href="#配置github仓库"></a> 配置GitHub仓库</h2><p>进入到你的GitHub Pages所在的代码仓库的配置中，将您的域名配置进去：</p><img src="/posts/博客/如何使用GitHubPages搭建个人博客/GitHub配置域名设置入口.png" title="[GitHub配置域名设置入口]"><img src="/posts/博客/如何使用GitHubPages搭建个人博客/GitHub配置域名.png" title="[GitHub配置域名]"><p>到此，您就可以通过您的独立域名访问您的博客内容，比如我的：<a href="https://blog.ruanxinyu.cn" target="_blank" rel="noopener">https://blog.ruanxinyu.cn</a></p><blockquote><p>还存在一个小问题，每次你通过<code>hexo deploy -g</code>将你的博客推送到你的GitHubPages的时候，域名配置就丢失了，为了解决此问题，我们可以在我的Hexo工程添加一个<code>source/CNAME</code>文件，在该文件中写入你的独立域名，比如<code>blog.ruanxinyu.cn</code>，这样每次推送，都会自动给您设置域名。</p></blockquote><h1 id="通过git的子模块功能管理主题"><a class="markdownIt-Anchor" href="#通过git的子模块功能管理主题"></a> 通过Git的子模块功能管理主题</h1><p>为什么要用Git的子模块功能呢？</p><blockquote><p>我们的博客代码是存在我们自己仓库中的，而主题是从别人的仓库中拉取的，并且我们会修改主题中的配置文件。如果我们将主题的内容全部存到我们的仓库中，那么如果主题的作者更新了内容，我们想同步下来就会很费劲。而Git的子模块功能就是为了解决这个问题的，允许你将一个Git仓库当作另外一个Git仓库的子目录，允许你克隆另外一个仓库到你的项目中并且保持你的提交相对独立。</p></blockquote><h2 id="在华为devcloud上建立私有代码仓"><a class="markdownIt-Anchor" href="#在华为devcloud上建立私有代码仓"></a> 在华为DevCloud上建立私有代码仓</h2><p>因为敏感信息问题，我不想将hexo工程源码放和主题的源码放在gitHub上，因此我在华为软件开发云上建立了两个私有仓库:</p><p>一个用于存放我的hexo工程源码，地址为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git@codehub.devcloud.huaweicloud.com:55d03e8e8ec445bfb3fffbc66b1001dd/Blog.git</span><br></pre></td></tr></table></figure><p>一个用于存放我修改后的indigo主题，该仓库是从indigo的官方仓库导入进来的, 如下图所示, 地址为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git@codehub.devcloud.huaweicloud.com:55d03e8e8ec445bfb3fffbc66b1001dd/hexo-theme-indigo.git</span><br></pre></td></tr></table></figure><img src="/posts/博客/如何使用GitHubPages搭建个人博客/华为云创建仓库.png" title="[华为云创建仓库]"><h2 id="如何添加git的子模块功能"><a class="markdownIt-Anchor" href="#如何添加git的子模块功能"></a> 如何添加Git的子模块功能</h2><p>在第一次使用的时候，需要先添加子模块功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add -b card git@codehub.devcloud.huaweicloud.com:55d03e8e8ec445bfb3fffbc66b1001dd/hexo-theme-indigo.git themes/indigo</span><br></pre></td></tr></table></figure><p>此时，会在你的代码目录下生成<code>.gitmodules</code>文件，该文件记录你的子模块信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[submodule &quot;themes/indigo&quot;]</span><br><span class="line">truepath = themes/indigo</span><br><span class="line">trueurl = git@codehub.devcloud.huaweicloud.com:55d03e8e8ec445bfb3fffbc66b1001dd/hexo-theme-indigo.git</span><br><span class="line">truebranch = card</span><br></pre></td></tr></table></figure><p>然后执行<code>git submodule init</code>和<code>git submodule update</code>命令将远端的代码同步下来。</p><h2 id="如何修改indigo主题的内容"><a class="markdownIt-Anchor" href="#如何修改indigo主题的内容"></a> 如何修改indigo主题的内容</h2><p>我们根据自己的需要修改主题文件夹中的文件，然后推送至我们的私有仓库即可，可以参考如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd themes/indigo</span><br><span class="line">git add .</span><br><span class="line">git commit -m '修改配置信息'</span><br><span class="line">git push origin card</span><br></pre></td></tr></table></figure><h2 id="如何同步indigo主题官方仓库的更新"><a class="markdownIt-Anchor" href="#如何同步indigo主题官方仓库的更新"></a> 如何同步indigo主题官方仓库的更新</h2><p>首先，我们将我们的仓库与官方的仓库进行一下关联，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add office -t card https://github.com/yscoder/hexo-theme-indigo.git</span><br></pre></td></tr></table></figure><p>之后通过<code>git pull office</code>即可将官方的仓库合并到本地。</p><h2 id="如何修改hexo工程代码的内容"><a class="markdownIt-Anchor" href="#如何修改hexo工程代码的内容"></a> 如何修改Hexo工程代码的内容</h2><p>Hexo工程就跟普通仓库一样维护即可，与子模块是相互独立的，当前两个仓库分开维护即可。Hexo工程代码并不会管理indigo主题的文件，而只是维护一个子模块的commit id。</p><h2 id="克隆已经添加子模块功能的hexo工程"><a class="markdownIt-Anchor" href="#克隆已经添加子模块功能的hexo工程"></a> 克隆已经添加子模块功能的hexo工程</h2><p>使用子模块之后，克隆Hexo工程代码可以加上<code>--recursive</code>参数，将子模组的内容一起克隆下来，如果没有加该参数，则需要手动执行一下<code>git submodule update</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --recursive git@codehub.devcloud.huaweicloud.com:55d03e8e8ec445bfb3fffbc66b1001dd/Blog.git</span><br></pre></td></tr></table></figure><h1 id="你可能会遇到的坑"><a class="markdownIt-Anchor" href="#你可能会遇到的坑"></a> 你可能会遇到的坑</h1><ol><li>执行<code>hexo deploy</code>时报<code>error deployer not found:github</code>错误</li></ol><blockquote><p>您没有安装安装<code>hexo-deployer-git</code>造成的，通过 <code>npm install hexo-deployer-git --save</code>进行安装</p></blockquote><ol start="2"><li>执行<code>hexo deploy</code>时报<code>Permission denied (publickey)</code>错误</li></ol><blockquote><p>您的Github没有配置你的SSH key，配置方法参照上文的“配置GitHub Pages”章节</p></blockquote><ol start="3"><li>执行<code>hexo deploy</code>时报<code>fatal: could not read Username for 'https://github.com': Invalid argument</code>错误</li></ol><blockquote><p>在GitHub上设置SSH Key，同时将配置文件<code>deploy</code>配置下的git地址改为<code>git@</code>开头的ssh地址，如下所示：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:RuanXinyu/ruanxinyu.github.com.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><ol start="4"><li>百度统计没有数据</li></ol><blockquote><p>百度统计在初次添加后会有一定的延迟，可以手动检查是否添加成功，如下所示:</p></blockquote><img src="/posts/博客/如何使用GitHubPages搭建个人博客/百度统计检查状态.png" title="[百度统计检查状态]"><ol start="5"><li>gitment初始化评论时出现<code>Error：validation failed</code></li></ol><blockquote><p>这是由于你的网址超过50个字符导致的，解决方式请参照上文“配置评论功能”中的第5条</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;我对个人博客的要求&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#我对个人博客的要求&quot;&gt;&lt;/a&gt; 我对个人博客的要求&lt;/h1&gt;
&lt;p&gt;我对个人博客有如下几点要求，因此最终选定通过&lt;code&gt;Hexo&lt;/code&gt;+&lt;code&gt;GitHu
      
    
    </summary>
    
      <category term="博客" scheme="http://ruanxinyu.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://ruanxinyu.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>JDK安装教程</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/JDK%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>http://ruanxinyu.github.io/posts/技术文档/JDK安装教程/</id>
    <published>2018-04-15T06:53:32.000Z</published>
    <updated>2018-10-02T13:02:16.734Z</updated>
    
    <content type="html"><![CDATA[<p>学习Java，首先得安装JDK(Java Development Kit)，那么下面就说一下如何在Windows和Linux下安装并验证JDK。</p><h1 id="jdk的下载"><a class="markdownIt-Anchor" href="#jdk的下载"></a> JDK的下载</h1><p>JDK的官方下载地址为： <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html%EF%BC%8C" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/index.html，</a> 请根据需要下载对应操作系统的安装包。</p><blockquote><p>官方下载速度比较慢，因此可以从华为开源镜像站下载，地址为：<a href="https://mirrors.huaweicloud.com/repository/toolkit/java/jdk/" target="_blank" rel="noopener">https://mirrors.huaweicloud.com/repository/toolkit/java/jdk/</a></p></blockquote><h1 id="windows下安装jdk"><a class="markdownIt-Anchor" href="#windows下安装jdk"></a> Windows下安装JDK</h1><ol><li>以<code>jdk-8u151</code>为例，双击上一步下载下来的exe文件，默认安装即可。（备注：路径可以选择其他盘符，但是不建议路径中包含中文及特殊字符）</li><li>进入到系统环境变量的管理界面：<code>右键计算机图标=&gt;属性=&gt;高级系统设置=&gt;环境变量</code></li></ol><img src="/posts/技术文档/JDK安装教程/windows_install_01.png" title="[设置Windows环境变量]"><ol start="3"><li><code>新建</code>变量<code>JAVA_HOME</code>，值为：<code>C:\Program Files\Java\jdk1.8.0_151</code></li><li><code>编辑</code>变量<code>PATH</code>，追加：<code>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</code></li><li><code>新建</code>变量<code>CLASSPATH</code>，值为：<code>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</code></li></ol><img src="/posts/技术文档/JDK安装教程/windows_install_02.png" title="[设置Windows环境变量]"><h1 id="linux下安装jdk"><a class="markdownIt-Anchor" href="#linux下安装jdk"></a> Linux下安装JDK</h1><ol><li>以<code>jdk-8u151</code>为例，下载JDK后，将压缩包解压至特定的目录，一般解压至/usr/local目录，下载和解压命令可以参考如下命令：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.huaweicloud.com/repository/toolkit/java/jdk/8u151-b12/jdk-8u151-linux-x64.tar.gz</span><br><span class="line">sudo tar -zxvf jdk-8u151-linux-x64.tar.gz -C /usr/local/</span><br><span class="line">sudo chown -R $(whoami):$(whoami) /usr/local/jdk1.8.0_151</span><br></pre></td></tr></table></figure><ol start="2"><li>经JDK的路径加入到环境变量中，在命令行中输入<code>sudo vim /etc/profile</code>，编辑文件，在文件末尾增加如下的内容，然后执行<code>source /etc/profile</code>使环境变量生效。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_151</span><br><span class="line">export JRE_HOME=/usr/local/jdk1.8.0_151/jre</span><br><span class="line">export CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br></pre></td></tr></table></figure><h1 id="jdk的验证"><a class="markdownIt-Anchor" href="#jdk的验证"></a> JDK的验证</h1><p>windows打开<code>CMD</code>命令窗口，Linux打开终端端口，输入<code>java -version</code>命令，如果出现如下提示则Java安装成功。</p><img src="/posts/技术文档/JDK安装教程/java_version.png" title="[Java的验证]">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学习Java，首先得安装JDK(Java Development Kit)，那么下面就说一下如何在Windows和Linux下安装并验证JDK。&lt;/p&gt;
&lt;h1 id=&quot;jdk的下载&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#jdk的下载&quot;&gt;
      
    
    </summary>
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="Java" scheme="http://ruanxinyu.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
