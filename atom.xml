<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RuanXinYu&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/efaf7255d0acf18755aba4ade84c6294</icon>
  <subtitle>路漫漫其修远兮，吾将上下而求索</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ruanxinyu.github.io/"/>
  <updated>2018-10-02T11:00:22.946Z</updated>
  <id>http://ruanxinyu.github.io/</id>
  
  <author>
    <name>阮新宇</name>
    <email>1096421257@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我的博客规划路线图</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%A7%84%E5%88%92%E8%B7%AF%E7%BA%BF%E5%9B%BE/"/>
    <id>http://ruanxinyu.github.io/posts/我的博客规划路线图/</id>
    <published>2018-10-02T07:56:46.000Z</published>
    <updated>2018-10-02T11:00:22.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我对于博客建设的思考"><a href="#我对于博客建设的思考" class="headerlink" title="我对于博客建设的思考"></a>我对于博客建设的思考</h1><h2 id="为什么要写博客？"><a href="#为什么要写博客？" class="headerlink" title="为什么要写博客？"></a>为什么要写博客？</h2><p>写博客有两个目的，一个是<code>促进知识的内化</code>，二是<code>提升自己的影响力</code>。</p><p>以教为学是一个很好的学习方式，而且现在信息太多，如果不经过自己整理归纳，那就很容易成为知识收藏者，而不是知识的产生者和传播者，显然我是希望成为后者的，我希望通过将知识体系化从而提升自己的核心竞争力。</p><p>影响力有两个很重要的作用，一个是提升收入，一个是提升满足感，这对我都很重要。如何建立影响力？建立品牌并服务他人，对于身边的人，还可以通过行为来影响，但是对于陌生人只能通过分享，因此内容建设很重要，博客是其中一个途径。</p><h2 id="如何选择博客内容？"><a href="#如何选择博客内容？" class="headerlink" title="如何选择博客内容？"></a>如何选择博客内容？</h2><p>博客内容选择需要考虑三个点：<code>独特性</code>，<code>体系化</code>，<code>刚需</code>。</p><p>独特性有两个方面，对于自己，因为要建立T型或者E型人才，所以要确定哪些内容需要深度，哪些内容需要广度；对于外部读者，如果博文是网上没有的，这样用户搜索肯定就会搜到你的，这肯是独特的，但是这样的主题能找到，但是可能不多，这个依赖于自己的观察，比如说Nexus的源码分析。</p><p>更多的时候博文内容网上通篇都是，那么用户为什么要看你的，那么这个地方就需要考虑体系化和刚需。内容不能太分散，需要成体系化，这样才能让博文之间产生关联性，提高点击率，产生用户粘性。谈到刚需，那么必然要谈到用户群体，我针对的是初级用户，比如未出学校的大学生和刚入职场的信任，因为他们可能缺少实际的项目经验，因此他们缺少体系化的认识，那么我就正好可以以我自己为例，为用户构建一个成长为T型人才的路径，这也和我自己的目标是一致的。所以<code>博客的文章是可以零散的，但是文章之间的关系必须是体系化，场景化</code>的。</p><p>博客不仅限于技术的分享，因为我的目标是让自己过得更好，那么在心理学，历史学，经济学，个人成长等领域也是可以总结和分享，<code>以一个点为起点，逐步向周边辐射，扩展维度，这样才能保持自己的独特性</code>。用20%的时间学习一个领域的80%内容，而不是用80%的时间将一个维度提升至90%，这样才能实现跨学科之间的创新性，当然，在这个过程中，在某一个核心领域还是要长期保持深入学习的。</p><p>对于心理学，历史学，经济学，个人成长其实更多的是以<code>读书笔记</code>为重点，通过<code>得到App课程</code>和<code>主题阅读</code>将内容体系化。</p><h1 id="技术规划路线"><a href="#技术规划路线" class="headerlink" title="技术规划路线"></a>技术规划路线</h1><p>我是搞软件开发的，因此技术规划也就是软件行业的。因为代码能力需要多写，而且内容更零散的，而架构能力更能体现出体系化，因此<code>我分享更多的是架构能力，基于不同场景使用不同架构</code>，通过一步一步的搭建系统架构来帮助用户提升整体认识。每一个主题都有一个总体的架构图作为目标，为了达到这个目标，我们会分解目标逐步完成，分步验证。</p><ul><li>【进行中】 Nginx-HAProxy-KeepAlived-Tomcat-MySQL等搭建高可用系统</li><li>【等待中】 搭建基于SpringCloud的高可用生产系统</li><li>【等待中】 如何从头开始搭建持续交付系统</li></ul><h2 id="Nginx-HAProxy-KeepAlived-Tomcat-MySQL等搭建高可用系统"><a href="#Nginx-HAProxy-KeepAlived-Tomcat-MySQL等搭建高可用系统" class="headerlink" title="Nginx-HAProxy-KeepAlived-Tomcat-MySQL等搭建高可用系统"></a>Nginx-HAProxy-KeepAlived-Tomcat-MySQL等搭建高可用系统</h2><img src="/posts/我的博客规划路线图/2018-10-02-17-11-54.png" title="[blog.ruanxinyu.cn]">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;我对于博客建设的思考&quot;&gt;&lt;a href=&quot;#我对于博客建设的思考&quot; class=&quot;headerlink&quot; title=&quot;我对于博客建设的思考&quot;&gt;&lt;/a&gt;我对于博客建设的思考&lt;/h1&gt;&lt;h2 id=&quot;为什么要写博客？&quot;&gt;&lt;a href=&quot;#为什么要写博客？&quot; cla
      
    
    </summary>
    
      <category term="技术分享" scheme="http://ruanxinyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="技术分享" scheme="http://ruanxinyu.github.io/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下Nginx的安装与配置</title>
    <link href="http://ruanxinyu.github.io/posts/Ubuntu%E4%B8%8BNginx%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://ruanxinyu.github.io/posts/Ubuntu下Nginx的安装与配置/</id>
    <published>2018-10-02T06:19:56.000Z</published>
    <updated>2018-10-02T08:09:39.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx的简介"><a href="#Nginx的简介" class="headerlink" title="Nginx的简介"></a>Nginx的简介</h1><p>官方网址：<a href="http://nginx.org/" target="_blank" rel="noopener">http://nginx.org/</a>。 Nginx可以作为http服务器、反向代理服务器、邮件服务器和负载均衡服务器等功能，具有性能高、扩展灵活等特点，能够快速的响应静态网页的请求，支持FastCGI/SSL/Virtual Host/URL Rwrite/Gzip/HTTP Basic Auth等功能，并且支持丰富的第三方扩展功能。</p><h1 id="Nginx的安装"><a href="#Nginx的安装" class="headerlink" title="Nginx的安装"></a>Nginx的安装</h1><p>该教程使用的Ubuntu版本是18.04.1版本，Ubuntu的安装教程参考<a href="/posts/VirtualBox安装Ubuntu教程/" title="VirtualBox安装Ubuntu教程">VirtualBox安装Ubuntu教程</a>。Nginx可以直接通过apt-get安装，也可以通过源码编译安装。</p><h2 id="apt-get安装"><a href="#apt-get安装" class="headerlink" title="apt-get安装"></a>apt-get安装</h2><p>Ubuntu下执行<code>sudo apt-get install nginx</code>命令即可安装。</p><p>通过<code>which nginx</code>可以看到Nginx是安装在<code>/usr/sbin/nginx</code>下，配置文件在<code>/etc/nginx/</code>目录下。</p><h2 id="源码编译安装"><a href="#源码编译安装" class="headerlink" title="源码编译安装"></a>源码编译安装</h2><p>源码安装的脚本可以点击此处下载： <a href="/posts/Ubuntu下Nginx的安装与配置/nginx_install.sh" title="nginx_install.sh">nginx_install.sh</a>，下面对安装过程做一下说明。</p><p>首先安装编译工具和openssl，下载Nginx源码并解压，然后执行源码编译三件套（<code>./configure &amp;&amp; make &amp;&amp; make install</code>），我们安装的目录为<code>/usr/local/nginx</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential libssl-dev <span class="comment"># 安装编译工具和openssl依赖</span></span><br><span class="line">sudo apt-get install zlib1g-dev</span><br><span class="line">sudo apt-get install libpcre3 libpcre3-dev</span><br><span class="line">wget http://nginx.org/download/nginx-1.15.4.tar.gz <span class="comment"># 下载源码</span></span><br><span class="line">tar -zxvf nginx-1.15.4.tar.gz <span class="comment"># 解压源码</span></span><br><span class="line"><span class="built_in">cd</span> nginx-1.15.4/</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --with-http_stub_status_module --with-http_v2_module --with-http_gzip_static_module --with-http_sub_module --with-pcre --with-http_ssl_module <span class="comment"># 配置nginx的安装参数，可以根据自己的需要进行调整</span></span><br><span class="line">make <span class="comment"># 编译源码</span></span><br><span class="line">sudo make install <span class="comment"># 安装到安装目录，需要使用root权限</span></span><br></pre></td></tr></table></figure><h1 id="Nginx的启动和关闭"><a href="#Nginx的启动和关闭" class="headerlink" title="Nginx的启动和关闭"></a>Nginx的启动和关闭</h1><p>Nginx的启动直接使用<code>/usr/local/nginx/sbin/nginx</code>, 在源码安装下使用的配置文件是<code>/usr/local/nginx/conf/nginx.conf</code>，通过<code>/usr/local/nginx/sbin/nginx -s reload</code>命令重新加载, 可以通过<code>/usr/local/nginx/sbin/nginx -s stop</code>停止进程</p><h1 id="Nginx的开机启动"><a href="#Nginx的开机启动" class="headerlink" title="Nginx的开机启动"></a>Nginx的开机启动</h1><h2 id="方式1：rc-local"><a href="#方式1：rc-local" class="headerlink" title="方式1：rc.local"></a>方式1：rc.local</h2><p>编辑<code>sudo vim /etc/rc.local</code>, 在最下面添加<code>sudo /usr/local/nginx/sbin/nginx</code>语句即可。</p><h2 id="方式2：systemctl"><a href="#方式2：systemctl" class="headerlink" title="方式2：systemctl"></a>方式2：systemctl</h2><p>编辑文件，<code>sudo vim /lib/systemd/system/nginx.service</code>文件，写入如下的内容，然后执行<code>sudo ln -s /lib/systemd/system/nginx.service /etc/systemd/system/multi-user.target.wants/nginx.service</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Nginx Daemon</span><br><span class="line">After=syslog.target network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line">ConditionFileNotEmpty=/usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">KillMode=process</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line">ExecStop=/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s stop</span><br><span class="line">ExecReload=/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s reload</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>启动Nginx进程，并设置为开机启动，通过<code>sudo systemctl status nginx</code>查看状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start nginx</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure><h1 id="Nginx的配置"><a href="#Nginx的配置" class="headerlink" title="Nginx的配置"></a>Nginx的配置</h1><blockquote><p>Nginx功能强大，配置无法简单描述，因此，下文仅以一个最简单的静态文件服务器为例进行说明验证，更多的应用场景将会在其他的文章中进行说明。</p></blockquote><p>配置文件是<code>/usr/local/nginx/conf/nginx.conf</code>，源码安装后默认的配置文件就已经提供了静态文件服务器的配置，我们增加<code>autoindex on;</code>参数以便后续更加方便的验证功能，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html; <span class="comment"># 设置静态文件服务的本地目录为html目录</span></span><br><span class="line">            autoindex on; <span class="comment"># 增加该参数以便自动生成文件目录</span></span><br><span class="line">            index  index.html index.htm; <span class="comment"># 默认访问文件夹下的index.html</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的配置可以看出，配置文件包含全局的配置、<code>events</code>和<code>http</code>等几部分，其中<code>http</code>表示定义了一个HTTP服务器，其中包含一个<code>server</code>监听本地机器的80端口，<code>server</code>中的<code>location</code>用来定义网址路由，通过<code>root</code>用来定义静态文件服务的本地目录，此处指定的是nginx安装目录下的<code>html</code>目录<code>/usr/local/nginx/html/</code>.</p><h1 id="Nginx的验证"><a href="#Nginx的验证" class="headerlink" title="Nginx的验证"></a>Nginx的验证</h1><p>采用nginx的默认配置启动nginx，此时通过浏览器访问80端口即可以看到如下的页面，即<code>/usr/local/nginx/html/index.html</code>的内容。<br><img src="/posts/Ubuntu下Nginx的安装与配置/2018-10-02-15-11-05.png" title="[blog.ruanxinyu.cn]"></p><p>我们在<code>/usr/local/nginx/html/</code>下创建一些文件夹和文件<code>cd /usr/local/nginx/html/ &amp;&amp; sudo mkdir -p  aa/aa aa/bb aa/cc aa/dd &amp;&amp; sudo touch aa/a.txt</code>，可以通过浏览器看到对应的文件：<br><img src="/posts/Ubuntu下Nginx的安装与配置/2018-10-02-15-15-27.png" title="[blog.ruanxinyu.cn]"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nginx的简介&quot;&gt;&lt;a href=&quot;#Nginx的简介&quot; class=&quot;headerlink&quot; title=&quot;Nginx的简介&quot;&gt;&lt;/a&gt;Nginx的简介&lt;/h1&gt;&lt;p&gt;官方网址：&lt;a href=&quot;http://nginx.org/&quot; target=&quot;_blan
      
    
    </summary>
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>阿里ACA认证学习记录</title>
    <link href="http://ruanxinyu.github.io/posts/%E9%98%BF%E9%87%8CACA%E8%AE%A4%E8%AF%81%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://ruanxinyu.github.io/posts/阿里ACA认证学习记录/</id>
    <published>2018-09-28T07:23:31.000Z</published>
    <updated>2018-10-01T04:55:08.279Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大数据概述"><a href="#大数据概述" class="headerlink" title="大数据概述"></a>大数据概述</h1><p>大数据，指无法在可承受的时间范围内用常规软件工具进行捕捉，管理和处理的数据集合，是需要新处理模式才能具有更强的决策力，洞察发现力和流程优化能力的海量，高增长率和多样化的信息资产。</p><p>大数据的主要特征：4V<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-15-39-47.png" title="[blog.ruanxinyu.cn]"></p><img src="/posts/阿里ACA认证学习记录/2018-09-28-15-40-26.png" title="[blog.ruanxinyu.cn]"><p>数据分析流程<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-15-41-31.png" title="[blog.ruanxinyu.cn]"></p><p>Hadoop生态圈<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-15-43-04.png" title="[blog.ruanxinyu.cn]"></p><p>阿里云大数据体系<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-15-43-42.png" title="[blog.ruanxinyu.cn]"></p><p>数加的定位<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-15-44-21.png" title="[blog.ruanxinyu.cn]"></p><p>统一的大数据计算平台<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-15-45-11.png" title="[blog.ruanxinyu.cn]"></p><h1 id="分析型数据库"><a href="#分析型数据库" class="headerlink" title="分析型数据库"></a>分析型数据库</h1><h2 id="分析型数据库的介绍"><a href="#分析型数据库的介绍" class="headerlink" title="分析型数据库的介绍"></a>分析型数据库的介绍</h2><p>OLAP，OLTP，维度和度量，下钻，下图中时间，地区和产品就是维度，而销量和金额就是度量<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-15-47-20.png" title="[blog.ruanxinyu.cn]"></p><p>MPP（大规模并行处理， Massive Parallel Processing）<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-15-49-23.png" title="[blog.ruanxinyu.cn]"></p><p>分析型数据库：高并发在线分析（Realtime OLAP），与关系型数据库的区别是分析型数据库没有事务，是专门用于分析的，支持sql语句，但是跟关系型数据库没有什么关系<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-15-55-17.png" title="[blog.ruanxinyu.cn]"></p><img src="/posts/阿里ACA认证学习记录/2018-09-28-15-57-34.png" title="[blog.ruanxinyu.cn]"><h2 id="分析型数据库的基本概念"><a href="#分析型数据库的基本概念" class="headerlink" title="分析型数据库的基本概念"></a>分析型数据库的基本概念</h2><p>表组<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-16-13-05.png" title="[blog.ruanxinyu.cn]"></p><p>表组的特点<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-16-55-30.png" title="[blog.ruanxinyu.cn]"></p><p>维表的特点，以空间换时间<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-16-56-14.png" title="[blog.ruanxinyu.cn]"></p><p>事实表的特点<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-16-57-32.png" title="[blog.ruanxinyu.cn]"></p><p>数据类型<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-17-01-14.png" title="[blog.ruanxinyu.cn]"></p><p>多值列，不满足3范式，性能明显优于join<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-17-02-03.png" title="[blog.ruanxinyu.cn]"></p><img src="/posts/阿里ACA认证学习记录/2018-09-28-17-05-08.png" title="[blog.ruanxinyu.cn]"><h2 id="分析型数据库的基本操作"><a href="#分析型数据库的基本操作" class="headerlink" title="分析型数据库的基本操作"></a>分析型数据库的基本操作</h2><p>DMS在表组中新建表<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-17-17-52.png" title="[blog.ruanxinyu.cn]"></p><h1 id="MaxCompute"><a href="#MaxCompute" class="headerlink" title="MaxCompute"></a>MaxCompute</h1><h2 id="MaxCompute的介绍"><a href="#MaxCompute的介绍" class="headerlink" title="MaxCompute的介绍"></a>MaxCompute的介绍</h2><p>大数据计算服务<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-17-32-48.png" title="[blog.ruanxinyu.cn]"></p><p>对象<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-17-33-43.png" title="[blog.ruanxinyu.cn]"></p><p>分区<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-17-36-13.png" title="[blog.ruanxinyu.cn]"></p><p>分区表<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-17-36-38.png" title="[blog.ruanxinyu.cn]"></p><p>分区举例<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-17-39-09.png" title="[blog.ruanxinyu.cn]"></p><p>其他概念， 执行sql都是task，是异步的<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-17-40-15.png" title="[blog.ruanxinyu.cn]"></p><p>数据类型<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-17-41-46.png" title="[blog.ruanxinyu.cn]"></p><p>阿里小贷<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-17-42-31.png" title="[blog.ruanxinyu.cn]"></p><p>大数据架构<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-17-43-11.png" title="[blog.ruanxinyu.cn]"></p><h2 id="MaxCompute的架构介绍"><a href="#MaxCompute的架构介绍" class="headerlink" title="MaxCompute的架构介绍"></a>MaxCompute的架构介绍</h2><p>客户端<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-20-04-58.png" title="[blog.ruanxinyu.cn]"></p><p>逻辑层<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-20-08-24.png" title="[blog.ruanxinyu.cn]"></p><p>计算层<br><img src="/posts/阿里ACA认证学习记录/2018-09-28-20-09-02.png" title="[blog.ruanxinyu.cn]"></p><p>数据上传<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-09-16-43.png" title="[blog.ruanxinyu.cn]"></p><p>数据下载<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-09-17-42.png" title="[blog.ruanxinyu.cn]"></p><p>参数<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-09-19-12.png" title="[blog.ruanxinyu.cn]"></p><p>分隔符<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-09-19-31.png" title="[blog.ruanxinyu.cn]"></p><h2 id="DDL的介绍"><a href="#DDL的介绍" class="headerlink" title="DDL的介绍"></a>DDL的介绍</h2><p>创建表<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-09-23-24.png" title="[blog.ruanxinyu.cn]"></p><p>表的生命周期，比如用来保持最近7天的数据<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-09-26-16.png" title="[blog.ruanxinyu.cn]"></p><p>快捷建表<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-09-27-31.png" title="[blog.ruanxinyu.cn]"></p><p>分区操作<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-09-28-17.png" title="[blog.ruanxinyu.cn]"></p><p>修改表属性<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-09-29-08.png" title="[blog.ruanxinyu.cn]"></p><p>视图操作<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-09-29-42.png" title="[blog.ruanxinyu.cn]"></p><h2 id="DML的介绍"><a href="#DML的介绍" class="headerlink" title="DML的介绍"></a>DML的介绍</h2><p>查询操作<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-09-32-11.png" title="[blog.ruanxinyu.cn]"></p><p>更新数据<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-09-35-05.png" title="[blog.ruanxinyu.cn]"></p><p>多路输出<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-09-36-03.png" title="[blog.ruanxinyu.cn]"></p><p>表关联<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-09-37-37.png" title="[blog.ruanxinyu.cn]"></p><p>MapJoin<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-09-37-58.png" title="[blog.ruanxinyu.cn]"></p><p>MapJoin举例<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-09-38-17.png" title="[blog.ruanxinyu.cn]"></p><p>分支表达式<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-09-39-59.png" title="[blog.ruanxinyu.cn]"></p><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><p>数学运算函数-1<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-09-48-23.png" title="[blog.ruanxinyu.cn]"></p><p>数学运算函数-2<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-09-49-29.png" title="[blog.ruanxinyu.cn]"></p><p>字符串处理函数<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-09-49-48.png" title="[blog.ruanxinyu.cn]"></p><p>日期类型处理函数<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-09-57-01.png" title="[blog.ruanxinyu.cn]"></p><p>窗口函数<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-09-57-16.png" title="[blog.ruanxinyu.cn]"></p><p>聚合函数<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-09-57-50.png" title="[blog.ruanxinyu.cn]"></p><p>其他函数<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-09-58-28.png" title="[blog.ruanxinyu.cn]"></p><h2 id="其他使用方式"><a href="#其他使用方式" class="headerlink" title="其他使用方式"></a>其他使用方式</h2><p>自定义函数<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-09-59-23.png" title="[blog.ruanxinyu.cn]"></p><p>UDF开发流程<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-10-01-12.png" title="[blog.ruanxinyu.cn]"></p><p>MapReduce介绍<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-10-02-44.png" title="[blog.ruanxinyu.cn]"></p><p>MR框架<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-10-04-46.png" title="[blog.ruanxinyu.cn]"></p><p>Graph<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-10-05-25.png" title="[blog.ruanxinyu.cn]"></p><p>如何使用合适的方式<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-10-06-11.png" title="[blog.ruanxinyu.cn]"></p><h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><p>授权<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-10-08-40.png" title="[blog.ruanxinyu.cn]"></p><p>添加用户授权<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-10-28-41.png" title="[blog.ruanxinyu.cn]"></p><p>角色管理<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-10-29-26.png" title="[blog.ruanxinyu.cn]"></p><h1 id="DataIDE"><a href="#DataIDE" class="headerlink" title="DataIDE"></a>DataIDE</h1><h2 id="DataIDE介绍"><a href="#DataIDE介绍" class="headerlink" title="DataIDE介绍"></a>DataIDE介绍</h2><p>产品概述<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-10-35-23.png" title="[blog.ruanxinyu.cn]"></p><p>开发流程-1<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-10-36-04.png" title="[blog.ruanxinyu.cn]"></p><p>开发流程-2<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-10-36-24.png" title="[blog.ruanxinyu.cn]"></p><p>应用场景<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-10-37-36.png" title="[blog.ruanxinyu.cn]"></p><h2 id="DataIDE基本概念"><a href="#DataIDE基本概念" class="headerlink" title="DataIDE基本概念"></a>DataIDE基本概念</h2><p>概念<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-10-39-19.png" title="[blog.ruanxinyu.cn]"></p><p>角色<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-10-43-11.png" title="[blog.ruanxinyu.cn]"></p><p>多环境<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-10-45-07.png" title="[blog.ruanxinyu.cn]"></p><h2 id="演示：任务调度"><a href="#演示：任务调度" class="headerlink" title="演示：任务调度"></a>演示：任务调度</h2><img src="/posts/阿里ACA认证学习记录/2018-09-29-10-55-09.png" title="[blog.ruanxinyu.cn]"><p>节点任务<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-10-55-53.png" title="[blog.ruanxinyu.cn]"></p><p>工作流任务<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-10-58-36.png" title="[blog.ruanxinyu.cn]"></p><h2 id="演示：数据同步"><a href="#演示：数据同步" class="headerlink" title="演示：数据同步"></a>演示：数据同步</h2><p>数据源<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-11-01-47.png" title="[blog.ruanxinyu.cn]"></p><p>创建任务<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-11-02-31.png" title="[blog.ruanxinyu.cn]"></p><p>选择来源<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-11-03-34.png" title="[blog.ruanxinyu.cn]"></p><p>选择目标<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-11-04-25.png" title="[blog.ruanxinyu.cn]"></p><p>字段映射<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-11-04-44.png" title="[blog.ruanxinyu.cn]"></p><p>通道控制<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-11-05-18.png" title="[blog.ruanxinyu.cn]"></p><h2 id="数据管理"><a href="#数据管理" class="headerlink" title="数据管理"></a>数据管理</h2><p>数据管理<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-11-08-19.png" title="[blog.ruanxinyu.cn]"></p><p>运维中心<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-11-09-04.png" title="[blog.ruanxinyu.cn]"></p><p>项目管理<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-11-10-24.png" title="[blog.ruanxinyu.cn]"></p><h1 id="QuickBI报表"><a href="#QuickBI报表" class="headerlink" title="QuickBI报表"></a>QuickBI报表</h1><h2 id="QuickBI的介绍"><a href="#QuickBI的介绍" class="headerlink" title="QuickBI的介绍"></a>QuickBI的介绍</h2><p>产品概述<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-14-41-54.png" title="[blog.ruanxinyu.cn]"></p><p>产品架构<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-14-42-18.png" title="[blog.ruanxinyu.cn]"></p><p>角色定位<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-14-44-45.png" title="[blog.ruanxinyu.cn]"></p><p>常见应用步骤<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-14-45-39.png" title="[blog.ruanxinyu.cn]"></p><h2 id="QuickBI的数据管理"><a href="#QuickBI的数据管理" class="headerlink" title="QuickBI的数据管理"></a>QuickBI的数据管理</h2><p>数据源管理<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-14-46-51.png" title="[blog.ruanxinyu.cn]"></p><p>数据集管理<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-14-51-55.png" title="[blog.ruanxinyu.cn]"></p><p>首页<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-15-03-22.png" title="[blog.ruanxinyu.cn]"></p><p>新建数据源<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-15-03-47.png" title="[blog.ruanxinyu.cn]"></p><p>表格分析<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-15-10-44.png" title="[blog.ruanxinyu.cn]"></p><p>图表与门户-常见图标<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-15-12-25.png" title="[blog.ruanxinyu.cn]"></p><p>图表<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-15-16-14.png" title="[blog.ruanxinyu.cn]"></p><p>门户<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-15-17-19.png" title="[blog.ruanxinyu.cn]"></p><h1 id="DataV数据大屏"><a href="#DataV数据大屏" class="headerlink" title="DataV数据大屏"></a>DataV数据大屏</h1><h2 id="产品介绍"><a href="#产品介绍" class="headerlink" title="产品介绍"></a>产品介绍</h2><p>产品概述<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-15-22-00.png" title="[blog.ruanxinyu.cn]"></p><p>特性1：多重场景模板<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-15-22-47.png" title="[blog.ruanxinyu.cn]"></p><p>特性2：丰富开放的图表库<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-15-23-21.png" title="[blog.ruanxinyu.cn]"></p><p>特性3：支持多种数据源<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-15-24-21.png" title="[blog.ruanxinyu.cn]"></p><p>特性4：零门槛图形化界面设计<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-15-25-13.png" title="[blog.ruanxinyu.cn]"></p><p>特性5，支持数据交互分析<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-15-26-53.png" title="[blog.ruanxinyu.cn]"></p><p>特性6：支持适配与发布方式<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-15-26-17.png" title="[blog.ruanxinyu.cn]"></p><h2 id="DataV大屏介绍"><a href="#DataV大屏介绍" class="headerlink" title="DataV大屏介绍"></a>DataV大屏介绍</h2><p>展示类大屏<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-15-29-42.png" title="[blog.ruanxinyu.cn]"></p><p>展示类大屏示例<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-15-30-22.png" title="[blog.ruanxinyu.cn]"></p><p>分析类大屏<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-15-30-51.png" title="[blog.ruanxinyu.cn]"></p><p>分析类大屏示例<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-15-31-18.png" title="[blog.ruanxinyu.cn]"></p><p>监控类大屏<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-15-31-39.png" title="[blog.ruanxinyu.cn]"></p><p>监控类大屏示例<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-15-32-12.png" title="[blog.ruanxinyu.cn]"></p><p>可视化大屏设计原则<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-15-33-01.png" title="[blog.ruanxinyu.cn]"></p><p>大屏样例1<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-15-33-33.png" title="[blog.ruanxinyu.cn]"></p><p>大屏样例2<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-15-36-21.png" title="[blog.ruanxinyu.cn]"></p><h2 id="DataV演示"><a href="#DataV演示" class="headerlink" title="DataV演示"></a>DataV演示</h2><p>添加数据<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-15-38-15.png" title="[blog.ruanxinyu.cn]"></p><p>视频和样例<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-15-38-33.png" title="[blog.ruanxinyu.cn]"></p><p>创建大屏-1<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-15-39-16.png" title="[blog.ruanxinyu.cn]"></p><p>创建大屏-2<br><img src="/posts/阿里ACA认证学习记录/2018-09-29-15-39-37.png" title="[blog.ruanxinyu.cn]"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;大数据概述&quot;&gt;&lt;a href=&quot;#大数据概述&quot; class=&quot;headerlink&quot; title=&quot;大数据概述&quot;&gt;&lt;/a&gt;大数据概述&lt;/h1&gt;&lt;p&gt;大数据，指无法在可承受的时间范围内用常规软件工具进行捕捉，管理和处理的数据集合，是需要新处理模式才能具有更强的决策力
      
    
    </summary>
    
      <category term="技术分享" scheme="http://ruanxinyu.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="大数据" scheme="http://ruanxinyu.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下搭建HAProxy+KeepAlived高可用集群</title>
    <link href="http://ruanxinyu.github.io/posts/Ubuntu%E4%B8%8B%E6%90%AD%E5%BB%BAHAProxy-KeepAlived%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/"/>
    <id>http://ruanxinyu.github.io/posts/Ubuntu下搭建HAProxy-KeepAlived高可用集群/</id>
    <published>2018-09-28T02:48:23.000Z</published>
    <updated>2018-10-02T08:08:38.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><p>本次教程搭建的架构图如下所示，通过KeepAlived实现HAProxy的高可用，通过HAProxy实现后端服务器App01和App02的高可用和负载均衡。HAPrxoy有两台，分别为<code>192.168.1.102</code>和<code>192.168.1.103</code>，VIP为<code>192.168.1.104</code>，通过<code>8081</code>端口访问App01的两台机器，通过<code>8082</code>端口访问App02的两台机器。<br><img src="/posts/Ubuntu下搭建HAProxy-KeepAlived高可用集群/2018-10-01-22-23-16.png" title="[blog.ruanxinyu.cn]"></p><p>本教程使用Ubuntu 18.04.01系统，同时需要安装KeepAlived和HAProxy，相关的教程请参考：</p><ol><li><a href="/posts/VirtualBox安装Ubuntu教程/" title="VirtualBox安装Ubuntu教程">VirtualBox安装Ubuntu教程</a></li><li><a href="/posts/Ubuntu下KeepAlived的安装与配置/" title="Ubuntu下KeepAlived的安装与配置">Ubuntu下KeepAlived的安装与配置</a></li><li><a href="/posts/Ubuntu下HAProxy的安装与配置/" title="Ubuntu下HAProxy的安装与配置">Ubuntu下HAProxy的安装与配置</a></li></ol><h1 id="HAProxy的配置"><a href="#HAProxy的配置" class="headerlink" title="HAProxy的配置"></a>HAProxy的配置</h1><p>两台HAProxy的配置是相同的，通过<code>8081</code>端口访问App01的两台机器，通过<code>8082</code>端口访问App02的两台机器。为了简化配置过程，还是采用最简化的配置，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line">    daemon                          <span class="comment"># 配置为后台启动</span></span><br><span class="line">defaults</span><br><span class="line">    mode http</span><br><span class="line">    timeout connect 30s             <span class="comment"># 连接超时</span></span><br><span class="line">    timeout client 30s              <span class="comment"># 客户端超时</span></span><br><span class="line">    timeout server 30s              <span class="comment"># 服务器超时</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###########################################################</span></span><br><span class="line">frontend app01</span><br><span class="line">    <span class="built_in">bind</span> *:8081                     <span class="comment"># 绑定端口</span></span><br><span class="line">    default_backend app01_backend   <span class="comment"># 默认的backend的名称</span></span><br><span class="line"></span><br><span class="line">backend app01_backend</span><br><span class="line">    server web1 192.168.1.106:80    <span class="comment"># 设置后端服务器</span></span><br><span class="line">    server web1 192.168.1.108:80    <span class="comment"># 设置后端服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###########################################################</span></span><br><span class="line">frontend app02</span><br><span class="line">    <span class="built_in">bind</span> *:8082                     <span class="comment"># 绑定端口</span></span><br><span class="line">    default_backend app02_backend   <span class="comment"># 默认的backend的名称</span></span><br><span class="line"></span><br><span class="line">backend app02_backend</span><br><span class="line">    server web1 192.168.1.107:80    <span class="comment"># 设置后端服务器</span></span><br><span class="line">    server web1 192.168.1.109:80    <span class="comment"># 设置后端服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###########################################################</span></span><br><span class="line">listen stats</span><br><span class="line">    <span class="built_in">bind</span> *:8083                     <span class="comment"># 设置监控组的名称</span></span><br><span class="line">    stats refresh 30s               <span class="comment"># 统计页面自动刷新时间</span></span><br><span class="line">    stats uri /stats                <span class="comment"># 统计页面url</span></span><br></pre></td></tr></table></figure><h1 id="KeepAlived的配置"><a href="#KeepAlived的配置" class="headerlink" title="KeepAlived的配置"></a>KeepAlived的配置</h1><p>KeepAlived与HAProxy是在相同机器上，IP地址分别为主机haproxy_vm01（<code>192.168.1.102</code>）和备机haproxy_vm02（<code>192.168.1.103</code>）， VIP为<code>192.168.1.104</code>。因为KeepAlived是主备的，因此两台机器的配置是不一样的。</p><ol><li>主机haproxy_vm01（<code>192.168.1.102</code>）的配置如下：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vrrp_script chk_service_ok &#123;</span><br><span class="line">       script <span class="string">"killall -0 haproxy"</span></span><br><span class="line">       interval 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    interface enp0s3</span><br><span class="line">    state MASTER</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.1.104/25</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">       chk_service_ok</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>备机haproxy_vm02（<code>192.168.1.103</code>）的配置如下，相对于haproxy_vm01，只修改<code>state</code>和<code>priority</code>:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vrrp_script chk_service_ok &#123;</span><br><span class="line">       script <span class="string">"killall -0 haproxy"</span></span><br><span class="line">       interval 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    interface enp0s3</span><br><span class="line">    state BACKUP</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 80</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.1.104/25</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">       chk_service_ok</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述配置可以看到，检查haproxy是否可用使用的是<code>killall -0 haproxy</code>命令来判断haproxy的进程是否存在。</p><h1 id="App服务的配置"><a href="#App服务的配置" class="headerlink" title="App服务的配置"></a>App服务的配置</h1><p>我们后台采用<code>apache</code>，首先在每一台后台机器安装apache，我们使用Apache服务器来模拟HAProxy后端的服务器，<code>sudo apt-get install apache2</code>。</p><p>为了区分App01和App02，我们做如下操作：</p><ol><li>在App01的两台机器执行<code>sudo sh -c &#39;echo &quot;This is apache server 01&quot; &gt; /var/www/html/index.html&#39;</code></li><li>在App02的两台机器执行<code>sudo sh -c &#39;echo &quot;This is apache server 02&quot; &gt; /var/www/html/index.html&#39;</code></li></ol><h1 id="高可用功能验证"><a href="#高可用功能验证" class="headerlink" title="高可用功能验证"></a>高可用功能验证</h1><p>分别重新启动KeepAlived（<code>sudo systemctl restart keepalived</code>）和HAProxy（<code>sudo systemctl restart haproxy</code>）, 在HAProxy的两台机器上通过<code>ip a</code>命令，可以看到VIP（<code>192.168.1.104</code>）在haproxy_vm01（<code>192.168.1.102</code>）上.<br><img src="/posts/Ubuntu下搭建HAProxy-KeepAlived高可用集群/2018-10-01-22-31-44.png" title="[blog.ruanxinyu.cn]"></p><p>通过VIP访问8081和8082端口，可以发现能够正常访问到后台的服务器，如下所示，此时我们关闭haproxy_vm01（<code>192.168.1.102</code>）上的HAproxy进程<code>sudo killall haproxy</code>，通过<code>ip a</code>可以看到VIP已经漂移到haproxy_vm02（<code>192.168.1.103</code>）上，但是通过VIP访问8081和8082端口，业务仍旧是正常的，说明HAProxy是高可用的。<br><img src="/posts/Ubuntu下搭建HAProxy-KeepAlived高可用集群/2018-10-01-22-29-38.png" title="[blog.ruanxinyu.cn]"></p><p>我们关闭App01_vm01（<code>192.168.1.106</code>)，然后通过VIP访问8081端口，依旧可以正常访问，说明HAProxy已经保证后端App的高可用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;环境说明&quot;&gt;&lt;a href=&quot;#环境说明&quot; class=&quot;headerlink&quot; title=&quot;环境说明&quot;&gt;&lt;/a&gt;环境说明&lt;/h1&gt;&lt;p&gt;本次教程搭建的架构图如下所示，通过KeepAlived实现HAProxy的高可用，通过HAProxy实现后端服务器App01
      
    
    </summary>
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下HAProxy的安装与配置</title>
    <link href="http://ruanxinyu.github.io/posts/Ubuntu%E4%B8%8BHAProxy%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://ruanxinyu.github.io/posts/Ubuntu下HAProxy的安装与配置/</id>
    <published>2018-09-24T23:07:50.000Z</published>
    <updated>2018-10-02T08:09:39.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HAProxy的简介"><a href="#HAProxy的简介" class="headerlink" title="HAProxy的简介"></a>HAProxy的简介</h1><p>HAProxy是一款提供高可用性、负载均衡以及基于TCP（第四层）和HTTP（第七层）应用的代理软件，支持虚拟主机，它是免费、快速并且可靠的一种解决方案。</p><p>HAProxy实现了一种事件驱动、单一进程模型，此模型支持非常大的并发连接数，特别适用于那些负载特大的web站点，完全可以支持数以万计的并发连接，根据官方文档，haproxy可以跑满10Gbps。并且它的运行模式使得它可以很简单安全的整合进您当前的架构中，同时可以保护你的web服务器不被暴露到网络上。</p><p>HAProxy支持全透明代理，可以用客户端IP地址或者任何其他地址来连接后端服务器，同时提供连接拒绝功能，可以有效的限制攻击蠕虫。</p><h1 id="HAProxy的安装"><a href="#HAProxy的安装" class="headerlink" title="HAProxy的安装"></a>HAProxy的安装</h1><p>该教程使用的Ubuntu版本是18.04.1版本，Ubuntu的安装教程参考<a href="/posts/VirtualBox安装Ubuntu教程/" title="VirtualBox安装Ubuntu教程">VirtualBox安装Ubuntu教程</a>。HAProxy可以直接通过apt-get安装，也可以通过源码编译安装。</p><h2 id="apt-get安装"><a href="#apt-get安装" class="headerlink" title="apt-get安装"></a>apt-get安装</h2><p>Ubuntu下执行<code>sudo apt-get install haproxy</code>命令即可安装。</p><p>通过<code>which haproxy</code>可以看到KeepAlived是安装在<code>/usr/sbin/haproxy</code>下，HAProxy的配置文件路径为：<code>/etc/haproxy/haproxy.cfg</code></p><p>使用<code>sudo haproxy -f /etc/haproxy/haproxy.cfg</code>即可启动HAProxy。</p><h2 id="源码编译安装"><a href="#源码编译安装" class="headerlink" title="源码编译安装"></a>源码编译安装</h2><p>源码安装的脚本可以点击此处下载： <a href="/posts/Ubuntu下HAProxy的安装与配置/haproxy_install.sh" title="haproxy_install.sh">haproxy_install.sh</a>，下面对安装过程做一下说明。</p><p>一般源码安装目录为<code>/usr/local/haproxy</code>，在源码目录中的<code>README</code>文件有安装说明，下面罗列出几点内容：</p><ol><li>在执行make命令之前是不需要执行<code>./configure</code>命令的，因此执行的参数都在make命令中指定</li><li>我们操作系统为Ubuntu 18.04.1，不涉及嵌入式编译，因此使用<code>TARGET=linux26 ARCH=x86_64</code>参数</li><li>PCRE(Perl Compatible Regular Expressions)的速度是其他的2-10倍，因此添加<code>USE_PCRE=1</code>选项，但是前提需要安装<code>libpcre3 libpcre3-dev</code></li><li>为支持HTTPS协议，我们需要添加<code>USE_OPENSSL=1</code>选项，但是前提需要安装<code>libssl-dev</code></li><li>为支持HTTP的压缩功能，我们需要添加<code>USE_ZLIB=1</code>，但是前提需要安装<code>zlib1g-dev</code></li><li>为了保证安装目录为<code>/usr/local/haproxy</code>，我们需要在<code>make install</code>命令中指定<code>PREFIX</code>参数</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential libssl-dev <span class="comment"># 安装编译工具和openssl依赖</span></span><br><span class="line">sudo apt-get install zlib1g-dev</span><br><span class="line">sudo apt-get install libpcre3 libpcre3-dev</span><br><span class="line">wget https://www.haproxy.org/download/1.8/src/haproxy-1.8.8.tar.gz <span class="comment"># 下载源码</span></span><br><span class="line">tar -zxvf haproxy-1.8.8.tar.gz <span class="comment"># 解压源码</span></span><br><span class="line"><span class="built_in">cd</span> haproxy-1.8.8/</span><br><span class="line">make TARGET=linux26 ARCH=x86_64 USE_PCRE=1 USE_OPENSSL=1 USE_ZLIB=1 <span class="comment"># 编译源码，从README中可以看出如何编译</span></span><br><span class="line">sudo make install PREFIX=/usr/<span class="built_in">local</span>/haproxy <span class="comment"># 安装到安装目录，需要使用root权限</span></span><br><span class="line"></span><br><span class="line">sudo mkdir -p /etc/haproxy</span><br><span class="line">sudo cp -a examples/transparent_proxy.cfg /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure><p>启动HAProxy: <code>sudo /usr/local/haproxy/sbin/haproxy -f /etc/haproxy/haproxy.cfg</code></p><p><strong>可能遇到的问题</strong></p><ol><li><p>提示<code>make is not found</code></p><blockquote><p>源码安装需要安装编译器将源码转换为二进制可执行文件，因此执行<code>sudo apt-get install build-essential</code>安装编译器即可</p></blockquote></li><li><p>启动时提示<code>parsing [/etc/haproxy/haproxy.cfg:12] : unknown keyword &#39;ca-base&#39; in &#39;global&#39; section</code></p><blockquote><p>编译haproxy时没有使能openssl的支持，安装<code>libssl-dev</code>并在编译时指定<code>USE_OPENSSL=1</code>选项即可</p></blockquote></li></ol><h2 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h2><h3 id="方式1：rc-local"><a href="#方式1：rc-local" class="headerlink" title="方式1：rc.local"></a>方式1：rc.local</h3><p>编辑<code>sudo vim /etc/rc.local</code>, 在最下面添加<code>sudo /usr/local/haproxy/sbin/haproxy -f /etc/haproxy/haproxy.cfg</code>语句即可。</p><h3 id="方式2：systemctl"><a href="#方式2：systemctl" class="headerlink" title="方式2：systemctl"></a>方式2：systemctl</h3><p>编辑文件，<code>sudo vim /lib/systemd/system/haproxy.service</code>文件，写入如下的内容，然后执行<code>sudo ln -s /lib/systemd/system/haproxy.service /etc/systemd/system/multi-user.target.wants/haproxy.service</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=HAproxy Daemon</span><br><span class="line">After=syslog.target network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line">ConditionFileNotEmpty=/etc/haproxy/haproxy.cfg</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">KillMode=process</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/haproxy/sbin/haproxy -f /etc/haproxy/haproxy.cfg</span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -HUP <span class="variable">$MAINPID</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>启动keepalived进程，并设置为开机启动，通过<code>sudo systemctl status haproxy</code>查看状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start haproxy  <span class="comment"># 注意： 如果配置文件不正确的话HPAProxy是启动不起来的</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> haproxy</span><br></pre></td></tr></table></figure><h1 id="HAProxy的配置"><a href="#HAProxy的配置" class="headerlink" title="HAProxy的配置"></a>HAProxy的配置</h1><p>下面我们以一个最简单的用例说明如何配置HAProxy，架构图如下，<code>192.168.1.102</code>上安装有HAProxy, <code>8081</code>端口转向<code>192.168.1.106</code>服务器，<code>8082</code>端口转向<code>192.168.1.107</code>服务器。因为HAProxy是提供有统计功能的，因此打开该功能，并监听在<code>8083</code>端口。<br><img src="/posts/Ubuntu下HAProxy的安装与配置/2018-09-27-22-03-48.png" title="[blog.ruanxinyu.cn]"></p><h2 id="配置HAProxy"><a href="#配置HAProxy" class="headerlink" title="配置HAProxy"></a>配置HAProxy</h2><p>编辑<code>sudo vim /etc/haproxy/haproxy.cfg</code>文件，写入如下的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line">    daemon                          <span class="comment"># 配置为后台启动</span></span><br><span class="line">defaults</span><br><span class="line">    mode http</span><br><span class="line">    timeout connect 30s             <span class="comment"># 连接超时</span></span><br><span class="line">    timeout client 30s              <span class="comment"># 客户端超时</span></span><br><span class="line">    timeout server 30s              <span class="comment"># 服务器超时</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###########################################################</span></span><br><span class="line">frontend app01</span><br><span class="line">    <span class="built_in">bind</span> *:8081                     <span class="comment"># 绑定端口</span></span><br><span class="line">    default_backend app01_backend   <span class="comment"># 默认的backend的名称</span></span><br><span class="line"></span><br><span class="line">backend app01_backend</span><br><span class="line">    server web1 192.168.1.106:80    <span class="comment"># 设置后端服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###########################################################</span></span><br><span class="line">frontend app02</span><br><span class="line">    <span class="built_in">bind</span> *:8082                     <span class="comment"># 绑定端口</span></span><br><span class="line">    default_backend app02_backend   <span class="comment"># 默认的backend的名称</span></span><br><span class="line"></span><br><span class="line">backend app02_backend</span><br><span class="line">    server web1 192.168.1.107:80    <span class="comment"># 设置后端服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###########################################################</span></span><br><span class="line">listen stats</span><br><span class="line">    <span class="built_in">bind</span> *:8083                     <span class="comment"># 设置监控组的名称</span></span><br><span class="line">    stats refresh 30s               <span class="comment"># 统计页面自动刷新时间</span></span><br><span class="line">    stats uri /stats                <span class="comment"># 统计页面url</span></span><br></pre></td></tr></table></figure><p>然后执行<code>sudo /usr/local/haproxy/sbin/haproxy -f /etc/haproxy/haproxy.cfg</code>启动HAProxy，通过<code>sudo netstat -lntp | grep haproxy</code>，可以看出HAProxy已经监听配置文件中的三个端口：<br><img src="/posts/Ubuntu下HAProxy的安装与配置/2018-09-26-15-08-13.png" title="[blog.ruanxinyu.cn]"></p><p><strong>可能遇到的问题</strong></p><ol><li><p>启动时提示<code>unknown keyword</code>，如下所示：</p><blockquote><p>从错误信息中可以看出keyword前都多了好多空格，说明我们的配置文件没有正确的使用tab键</p><img src="/posts/Ubuntu下HAProxy的安装与配置/2018-09-26-13-22-19.png" title="[blog.ruanxinyu.cn]"></blockquote></li><li><p>启动HAProxy后配置文件没有生效</p><blockquote><p>因为之前启动的HAProxy进程没有关闭，可以执行<code>sudo killall haproxy</code>关闭进程。</p></blockquote></li></ol><h2 id="搭建Apache服务器"><a href="#搭建Apache服务器" class="headerlink" title="搭建Apache服务器"></a>搭建Apache服务器</h2><p>我们使用Apache服务器来模拟HAProxy后端的服务器，首先分别在<code>192.168.1.106</code>和<code>192.168.1.107</code>两台机器上执行<code>sudo apt-get install apache2</code>，完成后Apache会自动启动并监听80端口，此时在浏览器中访问对应机器，既可以看到Apache2的首页，默认使用的首页文件路径为<code>/var/www/html/index.html</code>。</p><p>为了对两台机器做一下区分，我们做如下操作：</p><ol><li>在<code>192.168.1.106</code>执行<code>sudo sh -c &#39;echo &quot;This is apache server 01&quot; &gt; /var/www/html/index.html&#39;</code></li><li>在<code>192.168.1.107</code>执行<code>sudo sh -c &#39;echo &quot;This is apache server 02&quot; &gt; /var/www/html/index.html&#39;</code></li></ol><p>此时分别访问<code>http://192.168.1.106/</code>和<code>http://192.168.1.107/</code>可以看到下面的界面：<br><img src="/posts/Ubuntu下HAProxy的安装与配置/2018-09-27-22-18-00.png" title="[blog.ruanxinyu.cn]"></p><h1 id="HAProxy的验证"><a href="#HAProxy的验证" class="headerlink" title="HAProxy的验证"></a>HAProxy的验证</h1><p>此时访问HAProxy（<code>192.168.1.102</code>）的<code>8081</code>和<code>8082</code>可以看到分别访问到后端的<code>192.168.1.106</code>和<code>192.168.1.107</code>的<code>80</code>端口，如下所示，说明HAProxy的功能已经生效。<br><img src="/posts/Ubuntu下HAProxy的安装与配置/2018-09-27-22-19-32.png" title="[blog.ruanxinyu.cn]"></p><p>访问HAProxy的<code>8083</code>端口：<code>http://192.168.1.102:8083/stats</code>，可以看到HAProxy自带的的统计数据页面，如下所示：<br><img src="/posts/Ubuntu下HAProxy的安装与配置/2018-09-27-22-20-09.png" title="[blog.ruanxinyu.cn]"></p><h1 id="HAProxy详细配置说明（高级）"><a href="#HAProxy详细配置说明（高级）" class="headerlink" title="HAProxy详细配置说明（高级）"></a>HAProxy详细配置说明（高级）</h1><p>对于初级使用者可以不必详细掌握所有的配置，只需要在使用的时候能查到即可，因此将说明放置在此处，参数说明来源于<code>https://www.linuxidc.com/Linux/2012-07/65350.htm</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">####################全局配置信息########################</span></span><br><span class="line"><span class="comment">#######参数是进程级的，通常和操作系统（OS）相关#########</span></span><br><span class="line">global</span><br><span class="line">  maxconn 20480 <span class="comment">#默认最大连接数</span></span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local3 <span class="comment">#[err warning info debug]</span></span><br><span class="line">  chroot /var/haproxy <span class="comment">#chroot运行的路径</span></span><br><span class="line">  uid 99 <span class="comment">#所属运行的用户uid</span></span><br><span class="line">  gid 99 <span class="comment">#所属运行的用户组</span></span><br><span class="line">  daemon <span class="comment">#以后台形式运行haproxy</span></span><br><span class="line">  nbproc 1 <span class="comment">#进程数量(可以设置多个进程提高性能)</span></span><br><span class="line">  pidfile /var/run/haproxy.pid <span class="comment">#haproxy的pid存放路径,启动进程的用户必须有权限访问此文件</span></span><br><span class="line">  <span class="built_in">ulimit</span>-n 65535 <span class="comment">#ulimit的数量限制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#####################默认的全局设置######################</span></span><br><span class="line"><span class="comment">##这些参数可以被利用配置到frontend，backend，listen组件##</span></span><br><span class="line">defaults</span><br><span class="line">  <span class="built_in">log</span> global</span><br><span class="line">  mode http <span class="comment">#所处理的类别 (#7层 http;4层tcp )</span></span><br><span class="line">  maxconn 20480 <span class="comment">#最大连接数</span></span><br><span class="line">  option httplog <span class="comment">#日志类别http日志格式</span></span><br><span class="line">  option httpclose <span class="comment">#每次请求完毕后主动关闭http通道</span></span><br><span class="line">  option dontlognull <span class="comment">#不记录健康检查的日志信息</span></span><br><span class="line">  option forwardfor <span class="comment">#如果后端服务器需要获得客户端真实ip需要配置的参数，可以从Http Header中获得客户端ip</span></span><br><span class="line">  option redispatch <span class="comment">#serverId对应的服务器挂掉后,强制定向到其他健康的服务器</span></span><br><span class="line">  option abortonclose <span class="comment">#当服务器负载很高的时候，自动结束掉当前队列处理比较久的连接</span></span><br><span class="line">  stats refresh 30 <span class="comment">#统计页面刷新间隔</span></span><br><span class="line">  retries 3 <span class="comment">#3次连接失败就认为服务不可用，也可以通过后面设置</span></span><br><span class="line">  balance roundrobin <span class="comment">#默认的负载均衡的方式,轮询方式</span></span><br><span class="line">  <span class="comment"># balance source #默认的负载均衡的方式,类似nginx的ip_hash</span></span><br><span class="line">  <span class="comment"># balance leastconn #默认的负载均衡的方式,最小连接</span></span><br><span class="line">  contimeout 5000 <span class="comment">#连接超时</span></span><br><span class="line">  clitimeout 50000 <span class="comment">#客户端超时</span></span><br><span class="line">  srvtimeout 50000 <span class="comment">#服务器超时</span></span><br><span class="line">  timeout check 2000 <span class="comment">#心跳检测超时</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################监控页面的设置#######################</span></span><br><span class="line">listen admin_status <span class="comment">#Frontend和Backend的组合体,监控组的名称，按需自定义名称</span></span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:65532 <span class="comment">#监听端口</span></span><br><span class="line">  mode http <span class="comment">#http的7层模式</span></span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local3 err <span class="comment">#错误日志记录</span></span><br><span class="line">  stats refresh 5s <span class="comment">#每隔5秒自动刷新监控页面</span></span><br><span class="line">  stats uri /admin?stats <span class="comment">#监控页面的url</span></span><br><span class="line">  stats realm itnihao\ itnihao <span class="comment">#监控页面的提示信息</span></span><br><span class="line">  stats auth admin:admin <span class="comment">#监控页面的用户和密码admin,可以设置多个用户名</span></span><br><span class="line">  stats auth admin1:admin1 <span class="comment">#监控页面的用户和密码admin1</span></span><br><span class="line">  stats hide-version <span class="comment">#隐藏统计页面上的HAproxy版本信息</span></span><br><span class="line">  stats admin <span class="keyword">if</span> TRUE <span class="comment">#手工启用/禁用,后端服务器(haproxy-1.4.9以后版本)</span></span><br><span class="line"></span><br><span class="line">  rrorfile 403 /etc/haproxy/errorfiles/403.http</span><br><span class="line">  rrorfile 500 /etc/haproxy/errorfiles/500.http</span><br><span class="line">  rrorfile 502 /etc/haproxy/errorfiles/502.http</span><br><span class="line">  rrorfile 503 /etc/haproxy/errorfiles/503.http</span><br><span class="line">  rrorfile 504 /etc/haproxy/errorfiles/504.http</span><br><span class="line"></span><br><span class="line"><span class="comment">#################HAProxy的日志记录内容设置###################</span></span><br><span class="line">  capture request header Host len 40</span><br><span class="line">  capture request header Content-Length len 10</span><br><span class="line">  capture request header Referer len 200</span><br><span class="line">  capture response header Server len 40</span><br><span class="line">  capture response header Content-Length len 10</span><br><span class="line">  capture response header Cache-Control len 8</span><br><span class="line"></span><br><span class="line"><span class="comment">#######################网站监测listen配置#####################</span></span><br><span class="line"><span class="comment">###########此用法主要是监控haproxy后端服务器的监控状态############</span></span><br><span class="line">listen site_status</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:1081 <span class="comment">#监听端口</span></span><br><span class="line">  mode http <span class="comment">#http的7层模式</span></span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local3 err <span class="comment">#[err warning info debug]</span></span><br><span class="line">  monitor-uri /site_status <span class="comment">#网站健康检测URL，用来检测HAProxy管理的网站是否可以用，正常返回200，不正常返回503</span></span><br><span class="line">  acl site_dead nbsrv(server_web) lt 2 <span class="comment">#定义网站down时的策略当挂在负载均衡上的指定backend的中有效机器数小于1台时返回true</span></span><br><span class="line">  acl site_dead nbsrv(server_blog) lt 2</span><br><span class="line">  acl site_dead nbsrv(server_bbs) lt 2</span><br><span class="line">  monitor fail <span class="keyword">if</span> site_dead <span class="comment">#当满足策略的时候返回503，网上文档说的是500，实际测试为503</span></span><br><span class="line">  monitor-net 192.168.16.2/32 <span class="comment">#来自192.168.16.2的日志信息不会被记录和转发</span></span><br><span class="line">  monitor-net 192.168.16.3/32</span><br><span class="line"></span><br><span class="line"><span class="comment">########frontend配置############</span></span><br><span class="line"><span class="comment">#####注意，frontend配置里面可以定义多个acl进行匹配操作########</span></span><br><span class="line">frontend http_80_in</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:80 <span class="comment">#监听端口，即haproxy提供web服务的端口，和lvs的vip端口类似</span></span><br><span class="line">  mode http <span class="comment">#http的7层模式</span></span><br><span class="line">  <span class="built_in">log</span> global <span class="comment">#应用全局的日志配置</span></span><br><span class="line">  option httplog <span class="comment">#启用http的log</span></span><br><span class="line">  option httpclose <span class="comment">#每次请求完毕后主动关闭http通道，HA-Proxy不支持keep-alive模式</span></span><br><span class="line">  option forwardfor <span class="comment">#如果后端服务器需要获得客户端的真实IP需要配置次参数，将可以从Http Header中获得客户端IP</span></span><br><span class="line">  <span class="comment">########acl策略配置#############</span></span><br><span class="line">  acl itnihao_web hdr_reg(host) -i ^(www.itnihao.cn|ww1.itnihao.cn)$</span><br><span class="line">  <span class="comment">#如果请求的域名满足正则表达式中的2个域名返回true -i是忽略大小写</span></span><br><span class="line">  acl itnihao_blog hdr_dom(host) -i blog.itnihao.cn</span><br><span class="line">  <span class="comment">#如果请求的域名满足www.itnihao.cn返回true -i是忽略大小写</span></span><br><span class="line">  <span class="comment">#acl itnihao hdr(host) -i itnihao.cn</span></span><br><span class="line">  <span class="comment">#如果请求的域名满足itnihao.cn返回true -i是忽略大小写</span></span><br><span class="line">  <span class="comment">#acl file_req url_sub -i killall=</span></span><br><span class="line">  <span class="comment">#在请求url中包含killall=，则此控制策略返回true,否则为false</span></span><br><span class="line">  <span class="comment">#acl dir_req url_dir -i allow</span></span><br><span class="line">  <span class="comment">#在请求url中存在allow作为部分地址路径，则此控制策略返回true,否则返回false</span></span><br><span class="line">  <span class="comment">#acl missing_cl hdr_cnt(Content-length) eq 0</span></span><br><span class="line">  <span class="comment">#当请求的header中Content-length等于0时返回true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########acl策略匹配相应#############</span></span><br><span class="line">  <span class="comment">#block if missing_cl</span></span><br><span class="line">  <span class="comment">#当请求中header中Content-length等于0阻止请求返回403</span></span><br><span class="line">  <span class="comment">#block if !file_req || dir_req</span></span><br><span class="line">  <span class="comment">#block表示阻止请求，返回403错误，当前表示如果不满足策略file_req，或者满足策略dir_req，则阻止请求</span></span><br><span class="line">  use_backend server_web <span class="keyword">if</span> itnihao_web</span><br><span class="line">  <span class="comment">#当满足itnihao_web的策略时使用server_web的backend</span></span><br><span class="line">  use_backend server_blog <span class="keyword">if</span> itnihao_blog</span><br><span class="line">  <span class="comment">#当满足itnihao_blog的策略时使用server_blog的backend</span></span><br><span class="line">  <span class="comment">#redirect prefix http://blog.itniaho.cn code 301 if itnihao</span></span><br><span class="line">  <span class="comment">#当访问itnihao.cn的时候，用http的301挑转到http://192.168.16.3</span></span><br><span class="line">  default_backend server_bbs</span><br><span class="line">  <span class="comment">#以上都不满足的时候使用默认server_bbs的backend</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##########backend的设置##############</span></span><br><span class="line"><span class="comment">#下面我将设置三组服务器 server_web，server_blog，server_bbs</span></span><br><span class="line"><span class="comment">##################backend server_web####################</span></span><br><span class="line">backend server_web</span><br><span class="line">  mode http <span class="comment">#http的7层模式</span></span><br><span class="line">  balance roundrobin <span class="comment">#负载均衡的方式，roundrobin平均方式</span></span><br><span class="line">  cookie SERVERID <span class="comment">#允许插入serverid到cookie中，serverid后面可以定义</span></span><br><span class="line">  option httpchk GET /index.html <span class="comment">#心跳检测的文件</span></span><br><span class="line">  server web1 192.168.16.2:80 cookie web1 check inter 1500 rise 3 fall 3 weight 1</span><br><span class="line">  <span class="comment">#服务器定义，cookie 1表示serverid为web1，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用，</span></span><br><span class="line">  <span class="comment">#fall 3是3次失败认为服务器不可用，weight代表权重</span></span><br><span class="line">  server web2 192.168.16.3:80 cookie web2 check inter 1500 rise 3 fall 3 weight 2</span><br><span class="line">  <span class="comment">#服务器定义，cookie 1表示serverid为web2，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用，</span></span><br><span class="line">  <span class="comment">#fall 3是3次失败认为服务器不可用，weight代表权重</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################backend server_blog######################</span></span><br><span class="line">backend server_blog</span><br><span class="line">  mode http <span class="comment">#http的7层模式</span></span><br><span class="line">  balance roundrobin <span class="comment">#负载均衡的方式，roundrobin平均方式</span></span><br><span class="line">  cookie SERVERID <span class="comment">#允许插入serverid到cookie中，serverid后面可以定义</span></span><br><span class="line">  option httpchk GET /index.html <span class="comment">#心跳检测的文件</span></span><br><span class="line">  server blog1 192.168.16.2:80 cookie blog1 check inter 1500 rise 3 fall 3 weight 1</span><br><span class="line">  <span class="comment">#服务器定义，cookie 1表示serverid为blog1，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用，fall 3是3次失败认为服务器不可用，weight代表权重</span></span><br><span class="line">  server blog2 192.168.16.3:80 cookie blog2 check inter 1500 rise 3 fall 3 weight 2</span><br><span class="line">  <span class="comment">#服务器定义，cookie 1表示serverid为blog2，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用，fall 3是3次失败认为服务器不可用，weight代表权重</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##################backend server_bbs########################</span></span><br><span class="line">backend server_bbs</span><br><span class="line">  mode http <span class="comment">#http的7层模式</span></span><br><span class="line">  balance roundrobin <span class="comment">#负载均衡的方式，roundrobin平均方式</span></span><br><span class="line">  cookie SERVERID <span class="comment">#允许插入serverid到cookie中，serverid后面可以定义</span></span><br><span class="line">  option httpchk GET /index.html <span class="comment">#心跳检测的文件</span></span><br><span class="line">  server bbs1 192.168.16.2:80 cookie bbs1 check inter 1500 rise 3 fall 3 weight 1</span><br><span class="line">  <span class="comment">#服务器定义，cookie 1表示serverid为bbs1，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用，fall 3是3次失败认为服务器不可用，weight代表权重</span></span><br><span class="line">  server bbs2 192.168.16.3:80 cookie bbs2 check inter 1500 rise 3 fall 3 weight 2</span><br><span class="line">  <span class="comment">#服务器定义，cookie 1表示serverid为bbs2，check inter 1500是检测心跳频率rise 3是3次正确认为服务器可用，fall 3是3次失败认为服务器不可用，weight代表权重</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HAProxy的简介&quot;&gt;&lt;a href=&quot;#HAProxy的简介&quot; class=&quot;headerlink&quot; title=&quot;HAProxy的简介&quot;&gt;&lt;/a&gt;HAProxy的简介&lt;/h1&gt;&lt;p&gt;HAProxy是一款提供高可用性、负载均衡以及基于TCP（第四层）和HTTP
      
    
    </summary>
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Linux初始化init系统：Sysvinit、Upstart和Systemd</title>
    <link href="http://ruanxinyu.github.io/posts/Linux%E5%88%9D%E5%A7%8B%E5%8C%96init%E7%B3%BB%E7%BB%9F/"/>
    <id>http://ruanxinyu.github.io/posts/Linux初始化init系统/</id>
    <published>2018-09-22T07:04:38.000Z</published>
    <updated>2018-10-01T04:55:08.279Z</updated>
    
    <content type="html"><![CDATA[<h1 id="init系统介绍"><a href="#init系统介绍" class="headerlink" title="init系统介绍"></a>init系统介绍</h1><p>Linux操作系统的启动首先从BIOS开始，接下来进入bootloader，由bootloader载入内核，进行内核初始化。内核初始化的最后一步就是启动<code>pid</code>为<code>1</code>的<code>init进程</code>。init以守护进程方式存在，是系统的第一个进程,，是所有其他进程的祖先。</p><p>Init系统能够定义、管理和控制 init进程的行为。它负责组织和运行许多独立的或相关的始化工作(因此被称为init系统)，从而让计算机系统进入某种用户预订的运行模式。</p><p>Linux初始化init系统包括：<code>Sysvinit</code>、<code>Upstart</code>和<code>Systemd</code>，它们在Ubuntu系统下的演化如下：</p><ol><li><code>Ubuntu 6.10</code>及以前版本使用Sysvinit。</li><li><code>Ubuntu 14.10</code>及以前版本使用Upstart，通过与Sysvinit并存。</li><li><code>Ubuntu 15.04</code>开始默认使用Systemd，不能与Sysvinit或Upstart并存</li></ol><h1 id="Sysvinit介绍"><a href="#Sysvinit介绍" class="headerlink" title="Sysvinit介绍"></a>Sysvinit介绍</h1><blockquote><p>Sysvinit就是System V风格的init系统，顾名思义，它源于System V系列UNIX。</p></blockquote><h2 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h2><p>Sysvinit用术语<code>runlevel</code>来定义”预订的运行模式”，默认的运行模式定义在<code>/etc/inittab</code>文件的<code>initdefault</code>项。如果没有默认的运行模式，那么用户将进入系统控制台，手动决定进入何种运行模式。</p><p>Sysvinit中运行模式描述了系统各种预订的运行模式。通常会有8种运行模式，即运行模式<code>0-6和S</code>。其中<code>0</code>表示关机，<code>1</code>表示单用户模式，<code>3</code>为命令行模式，<code>5</code>为GUI模式，<code>6</code>表示重启，<code>1和S</code>等往往用于系统故障之后的排错和恢复。可以看出每一种运行模式所作的初始化工作是不一样的。</p><h2 id="Sysvinit执行顺序"><a href="#Sysvinit执行顺序" class="headerlink" title="Sysvinit执行顺序"></a>Sysvinit执行顺序</h2><ul><li>/etc/rc.d/rc.sysinit</li><li>/etc/rc.d/rc 和/etc/rc.d/rcX.d/ (X 代表运行级别 0-6)</li><li>/etc/rc.d/rc.local</li><li>X Display Manager（可选）</li></ul><p>首先，运行<code>rc.sysinit</code>以便执行一些重要的系统初始化任务。</p><p>然后，Sysvinit开始运行<code>/etc/rc.d/rc</code>脚本。根据不同的runlevel，rc脚本将执行<code>/etc/rc.d/rcX.d</code>(X就是runlevel)目录下的所有启动脚本。当所有的初始化脚本执行完毕。该目录下有多个脚本，为了保证系统正常关闭，脚本是要按照顺序执行的在该目录下所有以<code>K</code>开头的脚本都将在关闭系统时调用，字母<code>K</code>之后的数字定义了它们的执行顺序。</p><p>然后，Sysvinit运行<code>/etc/rc.d/rc.local</code>脚本。rc.local是Linux 留给用户进行个性化设置的地方。</p><h2 id="Sysvinit优缺点"><a href="#Sysvinit优缺点" class="headerlink" title="Sysvinit优缺点"></a>Sysvinit优缺点</h2><p>Sysvinit的优点：</p><ol><li>是概念简单，开发人员只需要编写启动和停止脚本，概念非常清楚</li><li>确定的执行顺序，脚本严格按照启动数字的大小顺序执行，一个执行完毕再执行下一个，这非常有益于错误排查</li></ol><p>Sysvinit的缺点：</p><ol><li>串行地执行脚本导致Sysvinit运行效率较慢</li><li>对动态设备加载等Linux新特性支持不友好</li></ol><h1 id="Upstart介绍"><a href="#Upstart介绍" class="headerlink" title="Upstart介绍"></a>Upstart介绍</h1><h2 id="开发UpStart的缘由"><a href="#开发UpStart的缘由" class="headerlink" title="开发UpStart的缘由"></a>开发UpStart的缘由</h2><p>当Linux内核进入2.6时代时，系统支持热插拔功能，一旦新外设连接到系统，内核便可以自动实时地发现它们，并初始化这些设备，进而使用它们。这为便携式设备用户提供了很大的灵活性。</p><p>Sysvinit启动时必须一次性把所有可能用到的服务都启动起来，即使该设备没有连接，因此会造成浪费，比如为了管理打印任务，系统需要启动CUPS等服务。</p><p>UpStart基于事件机制，比如U盘插入USB接口后，udev得到内核通知，发现该设备，这就是一个新的事件。UpStart在感知到该事件之后触发相应的等待任务，比如处理/etc/fstab 中存在的挂载点。采用这种事件驱动的模式，upstart 完美地解决了即插即用设备带来的新问题。</p><p>UpStart相对于Sysvinit具有如下的优势：</p><ul><li>更快地启动系统</li><li>当新硬件被发现时动态启动服务</li><li>硬件被拔除时动态停止服务</li></ul><h2 id="UpStart的原理"><a href="#UpStart的原理" class="headerlink" title="UpStart的原理"></a>UpStart的原理</h2><p>Upstart的基本概念和设计清晰明确。UpStart主要的概念是job和event。Job就是一个工作单元，用来完成一件工作，比如启动一个后台服务，或者运行一个配置命令。每个Job都等待一个或多个事件，一旦事件发生，upstart就触发该 job 完成相应的工作。</p><p>Job包括包括<code>TaskJob</code>，<code>SeriveJob</code>和<code>AbstractJob</code>。其中SeriveJob代表后台服务进程，一旦开始运行就成为一个后台进程，由init进程管理。</p><p>事件是个非常抽象的概念，下面我罗列出一些常见的事件，希望可以帮助您进一步了解事件的含义：</p><ul><li>系统上电启动，init 进程会发送”start”事件</li><li>根文件系统可写时，相应 job 会发送文件系统就绪的事件</li><li>一个块设备被发现并初始化完成，发送相应的事件</li><li>某个文件系统被挂载，发送相应的事件</li><li>类似 atd 和 cron，可以在某个时间点，或者周期的时间点发送事件</li><li>另外一个 job 开始或结束时，发送相应的事件</li><li>一个磁盘文件被修改时，可以发出相应的事件</li><li>一个网络设备被发现时，可以发出相应的事件</li><li>缺省路由被添加或删除时，可以发出相应的事件</li></ul><p>系统初始化的过程是在工作和事件的相互协作下完成的，可以大致描述如下:</p><blockquote><p>系统初始化时，init 进程开始运行，init 进程自身会发出不同的事件，这些最初的事件会触发一些工作运行。每个工作运行过程中会释放不同的事件，这些事件又将触发新的工作运行。如此反复，直到整个系统正常运行起来。</p></blockquote><p>UpStart是兼容SysvInit的runlevel的，通过触发执行<code>/etc/init/rc.conf</code>来执行<code>/etc/rc$.d/</code>目录下的所有脚本。</p><h1 id="Systemd介绍"><a href="#Systemd介绍" class="headerlink" title="Systemd介绍"></a>Systemd介绍</h1><p>Systemd提供了和Sysvinit以及LSBinitscripts兼容的特性。系统中已经存在的服务和进程无需修改。这降低了系统向systemd 迁移的成本，使得Systemd替换现有初始化系统成为可能。</p><p>Systemd的启动速度更快，提供了比UpStart更激进的并行启动能力，采用了socket/D-Bus Activation等技术启动服务，提供按需启动的能力，只有在某个服务被真正请求的时候才启动它，当该服务结束，systemd 可以关闭它，等待下次需要时再次启动它。</p><p>Systemd还提供如下等特性:</p><ul><li>和init比起来引导过程简化了很多</li><li>Systemd支持并发引导过程从而可以更快启动</li><li>通过控制组来追踪进程，而不是PID</li><li>优化了处理引导过程和服务之间依赖的方式</li><li>支持系统快照和恢复</li><li>监控已启动的服务；也支持重启已崩溃服务</li><li>包含了systemd-login模块用于控制用户登录</li><li>支持加载和卸载组件</li><li>低内存使用痕迹以及任务调度能力</li><li>记录事件的Journald模块和记录系统日志的syslogd模块</li></ul><h2 id="Systemd的单元概念"><a href="#Systemd的单元概念" class="headerlink" title="Systemd的单元概念"></a>Systemd的单元概念</h2><p>系统初始化需要执行的任务非常多。每一个任务都被Systemd 抽象为一个配置单元，即unit。当前单元类型如下：</p><ul><li><strong>service</strong>：代表一个后台服务进程，比如 mysqld。这是最常用的一类。</li><li><strong>socket</strong>：此类配置单元封装系统和互联网中的一个 套接字 。当下，systemd 支持流式、数据报和连续包的 AF_INET、AF_INET6、AF_UNIX socket 。每一个套接字配置单元都有一个相应的服务配置单元 。相应的服务在第一个”连接”进入套接字时就会启动(例如：nscd.socket 在有新连接后便启动 nscd.service)。</li><li><strong>device</strong>：此类配置单元封装一个存在于 Linux 设备树中的设备。每一个使用 udev 规则标记的设备都将会在 systemd 中作为一个设备配置单元出现。</li><li><strong>mount</strong>：此类配置单元封装文件系统结构层次中的一个挂载点。Systemd 将对这个挂载点进行监控和管理。比如可以在启动时自动将其挂载；可以在某些条件下自动卸载。Systemd 会将/etc/fstab 中的条目都转换为挂载点，并在开机时处理。</li><li><strong>automount</strong>：此类配置单元封装系统结构层次中的一个自挂载点。每一个自挂载配置单元对应一个挂载配置单元 ，当该自动挂载点被访问时，systemd 执行挂载点中定义的挂载行为。</li><li><strong>swap</strong>: 和挂载配置单元类似，交换配置单元用来管理交换分区。用户可以用交换配置单元来定义系统中的交换分区，可以让这些交换分区在启动时被激活。</li><li><strong>target</strong>：此类配置单元为其他配置单元进行逻辑分组。它们本身实际上并不做什么，只是引用其他配置单元而已。这样便可以对配置单元做一个统一的控制。这样就可以实现大家都已经非常熟悉的运行级别概念。比如想让系统进入图形化模式，需要运行许多服务和配置命令，这些操作都由一个个的配置单元表示，将所有这些配置单元组合为一个目标(target)，就表示需要将这些配置单元全部执行一遍以便进入目标所代表的系统运行状态。 (例如：multi-user.target 相当于在传统使用 SysV 的系统中运行级别 5)</li><li><strong>timer</strong>：定时器配置单元用来定时触发用户定义的操作，这类配置单元取代了 atd、crond 等传统的定时服务。</li><li><strong>snapshot</strong>：与 target 配置单元相似，快照是一组配置单元。它保存了系统当前的运行状态。</li></ul><h2 id="Systemd的Target和运行级别"><a href="#Systemd的Target和运行级别" class="headerlink" title="Systemd的Target和运行级别"></a>Systemd的Target和运行级别</h2><p>systemd使用目标（target）替代了运行级别的概念，提供了更大的灵活性，如您可以继承一个已有的目标，并添加其它服务，来创建自己的目标。通过target文件夹的命令也可以看出对应的runlevel：</p><table><thead><tr><th>Sysvinit运行级别</th><th>Systemd目标</th><th>备注</th></tr></thead><tbody><tr><td>0</td><td>poweroff.target</td><td>关闭系统</td></tr><tr><td>1,s</td><td>rescue.target</td><td>单用户模式</td></tr><tr><td>2,4</td><td>multi-user.target</td><td>多用户，非图形化</td></tr><tr><td>3</td><td>multi-user.target</td><td>多用户，非图形化</td></tr><tr><td>5</td><td>graphical.target</td><td>多用户，图形化</td></tr><tr><td>6</td><td>reboot.target</td><td>重启</td></tr></tbody></table><img src="/posts/Linux初始化init系统/2018-09-22-16-29-55.png" title="[blog.ruanxinyu.cn]"><h2 id="使用C-C-开发新的系统服务"><a href="#使用C-C-开发新的系统服务" class="headerlink" title="使用C/C++开发新的系统服务"></a>使用C/C++开发新的系统服务</h2><p>使用C/C++开发新的系统服务可能需要关注如下的内容：</p><ol><li>后台服务进程代码不需要执行两次派生来实现后台精灵进程，只需要实现服务本身的主循环即可。</li><li>不要调用 setsid()，交给 systemd 处理</li><li>不再需要维护 pid 文件。</li><li>Systemd 提供了日志功能，服务进程只需要输出到 stderr 即可，无需使用 syslog。</li><li>处理信号 SIGTERM，这个信号的唯一正确作用就是停止当前服务，不要做其他的事情。</li><li>SIGHUP 信号的作用是重启服务。</li><li>需要套接字的服务，不要自己创建套接字，让 systemd 传入套接字。</li><li>使用 sd_notify()函数通知 systemd 服务自己的状态改变。一般地，当服务初始化结束，进入服务就绪状态时，可以调用它。</li></ol><h2 id="Unit文件的编写"><a href="#Unit文件的编写" class="headerlink" title="Unit文件的编写"></a>Unit文件的编写</h2><p>服务配置单元文件以<code>.service</code>为文件名后缀，默认时存放在<code>/lib/systemd/system/</code>目录下，然后链接到<code>/etc/systemd/system/</code>对应的目录下。下面以sshd的为例<code>/etc/system/system/sshd.service</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=OpenSSH server daemon</span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=/etc/sysconfig/sshd <span class="comment">#设置环境变量</span></span><br><span class="line">ExecStartPre=/usr/sbin/sshd-keygen</span><br><span class="line">ExecStart=/usrsbin/sshd –D <span class="variable">$OPTIONS</span></span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> –HUP <span class="variable">$MAINPID</span></span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=42s</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target  <span class="comment">#系统以该形式运行时，服务方可启动</span></span><br></pre></td></tr></table></figure><p>文件分为三个小节，其中<code>[Unit]</code>段和<code>[Install]</code>段是所有Unit文件通用的，用于配置服务的描述、依赖和随系统启动方式，而<code>[Service]</code>断则是服务类型的Unit文件（后缀为.service)特有的，用于定义服务的具体管理和操作方法。</p><p>在/etc/systemd/system 目录下还可以看到诸如*.wants 的目录，放在该目录下的配置单元文件等同于在<code>[Unit]</code>小节中的 wants关键字，即本单元启动时，还需要启动这些单元。比如您可以简单地把您自己写的 foo.service 文件放入 multi-user.target.wants 目录下，这样每次都会被默认启动了。</p><h3 id="Unit-参数"><a href="#Unit-参数" class="headerlink" title="[Unit]参数"></a>[Unit]参数</h3><ul><li><strong>Description</strong>： 一段描述这个Unit文件的文字，通常只是简短的一句话。</li><li><strong>Documentation</strong>：指定服务的文档，可以是一个或多个文档的URL路径。</li><li><strong>Requires</strong>：依赖的其他Unit列表，列在其中的Unit模块会在这个服务启动的同时被启动。</li><li><strong>Wants</strong>：与Requires相似，但只是在被配置的这个Unit启动时，触发启动列出的每个Unit模块，而不去考虑这些模块启动时候是否成功。</li><li><strong>After</strong>：与Requires相似，但是在后面列出的所有模块启动完成以后，才会启动当前的服务。与Requires不同的是，After不会因为依赖程序在运行过程中停止运行，导致当前服务也停止。</li><li><strong>Before</strong>：与After相反，在启动指定的任意一个模块之前，都会首先确保当前服务已经运行。</li><li><strong>BindsTo</strong>：与Requires非常相似，但是一种更强的关联。启动这个服务时会同时启动列出的所有模块，当有模块启动失败时终止当前服务。反之，只要列出的模块全部启动以后，就会自动启动当前服务。并且，这些模块中有任意一个出现意外结束或重启，这个服务会跟着终止或重启。</li><li><strong>PartOf</strong>：这是一个BindsTo作用的子集，仅在列出的任何模块失败或重启时，终止或重启当前服务，而不会随列出模块的启动而启动。</li><li><strong>OnFailure</strong>：当这个模块启动失败时，就自动启动列出的每个模块。</li><li><strong>Conflicts</strong>：与这个模块有冲突的模块，如果列出的模块中有已经在运行的，则会将已启动的冲突模块停止，并启动当前模块；反过来，冲突模块启动时会把当前模块停止。</li></ul><blockquote><p>上面的这些配置，除了Description外，其他都可以被添加多次。比如After参数，可以使用多个After参数，也可以在一行内使用空格分割，写多个依赖模块。</p></blockquote><h3 id="install-参数"><a href="#install-参数" class="headerlink" title="[install]参数"></a>[install]参数</h3><ul><li><strong>WantedBy</strong>：和前面Wants作用相似，但此处表示当前模块被依赖。</li><li><strong>RequiredBy</strong>：和前面的Requires作用相似，但此处表示当前模块被依赖。</li><li><strong>Also</strong>：当这个服务被enable/disable时，将自动enable/disable后面列出的每个模块。</li></ul><h3 id="service-参数"><a href="#service-参数" class="headerlink" title="[service]参数"></a>[service]参数</h3><h4 id="服务生命周期控制相关的参数"><a href="#服务生命周期控制相关的参数" class="headerlink" title="服务生命周期控制相关的参数"></a>服务生命周期控制相关的参数</h4><ul><li><strong>Type</strong>：服务的类型，常用的有simple（默认类型）和forking，默认的simple类型可以适用于绝大多数场景，因此一般可以忽略者这个参数的配置。对于服务进程启动后通过fork系统调用创建子进程，然后关闭应用程序本身进程的情况，则应该将Type的值设置为forking；否则Systemd将不会跟踪子进程的行为，而认为服务已经退出。</li><li><strong>RemainAfterExit</strong>：指为true或false（也可以写yes或no），默认为false。当配置为true时，Systemd只会负责启动服务进程，之后即便服务进程退出了，Systemd也仍然会认为这个服务还在运行中。这个配置主要是提供给一些并非常驻内存，而是启动注册后立即退出，然后等待消息按需启动的特殊类型服务使用的。</li><li><strong>ExecStart</strong>：这个参数是几乎每个“.service”文件都会有的，指定服务启动的主要命令，在每个配置文件中只能使用一次.</li><li><strong>ExecStartPre</strong>：指定在启动执行ExecStart命令前的准备工作，在同一个配置文件中可以有多个，所有命令会按照文件中书写的顺序依次被执行。</li><li><strong>ExecStartPost</strong>：指定在启动执行ExecStart命令后的收尾工作，在同一个配置文件中也可有多个。</li><li><strong>TimeoutSec</strong>：快速设置TimeoutStartSec和TimeoutStopSec参数成指定值。（另外，关于默认时间设定都在systemd配置文件中的DefaultTimeoutStartSec、DefaultTimeoutStopSec和DefaultRestartSec字段进行配置，如果这些字段缺省，DefaultTimeoutStartSec和DefaultTimeoutStopSec的默认指为90s，DefaultRestartSec默认为100ms）</li><li><strong>TimeoutStartSec</strong>：启动服务时的等待秒数，如果超出这个时间服务仍然没有执行完所有的启动命令，则Systemd会认为服务自动失败。这一配置对于使用Docker容器托管的应用十分重要。由于Docker第一次运行时可能会需要从网络上下载服务的镜像文件，因此造成比较严重的延时，容易被Systemd误判断为启动失败而杀死。通常，对于这种服务，需要将TimeoutStartSec设置为0，关闭超时检测。</li><li><strong>ExecStop</strong>：停止服务所需要执行的主要命令，在每个配置文件中只能够有一个。</li><li><strong>ExecStopPost</strong>：指定在ExecStop命令执行后的收尾工作，在同一配置文件中可以有多个。</li><li><strong>TimeoutStopSec</strong>：停止服务时的等待秒数，如果超过这个时间服务仍然没有停止，Systemd会使用SIGKILL信号强行干掉服务进程。</li><li><strong>Restart</strong>：这个值用于指定在什么情况下需要重启服务进程。常用的值有：no、no-success、on-failure、on-abnormal、on-abort和always。默认值为no，即不会自动重启服务。这些不同的值分别表示在哪些情况下，服务会重新启动。</li><li><strong>RestartSec</strong>：如果服务需要被重启，这个参数的值为服务被重启前的等待秒数。默认为100ms。</li><li><strong>ExecReload</strong>：重新加载服务所需执行的主要命令。</li></ul><h4 id="服务上下文配置相关的参数"><a href="#服务上下文配置相关的参数" class="headerlink" title="服务上下文配置相关的参数"></a>服务上下文配置相关的参数</h4><ul><li><strong>Environment</strong>：为服务添加环境变量，格式直接为Environment=“foo=bar”（看了一下Systemd的手册，这个参数所接受的格式有些奇葩，建议是直接“foo=bar”，取的时候使用${foo}进行获取）</li><li><strong>EnvironmentFile</strong>：指定加载一个包含服务所需的环境变量列表的文件，文件中的每一行都是一个环境变量的定义。顺便提一下，建议使用的时候将=换成=-，如EnvironmentFile=-/etc/my.env，和=的区别是，使用=-时，假如/etc/my.env文件不在也不会报错。</li><li><strong>Nice</strong>：服务的进程优先级，指越小优先级越高，默认为0，。其中-20为最高优先级，19为最低优先级。</li><li><strong>WorkingDirectory</strong>：指定当前服务的工作目录。</li><li><strong>RootDirectory</strong>：指定当前服务进程的根目录（/目录）。如果配置了这个参数，服务将无法访问指定目录外的任何文件。</li><li><strong>User</strong>：指定运行服务的用户，会影响服务对本地文件系统的访问权限。</li><li><strong>Group</strong>：指定运行服务的用户组，会影响服务对本地文件系统的访问权限。</li><li><strong>MountFlags</strong>：这个值其实是服务的Mount Namespace的配置，会影响服务进程上下文中挂载点的信息，即服务是否会继承主机上已有的挂载点，以及如果服务运行时执行了挂载或卸载设备的操作，是否会真实地在主机上产生效果。可选值为shared、slave和private，具体作用如下表所示：</li><li><strong>LimitCPU/LimitSTACK/LimitNOFILE/LimitNPROC等</strong>：限定服务可用的系统资源量，CPU、程序堆栈、文件句柄数量、子进程数量等</li></ul><h2 id="Systemd命令行工具的使用"><a href="#Systemd命令行工具的使用" class="headerlink" title="Systemd命令行工具的使用"></a>Systemd命令行工具的使用</h2><p>systemd 的主要命令行工具是<code>systemctl</code>，可以替换<code>service</code>、<code>chkconfig</code>以及<code>telinit</code>命令的使用。</p><h3 id="Systemd命令和sysvinit命令的对照表"><a href="#Systemd命令和sysvinit命令的对照表" class="headerlink" title="Systemd命令和sysvinit命令的对照表"></a>Systemd命令和sysvinit命令的对照表</h3><table><thead><tr><th>Sysvinit命令</th><th>Systemd命令</th><th>备注</th></tr></thead><tbody><tr><td>service foo start</td><td>systemctl start foo.service</td><td>用来启动一个服务 (并不会重启现有的)</td></tr><tr><td>service foo stop</td><td>systemctl stop foo.service</td><td>用来停止一个服务 (并不会重启现有的)</td></tr><tr><td>service foo restart</td><td>systemctl restart foo.service</td><td>用来停止并启动一个服务</td></tr><tr><td>service foo reload</td><td>systemctl reload foo.service</td><td>当支持时，重新装载配置文件而不中断等待操作</td></tr><tr><td>service foo condrestart</td><td>systemctl condrestart foo.service</td><td>如果服务正在运行那么重启它</td></tr><tr><td>service foo status</td><td>systemctl status foo.service</td><td>汇报服务是否正在运行</td></tr><tr><td>ls /etc/rc.d/init.d/</td><td>systemctl list-unit-files –type=service</td><td>用来列出可以启动或停止的服务列表</td></tr><tr><td>chkconfig foo on</td><td>systemctl enable foo.service</td><td>在下次启动时或满足其他触发条件时设置服务为启用</td></tr><tr><td>chkconfig foo off</td><td>systemctl disable foo.service</td><td>在下次启动时或满足其他触发条件时设置服务为禁用</td></tr><tr><td>chkconfig foo</td><td>systemctl is-enabled foo.service</td><td>用来检查一个服务在当前环境下被配置为启用还是禁用</td></tr><tr><td>chkconfig –list</td><td>systemctl list-unit-files –type=service</td><td>输出在各个运行级别下服务的启用和禁用情况</td></tr><tr><td>chkconfig foo –list</td><td>ls /etc/systemd/system/*.wants/foo.service</td><td>用来列出该服务在哪些运行级别下启用和禁用</td></tr><tr><td>chkconfig foo –add</td><td>systemctl daemon-reload</td><td>当您创建新服务文件或者变更设置时使用</td></tr><tr><td>telinit 3</td><td>systemctl isolate multi-user.target (OR systemctl isolate runlevel3.target OR telinit 3)</td><td>改变至多用户运行级别</td></tr></tbody></table><h3 id="systemd电源管理命令"><a href="#systemd电源管理命令" class="headerlink" title="systemd电源管理命令"></a>systemd电源管理命令</h3><table><thead><tr><th>命令</th><th>操作</th></tr></thead><tbody><tr><td>systemctl reboot</td><td>重启机器</td></tr><tr><td>systemctl poweroff</td><td>关机</td></tr><tr><td>systemctl suspend</td><td>待机</td></tr><tr><td>systemctl hibernate</td><td>休眠</td></tr><tr><td>systemctl hybrid-sleep</td><td>混合休眠模式（同时休眠到硬盘并待机）</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;init系统介绍&quot;&gt;&lt;a href=&quot;#init系统介绍&quot; class=&quot;headerlink&quot; title=&quot;init系统介绍&quot;&gt;&lt;/a&gt;init系统介绍&lt;/h1&gt;&lt;p&gt;Linux操作系统的启动首先从BIOS开始，接下来进入bootloader，由bootloa
      
    
    </summary>
    
      <category term="Linux" scheme="http://ruanxinyu.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ruanxinyu.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下KeepAlived的安装与配置</title>
    <link href="http://ruanxinyu.github.io/posts/Ubuntu%E4%B8%8BKeepAlived%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://ruanxinyu.github.io/posts/Ubuntu下KeepAlived的安装与配置/</id>
    <published>2018-09-18T12:42:46.000Z</published>
    <updated>2018-10-02T08:11:24.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="KeepAlived介绍"><a href="#KeepAlived介绍" class="headerlink" title="KeepAlived介绍"></a>KeepAlived介绍</h1><p>Keepalived是一个基于VRRP协议来实现的服务高可用方案，可以利用其来避免IP单点故障，一般与其它负载均衡技术（如lvs、haproxy、nginx）一起工作来达到集群的高可用。</p><p>健康检查和失败切换是keepalived的两大核心功能。</p><p>keepalived的健康检查支持tcp三次握手、icmp请求、http请求、udp和echo请求等方式对负载均衡器后面的实际的服务器)进行保活，具体采用哪种检查方式可以根据自己的业务需要进行选择；</p><p>失败切换主要是应用于配置了主备模式的负载均衡器， 由VRRP(虚拟路由冗余协议）协议实现，对外提供一个VIP（虚拟IP），VIP在其中master机器上，当该机器出现故障时，VIP会自动漂移到slave的机器上，从而保证对外的功能是正常的。如果mastr机器功能正常之后，会自动加入到服务器集群中，无需人工干预，只需要人工做修复故障的服务器。</p><h1 id="VRRP协议介绍"><a href="#VRRP协议介绍" class="headerlink" title="VRRP协议介绍"></a>VRRP协议介绍</h1><p>VRRP（虚拟路由协议，virtual redundant routing protocol)是为消除网络设备单点故障而设计的主备模式的协议，使得在发生故障时，可以在不影响内外数据通信，不修改内部网络的网络参数的情况下切换设备。</p><p>VRRP协议通过配置虚拟路由ID(VRID)来将两台或多台设备虚拟成一个虚拟设备，对外提供一个或多个虚拟IP(VIP)和虚拟的MAC地址（VMC），通过该VIP和VMC对外提供服务，可以保证在设备切换时网络参数不变。所以当VIP在哪一台设备上，则该设备为master节点对外提供服务，其他的节点为backup节点不实际对外提供服务。</p><p>VRRP协议通过心跳算法自动选举哪个节点为master节点，默认使用多播数据来传输VRRP数据。通过配置文件可以指定每个设备的优先级，所以在初始状态时，优先级最大的为master节点。VRRP运行时只有MASTER路由器定时发送VRRP通告信息，表示master工作正常，backup只接收VRRP数据，不发送数据，如果一定时间内没有接收到master的通告信息，各backup将宣告自己成为master，发送通告信息，重新进行master选举状态。</p><h1 id="KeepAlived的安装"><a href="#KeepAlived的安装" class="headerlink" title="KeepAlived的安装"></a>KeepAlived的安装</h1><p>该教程使用的Ubuntu版本是18.04.1版本，Ubuntu的安装教程参考<a href="/posts/VirtualBox安装Ubuntu教程/" title="VirtualBox安装Ubuntu教程">VirtualBox安装Ubuntu教程</a>。KeepAlived可以直接通过apt-get安装，也可以通过源码编译安装。</p><h2 id="apt-get安装"><a href="#apt-get安装" class="headerlink" title="apt-get安装"></a>apt-get安装</h2><p>Ubuntu下执行<code>sudo apt-get install keepalived</code>命令即可安装。</p><p>通过<code>which keepalived</code>可以看到KeepAlived是安装在<code>/usr/sbin/keepalived</code>下。</p><p>使用<code>sudo service keepalived start</code>即可启动KeepAlived。</p><h2 id="源码编译安装"><a href="#源码编译安装" class="headerlink" title="源码编译安装"></a>源码编译安装</h2><p>源码安装的脚本可以点击此处下载： <a href="/posts/Ubuntu下KeepAlived的安装与配置/keepalived_install.sh" title="keepalived_install.sh">keepalived_install.sh</a>，下面对安装过程做一下说明。</p><p>首先安装编译工具和openssl，下载KeepAlived源码并解压，然后执行源码编译三件套（<code>./configure &amp;&amp; make &amp;&amp; make install</code>），我们安装的目录为<code>/usr/local/keepalived</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential libssl-dev <span class="comment"># 安装编译工具和openssl依赖</span></span><br><span class="line">wget http://www.keepalived.org/software/keepalived-2.0.7.tar.gz <span class="comment"># 下载源码</span></span><br><span class="line">tar -zxvf keepalived-2.0.7.tar.gz <span class="comment"># 解压源码</span></span><br><span class="line"><span class="built_in">cd</span> keepalived-2.0.7/</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/keepalived <span class="comment"># 配置keepalived的安装目录</span></span><br><span class="line">make <span class="comment"># 编译源码</span></span><br><span class="line">sudo make install <span class="comment"># 安装到安装目录，需要使用root权限</span></span><br></pre></td></tr></table></figure><p><strong>可能遇到的问题</strong></p><ol><li><p>执行<code>./configure</code>时提示<code>g++ is not found</code></p><blockquote><p>源码安装需要安装编译器将源码转换为二进制可执行文件，因此执行<code>sudo apt-get install build-essential</code>安装编译器即可</p></blockquote></li><li><p>执行<code>./configure</code>时提示<code>OpenSSL is not properly installed on your system</code></p><blockquote><p>你的系统没有安装openssl，执行<code>sudo apt-get install libssl-dev</code>即可</p></blockquote></li></ol><h1 id="守护进程和开机启动"><a href="#守护进程和开机启动" class="headerlink" title="守护进程和开机启动"></a>守护进程和开机启动</h1><p>由于Ubunt 18.04.1默认使用Systemd作为init程序，因此设置守护进程也采用该方式，了解详细请参考<a href="/posts/Linux初始化init系统/" title="Linux初始化init系统：Sysvinit、Upstart和Systemd">Linux初始化init系统：Sysvinit、Upstart和Systemd</a></p><p>首先，创建相关文件的链接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/keepalived</span><br><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/keepalived/sbin/keepalived /usr/sbin/</span><br><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf</span><br><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/keepalived/etc/sysconfig/keepalived /etc/default/keepalived</span><br></pre></td></tr></table></figure><p>编辑文件，<code>sudo vim /lib/systemd/system/keepalived.service</code>文件，写入如下的内容，然后执行<code>sudo ln -s /lib/systemd/system/keepalived.service /etc/systemd/system/multi-user.target.wants/keepalived.service</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Keepalive Daemon (LVS and VRRP)</span><br><span class="line">After=syslog.target network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"><span class="comment"># Only start if there is a configuration file</span></span><br><span class="line">ConditionFileNotEmpty=/etc/keepalived/keepalived.conf</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">KillMode=process</span><br><span class="line"><span class="comment"># Read configuration variable file if it is present</span></span><br><span class="line">EnvironmentFile=-/etc/default/keepalived</span><br><span class="line">ExecStart=/usr/sbin/keepalived <span class="variable">$KEEPALIVED_OPTIONS</span></span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -HUP <span class="variable">$MAINPID</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>启动keepalived进程，并设置为开机启动，通过<code>sudo systemctl status keepalived</code>查看状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start keepalived</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> keepalived</span><br></pre></td></tr></table></figure><img src="/posts/Ubuntu下KeepAlived的安装与配置/2018-09-24-16-41-22.png" title="[blog.ruanxinyu.cn]"><h1 id="KeepAlive的配置"><a href="#KeepAlive的配置" class="headerlink" title="KeepAlive的配置"></a>KeepAlive的配置</h1><h2 id="keepalived-conf"><a href="#keepalived-conf" class="headerlink" title="keepalived.conf"></a>keepalived.conf</h2><p>在keepalived的安装目录<code>/usr/local/keepalived/etc/keepalived/samples/</code>有很多样例配置，每一种配置对应的都是一种使用场景，后续会做详细说明，因此在此处不做过多的分析。</p><p>此处使用最简单的配置入门，假设我们以<code>/tmp/</code>目录下是否存在<code>service_ok</code>这个文件来判断服务是否可用。可参考样例<code>/usr/local/keepalived/etc/keepalived/samples/keepalived.conf.vrrp.localcheck</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vrrp_script chk_service_ok &#123;</span><br><span class="line">       script <span class="string">"ls /tmp/service_ok"</span>    <span class="comment"># 检查文件是否存在</span></span><br><span class="line">       interval 2                     <span class="comment"># 每两秒钟检查一次</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    interface enp0s3                  <span class="comment"># 指定网卡</span></span><br><span class="line">    state MASTER                      <span class="comment"># 角色，主机为MASTER，备机为BACKUP</span></span><br><span class="line">    virtual_router_id 51              <span class="comment"># 虚拟路由Id，相同的ID表示在相同的组</span></span><br><span class="line">    priority 100                      <span class="comment"># 优先级，MASTER的优先级要比BACKUP的大</span></span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;               <span class="comment"># 虚拟IP地址，即VIP</span></span><br><span class="line">        192.168.42.23/25</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;                    <span class="comment"># 设置vrrp检查脚本的名称</span></span><br><span class="line">       chk_service_ok</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="KeepAlived的验证"><a href="#KeepAlived的验证" class="headerlink" title="KeepAlived的验证"></a>KeepAlived的验证</h1><p>我们使用两台虚拟机，IP地址分别为主机vm01（<code>192.168.42.21</code>）和备机vm02（<code>192.168.42.22</code>）， VIP为<code>192.168.42.23</code>。安装好KeepAlived后, 编辑配置文件<code>sudo vim /etc/keepalived/keepalived.conf</code></p><ol><li>主机vm01（<code>192.168.42.21</code>）的配置如下：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vrrp_script chk_service_ok &#123;</span><br><span class="line">       script <span class="string">"ls /tmp/service_ok"</span></span><br><span class="line">       interval 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    interface enp0s3</span><br><span class="line">    state MASTER</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.42.23/25</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">       chk_service_ok</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>备机vm02（<code>192.168.42.22</code>）的配置如下，相对于vm01，只修改<code>state</code>和<code>priority</code>:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vrrp_script chk_service_ok &#123;</span><br><span class="line">       script <span class="string">"ls /tmp/service_ok"</span></span><br><span class="line">       interval 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    interface enp0s3</span><br><span class="line">    state BACKUP</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 80</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.42.23/25</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">       chk_service_ok</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，我们在两台机器上都创建一个system_ok文件，表示机器是OK的，<code>touch /tmp/service_ok</code>。然后执行<code>sudo systemctl restart keepalived</code>重新启动两台机器的keepalived。</p><p>分别在两台机器上执行<code>ip a</code>查看机器的网络信息，可以发现VIP（<code>192.168.42.23</code>）已经在主机vm01上，我们通过<code>ssh ruan@192.168.42.23</code>登陆到的也是主机vm01。</p><img src="/posts/Ubuntu下KeepAlived的安装与配置/2018-09-24-16-53-52.png" title="[blog.ruanxinyu.cn]"><p>我们删除主机vm01上的<code>/tmp/service_ok</code>文件，然后重新执行<code>ip a</code>，发现VIP（<code>192.168.42.23</code>）已经漂移到备机vm02上，此时我们通过<code>ssh ruan@192.168.42.23</code>登陆则是备机vm02。即当主机故障时，业务可以自动切换至备机。</p><img src="/posts/Ubuntu下KeepAlived的安装与配置/2018-09-24-16-58-02.png" title="[blog.ruanxinyu.cn]"><p>我们重新创建主机vm01上的<code>/tmp/service_ok</code>文件，，然后重新执行<code>ip a</code>，发现VIP（<code>192.168.42.23</code>）已经重新漂移到备机vm01上，此时我们通过<code>ssh ruan@192.168.42.23</code>登陆重新回到主机vm01。即当主机恢复时，可以自动将该主机加入到服务器群提供服务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;KeepAlived介绍&quot;&gt;&lt;a href=&quot;#KeepAlived介绍&quot; class=&quot;headerlink&quot; title=&quot;KeepAlived介绍&quot;&gt;&lt;/a&gt;KeepAlived介绍&lt;/h1&gt;&lt;p&gt;Keepalived是一个基于VRRP协议来实现的服务高可用
      
    
    </summary>
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>VirtualBox安装Ubuntu教程</title>
    <link href="http://ruanxinyu.github.io/posts/VirtualBox%E5%AE%89%E8%A3%85Ubuntu%E6%95%99%E7%A8%8B/"/>
    <id>http://ruanxinyu.github.io/posts/VirtualBox安装Ubuntu教程/</id>
    <published>2018-09-16T11:59:38.000Z</published>
    <updated>2018-10-01T04:55:08.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础准备工作"><a href="#基础准备工作" class="headerlink" title="基础准备工作"></a>基础准备工作</h1><p>本教程使用的VirtualBox版本为<code>5.2.18</code>，Ubuntu版本为<code>server 18.04.1</code>。</p><p>首先，下载Ubuntu Server镜像，本文以ubuntu-18.04.1为例，可以从华为开源镜像站提供加速下载，地址为： <a href="http://mirrors.huaweicloud.com/repository/ubuntu-releases/18.04.1/ubuntu-18.04.1-live-server-amd64.iso" target="_blank" rel="noopener">http://mirrors.huaweicloud.com/repository/ubuntu-releases/18.04.1/ubuntu-18.04.1-live-server-amd64.iso</a></p><p>下载并安装VirtualBox，下载地址为: <a href="https://download.virtualbox.org/virtualbox/5.2.18/VirtualBox-5.2.18-124319-Win.exe" target="_blank" rel="noopener">https://download.virtualbox.org/virtualbox/5.2.18/VirtualBox-5.2.18-124319-Win.exe</a></p><h1 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h1><ol><li><p>打开VirtualBox，点击<code>新建</code>, 输入名称，比如叫做<code>UbuntuTemplate</code>，之所以叫这个名称是因为如果后续需要多个Ubuntu虚拟机的话，可以直接复制该虚拟机，这样每次都可以有一个全新的虚拟机。操作系统版本选择<code>Ubuntu(64bit)</code>, 点击下一步，内存选择512M或者1024M都可以，因为我们下载的镜像是没有桌面的，因此对内存要求没有那么大。</p><img src="/posts/VirtualBox安装Ubuntu教程/2018-09-16-20-11-35.png" title="[blog.ruanxinyu.cn]"></li><li><p>选择<code>现在创建虚拟磁盘</code>，当然，如果也可以使用已经存在的磁盘，下一步，磁盘类型我更愿意用<code>VMDK(虚拟机磁盘)</code>，因此该磁盘VMWare也是可以使用的，磁盘大小选择<code>动态分配大小</code>。</p><img src="/posts/VirtualBox安装Ubuntu教程/2018-09-16-20-14-32.png" title="[blog.ruanxinyu.cn]"></li><li><p>此处有两个地方需要注意一下：</p></li></ol><blockquote><ol><li>选择磁盘的保存位置默认为虚拟机名称，这个时候是保存在用户目录下的，也就是C盘，因此<strong>最好是自己选择路径保存到其他目录</strong>，以免占用过多的C盘空间。</li><li>此处设置的其实是磁盘的最大大小，默认的10G肯定是太小了，可以直接改成<code>100G</code>, 这个是最大值，不是立即分配这么大的磁盘空间。</li></ol></blockquote><img src="/posts/VirtualBox安装Ubuntu教程/2018-09-16-20-18-22.png" title="[blog.ruanxinyu.cn]"><h1 id="设置虚拟机"><a href="#设置虚拟机" class="headerlink" title="设置虚拟机"></a>设置虚拟机</h1><h2 id="设置粘贴板"><a href="#设置粘贴板" class="headerlink" title="设置粘贴板"></a>设置粘贴板</h2><img src="/posts/VirtualBox安装Ubuntu教程/2018-09-16-20-26-02.png" title="[blog.ruanxinyu.cn]"><h2 id="导入操作系统镜像"><a href="#导入操作系统镜像" class="headerlink" title="导入操作系统镜像"></a>导入操作系统镜像</h2><p>从设置的系统标签页中可以看出系统的启动顺序是“软驱”-&gt;”光驱”-&gt;”硬盘”，因此只要在光驱中导入刚刚下载的操作系统镜像，启动的虚拟机的时候就会开始安装操作系统。<br><img src="/posts/VirtualBox安装Ubuntu教程/2018-09-16-20-30-36.png" title="[blog.ruanxinyu.cn]"></p><h2 id="设置虚拟机网络"><a href="#设置虚拟机网络" class="headerlink" title="设置虚拟机网络"></a>设置虚拟机网络</h2><p>虚拟机的网络连接方式有很多中，因为涉及到很多网络知识，总结起来就是一张表，如下所示：<br><img src="/posts/VirtualBox安装Ubuntu教程/2018-09-16-21-22-53.png" title="[blog.ruanxinyu.cn]"></p><p>因为在做实验的情况下，默认都是希望虚拟机能够访问外网，虚拟机与虚拟机之间，虚拟机与宿主机之间也是可以相互访问的，因此选择桥接模式，网卡选择你当前正在使用的网卡，这样你的虚拟机就相当于是另外与宿主机相同的电脑。<br><img src="/posts/VirtualBox安装Ubuntu教程/2018-09-16-20-35-30.png" title="[blog.ruanxinyu.cn]"></p><h1 id="安装Ubuntu"><a href="#安装Ubuntu" class="headerlink" title="安装Ubuntu"></a>安装Ubuntu</h1><blockquote><p>通过方向键移动，回车确认，如果发现鼠标在虚拟机捕获出不来了，可以按键盘右边的<code>CTRL</code>键</p></blockquote><p>启动虚拟机，语言选择英文，然后选择<code>Install Ubuntu</code>。<br><img src="/posts/VirtualBox安装Ubuntu教程/2018-09-16-20-55-08.png" title="[blog.ruanxinyu.cn]"></p><p>如果你的宿主机连接的是路由器，那么一般都是通过DHCP自动分配的IP地址，这样的话虚拟机也能通过DHCP自动获取IP地址，从下图中可以看出对应的IP。<br><img src="/posts/VirtualBox安装Ubuntu教程/2018-09-16-20-55-47.png" title="[blog.ruanxinyu.cn]"></p><p>如果你的宿主机能够正常上网就不需要配置proxy，直接回车确认下一步就可以。<br><img src="/posts/VirtualBox安装Ubuntu教程/2018-09-16-20-58-24.png" title="[blog.ruanxinyu.cn]"></p><p>配置Ubuntu的源，也就是安装软件的默认下载地址，为了提高下载速度，我一般使用华为开源镜像站的源：<a href="https://mirrors.huaweicloud.com/ubuntu/" target="_blank" rel="noopener">https://mirrors.huaweicloud.com/ubuntu/</a><br><img src="/posts/VirtualBox安装Ubuntu教程/2018-09-16-21-02-30.png" title="[blog.ruanxinyu.cn]"></p><p>我们可以手动对磁盘进行分区，但是这个需要对Linux很熟悉，因此此处我们直接选择<code>Use An Entre Disk</code>，让操作系统自动分区。<br><img src="/posts/VirtualBox安装Ubuntu教程/2018-09-16-21-03-45.png" title="[blog.ruanxinyu.cn]"></p><p>接下来会让你确认磁盘和分区信息，我们继续就可以。<br><img src="/posts/VirtualBox安装Ubuntu教程/2018-09-16-21-06-02.png" title="[blog.ruanxinyu.cn]"></p><p>然后输入你的主机名和密码等信息，<code>ssh identify</code>是用于免密码登陆linux的，一般不需要设置。<br><img src="/posts/VirtualBox安装Ubuntu教程/2018-09-16-21-08-19.png" title="[blog.ruanxinyu.cn]"></p><p>接下来会让你安装一些默认的应用程序，也可以什么都不装，保持一个最纯净的系统。<br><img src="/posts/VirtualBox安装Ubuntu教程/2018-09-16-21-09-27.png" title="[blog.ruanxinyu.cn]"></p><p>等待安装完毕，就可以开开心心重启了，<br><img src="/posts/VirtualBox安装Ubuntu教程/2018-09-16-21-15-58.png" title="[blog.ruanxinyu.cn]"></p><p>重启的过程中VirtualBox会提示你是否将光驱中的镜像移除掉，直接回车就可以移除就剋有了，这样就可以直接从磁盘启动你刚刚安装的系统，否则还是会从光驱中启动。<br><img src="/posts/VirtualBox安装Ubuntu教程/2018-09-16-21-17-37.png" title="[blog.ruanxinyu.cn]"></p><p>启动后输入用户名密码，输入<code>ip a</code>命令可以看到虚拟机的IP地址:</p><blockquote><p>由于Ubuntu自带的控制台使用不是很方便，因此可以直接通过xshell连接该虚拟机</p></blockquote><img src="/posts/VirtualBox安装Ubuntu教程/2018-09-16-21-26-23.png" title="[blog.ruanxinyu.cn]"><h1 id="VirtualBox的使用说明"><a href="#VirtualBox的使用说明" class="headerlink" title="VirtualBox的使用说明"></a>VirtualBox的使用说明</h1><h2 id="鼠标捕获"><a href="#鼠标捕获" class="headerlink" title="鼠标捕获"></a>鼠标捕获</h2><p>如果发现鼠标在虚拟机捕获出不来了，可以按键盘右边的<code>CTRL</code>键</p><h2 id="保存快照"><a href="#保存快照" class="headerlink" title="保存快照"></a>保存快照</h2><p>如下所示，一般第一次安装的时候都做一次快照，因此这样即使后续做了破坏性的操作也可以快速还原。<br><img src="/posts/VirtualBox安装Ubuntu教程/2018-09-16-21-29-57.png" title="[blog.ruanxinyu.cn]"></p><h2 id="快速保存并恢复"><a href="#快速保存并恢复" class="headerlink" title="快速保存并恢复"></a>快速保存并恢复</h2><p>关闭虚拟机时可以选择<code>快速休眠</code>，下次启动的时候就可以快速从将虚拟机从当前状态恢复。<br><img src="/posts/VirtualBox安装Ubuntu教程/2018-09-16-21-34-53.png" title="[blog.ruanxinyu.cn]"></p><h2 id="复制虚拟机"><a href="#复制虚拟机" class="headerlink" title="复制虚拟机"></a>复制虚拟机</h2><p>在做实验的时候需要使用多个虚拟机，不用重新安装，直接复制虚拟机即可，在对应的虚拟机上右键就可以，需要在关机的状态下才能复制。但是在复制虚拟机之后最后刷新一下网卡的MAC地址，否则可能会出现相同MAC地址的情况。<br><img src="/posts/VirtualBox安装Ubuntu教程/2018-09-26-15-33-38.png" title="[blog.ruanxinyu.cn]"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础准备工作&quot;&gt;&lt;a href=&quot;#基础准备工作&quot; class=&quot;headerlink&quot; title=&quot;基础准备工作&quot;&gt;&lt;/a&gt;基础准备工作&lt;/h1&gt;&lt;p&gt;本教程使用的VirtualBox版本为&lt;code&gt;5.2.18&lt;/code&gt;，Ubuntu版本为&lt;code&gt;
      
    
    </summary>
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>每天学习一个Linux命令（3）：echo命令</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4%EF%BC%883%EF%BC%89%EF%BC%9Aecho%E5%91%BD%E4%BB%A4/"/>
    <id>http://ruanxinyu.github.io/posts/每天学习一个Linux命令（3）：echo命令/</id>
    <published>2018-05-02T11:20:58.000Z</published>
    <updated>2018-08-12T13:13:07.219Z</updated>
    
    <content type="html"><![CDATA[<p><code>echo</code>命令用于输出字符串，可以通过参数和转义等来控制输出格式。</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo [-neE] [arg ...]</span><br></pre></td></tr></table></figure><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><ul><li><code>-n</code> 打印不添加换行符</li><li><code>-e</code> 使能转义字符</li></ul><h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h1><ul><li><code>\b</code> 退格键，即删除一个字符</li><li><code>\c</code> 抑制后续的输出</li><li><code>\n</code> 换行</li><li><code>\t</code> tab键</li><li><code>\\</code> 斜杠</li></ul><h1 id="使用小技巧"><a href="#使用小技巧" class="headerlink" title="使用小技巧"></a>使用小技巧</h1><ol><li><code>echo</code>是shell的内部命令，因此查看帮助需要使用<code>help echo</code></li><li><code>echo</code>后的字符串如果使用单引号括起来，则转义和变量都失效<code>(重要)</code></li><li>通过<code>-e</code>参数和<code>\c</code>转义可以控制换行的输出</li></ol><h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a>常用范例</h1><p><strong>范例1： 显示普通字符串</strong><br>命令： <code>echo &quot;this is a text&quot;</code> # 也可以不加引号<br>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is a text</span><br></pre></td></tr></table></figure></p><p><strong>范例2： 显示转义字符</strong><br>命令： <code>echo &quot;\&quot;this is a text\&quot;&quot;</code><br>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;this is a text&quot;</span><br></pre></td></tr></table></figure></p><p><strong>范例3： 显示变量</strong><br>命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">text=<span class="string">"ffff"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"this is a <span class="variable">$&#123;text&#125;</span>"</span></span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is a ffff</span><br></pre></td></tr></table></figure></p><p><strong>范例4： 输出换行</strong><br>命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"this \n"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"is a text"</span></span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this </span><br><span class="line"></span><br><span class="line">is a text</span><br></pre></td></tr></table></figure></p><p><strong>范例5： 不输出换行</strong><br>命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"this \c"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"is a text"</span></span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is a text （注：相比于上面的命令，少了两个换行）</span><br></pre></td></tr></table></figure></p><p><strong>范例6： 禁止显示转义和变量（使用单引号）</strong><br>命令： <code>echo &#39;$name\&quot;&#39;</code> # 这个很重要<br>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$name\&quot;</span><br></pre></td></tr></table></figure></p><p><strong>范例7： 显示命令执行的结果</strong><br>命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> `date`</span><br><span class="line"><span class="built_in">echo</span> $(date)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Tue May 1 21:16:57 CST 2018</span><br><span class="line">Tue May 1 21:16:57 CST 2018</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;echo&lt;/code&gt;命令用于输出字符串，可以通过参数和转义等来控制输出格式。&lt;/p&gt;
&lt;h1 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h1&gt;&lt;figure class=&quot;highl
      
    
    </summary>
    
      <category term="Linux" scheme="http://ruanxinyu.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ruanxinyu.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>每天学习一个Linux命令（2）：cd命令</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4%EF%BC%882%EF%BC%89%EF%BC%9Acd%E5%91%BD%E4%BB%A4/"/>
    <id>http://ruanxinyu.github.io/posts/每天学习一个Linux命令（2）：cd命令/</id>
    <published>2018-05-01T10:00:58.000Z</published>
    <updated>2018-08-12T13:13:07.219Z</updated>
    
    <content type="html"><![CDATA[<p><code>cd</code>命令用于切换至目标目录，以/开头的则为绝对路径，否则为相对路径。</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd [dir]</span><br></pre></td></tr></table></figure><h1 id="使用小技巧"><a href="#使用小技巧" class="headerlink" title="使用小技巧"></a>使用小技巧</h1><ol><li>切换至用户所示在的目录可以使用<code>cd ~</code> 或者 <code>cd</code>(不带参数)</li><li><code>&quot;.&quot;</code> 则是表示目前所在的目录，<code>&quot;..&quot;</code> 则表示目前目录位置的上一层目录</li><li>通过<code>pwd</code>命令可以打印当前所在的目录</li><li><code>cd -</code>表示切换至上一次所在的目录</li></ol><h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a>常用范例</h1><p><strong>范例1： 切换至根目录下的var目录下</strong><br>命令： <code>cd /var</code>(绝对路径)</p><hr><p><strong>范例2： 切换至当前目录下的var目录下</strong><br>命令： <code>cd var</code>(相对目录)</p><hr><p><strong>范例3： 切换至上两级的目录</strong><br>命令： <code>cd ../../</code></p><hr><p><strong>范例4： 切换至包含空格的目录</strong><br>命令： <code>cd &#39;aa aa&#39;</code>或者<code>cd aa\ aa</code></p><hr><p><strong>范例5： 切换至当前用户的home目录</strong><br>命令： <code>cd ~</code>或者<code>cd</code></p><hr><p><strong>范例6： 打印当前所在的目录</strong><br>命令： <code>pwd</code></p><hr><p><strong>范例7： 切换到上一次所在的目录</strong><br>命令： <code>cd -</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;cd&lt;/code&gt;命令用于切换至目标目录，以/开头的则为绝对路径，否则为相对路径。&lt;/p&gt;
&lt;h1 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h1&gt;&lt;figure class=&quot;hig
      
    
    </summary>
    
      <category term="Linux" scheme="http://ruanxinyu.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ruanxinyu.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>每天学习一个Linux命令（1）：ls命令</title>
    <link href="http://ruanxinyu.github.io/posts/%E6%AF%8F%E5%A4%A9%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4%EF%BC%881%EF%BC%89%EF%BC%9Als%E5%91%BD%E4%BB%A4/"/>
    <id>http://ruanxinyu.github.io/posts/每天学习一个Linux命令（1）：ls命令/</id>
    <published>2018-05-01T08:18:02.000Z</published>
    <updated>2018-10-01T04:52:36.720Z</updated>
    
    <content type="html"><![CDATA[<p><code>ls</code>命令是linux下最常用的命令。<code>ls</code>命令就是<code>list</code>的缩写，用于显示指定工作目录下之内容（列出目前工作目录所含之文件及子目录)。</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls [OPTION]... [FILE]...</span><br></pre></td></tr></table></figure><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><ul><li><code>-a</code> 显示所有文件及目录，包括以.开头的隐藏文件</li><li><code>-A</code> 同 -a ，但不列出 “.” (目前目录) 及 “..” (父目录)</li><li><code>-l</code> 除文件名称外，亦将文件型态、权限、拥有者、文件大小等资讯详细列出</li><li><code>-h</code> human-readable，默认-l参数显示出来的文件大小是字节大小，-h参数可以按照KB/MB/GB来显示</li><li><code>-r</code> reverse，将文件以相反次序显示(原定依英文字母次序)</li><li><code>-t</code> 将文件依建立时间之先后次序列出</li><li><code>-F</code> 在列出的文件名称后加一符号；例如可执行档则加 “*”, 目录则加 “/“</li><li><code>-R</code> recursive，若目录下有文件，则以下之文件亦皆依序列出</li></ul><h1 id="使用小技巧"><a href="#使用小技巧" class="headerlink" title="使用小技巧"></a>使用小技巧</h1><ol><li>一般Linux操作系统都会存在一个<code>ll</code>的命令，相当于<code>ls -l --color=auto</code></li><li>ls命令使支持<code>*</code>通配符的</li></ol><h1 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a>常用范例</h1><p><strong>范例1： 列出<code>/var</code>目录下的文件</strong><br>命令： <code>ls /var</code><br>结果：<br><img src="/posts/每天学习一个Linux命令（1）：ls命令/1.png" title="[1]"></p><hr><p><strong>范例2： 列出目前工作目录下所有名称是<code>s</code>开头的文件，越新的排越后面</strong><br>命令： <code>ls -ltr s*</code><br>结果：<br><img src="/posts/每天学习一个Linux命令（1）：ls命令/2.png" title="[2]"></p><hr><p><strong>范例3： 将<code>/bin</code>目录以下所有目录及文件详细资料列出</strong><br>命令： <code>ls -lR /bin</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;ls&lt;/code&gt;命令是linux下最常用的命令。&lt;code&gt;ls&lt;/code&gt;命令就是&lt;code&gt;list&lt;/code&gt;的缩写，用于显示指定工作目录下之内容（列出目前工作目录所含之文件及子目录)。&lt;/p&gt;
&lt;h1 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; c
      
    
    </summary>
    
      <category term="Linux" scheme="http://ruanxinyu.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ruanxinyu.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>如何使用GitHubPages搭建个人博客</title>
    <link href="http://ruanxinyu.github.io/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://ruanxinyu.github.io/posts/如何使用GitHubPages搭建个人博客/</id>
    <published>2018-04-30T12:07:11.000Z</published>
    <updated>2018-10-01T04:55:08.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我对个人博客的要求"><a href="#我对个人博客的要求" class="headerlink" title="我对个人博客的要求"></a>我对个人博客的要求</h1><p>我对个人博客有如下几点要求，因此最终选定通过<code>Hexo</code>+<code>GitHub Pages</code>来搭建。</p><ol><li>存在独立域名，别人能通过互联网访问</li><li>通过Git进行管理，支持MarkDown语法</li><li>不需要自己购买主机维护环境</li><li>支持评论分享等功能</li></ol><h1 id="配置GitHub-Pages"><a href="#配置GitHub-Pages" class="headerlink" title="配置GitHub Pages"></a>配置GitHub Pages</h1><blockquote><p>前提： 您需要有一个GitHub的账号，请将下文中的<code>ruanxinyu</code>替换为您的用户名。</p></blockquote><ol><li><p>点击<a href="https://github.com/new" target="_blank" rel="noopener">此处</a>，创建一个仓库， 一般GitHub Pages对应的仓库名称规则为： <code>用户名.github.io</code>， 如下图所示：</p><img src="/posts/如何使用GitHubPages搭建个人博客/创建GitHub仓库.png" title="[创建GitHub仓库]"></li><li><p>现在仓库有了，但是在推送内容之前还需要设置GitHub的SSH秘钥，通过如下命令生成并查看SSH秘钥，如果需要输入，一路回车就即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot; </span><br><span class="line">cat /c/Users/you/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li><li><p>进入到GitHub的Setting页面，添加SSH秘钥，如下图所示：</p><img src="/posts/如何使用GitHubPages搭建个人博客/添加GitHub的SSHKey.png" title="[添加GitHub的SSHKey]"></li><li><p>下面，我们往仓库中推送一个<code>index.html</code>页面来充当我们的博客，可以参考如下命令：（Windows下可以使用git bash终端运行如下命令）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:RuanXinyu/ruanxinyu.github.io.git</span><br><span class="line">cd ruanxinyu.github.io</span><br><span class="line">echo "Hello World" &gt; index.html</span><br><span class="line">git add --all</span><br><span class="line">git commit -m "Initial commit"</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li><li><p>此时你的博客已经产生，网址为：<a href="https://ruanxinyu.github.io/">https://ruanxinyu.github.io/</a>, 点击即可访问:</p></li></ol><h1 id="安装并体验Hexo"><a href="#安装并体验Hexo" class="headerlink" title="安装并体验Hexo"></a>安装并体验Hexo</h1><blockquote><p>GitHub Pages相当于一个静态网站，您需要将您的博客全部转换为html页面才可以，当然，这个繁琐的过程不需要我们自己去完成，当前有两个框架可以做这个事情：<code>Jekyll</code>和<code>Hexo</code>，下面我就介绍一下如何通过<code>Hexo</code>快速的发表自己的文章。</p></blockquote><p>Hexo是一个NodeJS实现的博客框架，官方文档地址为： <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a>, 文档存在中文哦，给力吧！下面说一下使用过程：</p><ol><li><p>执行<code>npm install -g hexo-cli</code>命令安装Hexo（在安装Hexo之前，请您自行安装NodeJS和NPM）</p></li><li><p>执行<code>hexo init xxx</code>创建一个博客</p></li><li><p>执行<code>hexo generate</code>渲染MarkDown博文，渲染出来的结果在<code>public</code>目录下</p></li><li><p>执行<code>npm install hexo-server --save</code>安装server工具，然后执行<code>hexo server</code>，访问<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>网址可在本地访问你的博客，该方式主要用于调试。</p></li><li><p>执行<code>hexo new xxx</code>创建一篇博文，博文的文件存放在<code>source\_posts</code>目录下，编辑文档内容，hexo server会自动检测文章的变化并运行generate命令，因此刷新本地网址即可看到你更新的内容。</p></li><li><p>在将博文推送到GitHub Pages之前，执行<code>npm install hexo-deployer-git --save</code>安装部署工具，然后将根目录下的<code>_config.yml</code>文件中的如下内容更改为您的GitHub Pages的仓库地址，注意是<code>git@</code>开头的地址，否则在使用<code>hexo deploy</code>会报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:RuanXinyu/ruanxinyu.github.com.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li><li><p>执行<code>hexo deploy</code>， Hexo将渲染后的页面放到<code>.deploy_git</code>目录，本地提交后，自动将您的博文推送到GitHub Pages所对应的仓库</p></li><li><p>此时，访问您的GitHubPages就可以看到你更新的文章内容。</p></li></ol><h1 id="切换到Indigo主题"><a href="#切换到Indigo主题" class="headerlink" title="切换到Indigo主题"></a>切换到Indigo主题</h1><p>Hexo默认使用的是<code>landscape</code>主题，如果不符合自己的审美，可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a>查找自己喜欢的主题。我比较喜欢<code>indigo</code>主题，该主题有平铺和卡片两种显示方式，卡片模式的代码是在<code>card</code>分支下，下面以此主题为例。</p><ol><li><p>克隆该主题的代码仓库，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b card https://github.com/yscoder/hexo-theme-indigo.git themes/indigo</span><br></pre></td></tr></table></figure></li><li><p>安装Indigo主题依赖的插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-less --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-json-content --save</span><br><span class="line">npm install hexo-helper-qrcode --save</span><br></pre></td></tr></table></figure></li><li><p>修改顶层配置文件<code>_config.yml</code>中的<code>theme: landscape</code>为<code>theme: indigo</code>，刷新页面即可看到新的主题。</p></li></ol><h1 id="配置Hexo和Indigo主题"><a href="#配置Hexo和Indigo主题" class="headerlink" title="配置Hexo和Indigo主题"></a>配置Hexo和Indigo主题</h1><p>Hexo的配置文件为<code>_config.yml</code>，Indigo主题的配置文件在<code>themes/indigo/_config.yml</code>。</p><p>Hexo的配置说明文档地址为： <a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/configuration.html</a><br>Indigo主题的配置说明文档地址为： <a href="https://github.com/yscoder/hexo-theme-indigo/wiki/%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">https://github.com/yscoder/hexo-theme-indigo/wiki/%E9%85%8D%E7%BD%AE</a></p><p>官方文档已经描述很清楚，当然，最简单的方式是基于别人的进行修改，因此在此我贡献出我的配置，然后对几个点做一下说明。</p><h2 id="Hexo配置文件样例"><a href="#Hexo配置文件样例" class="headerlink" title="Hexo配置文件样例"></a>Hexo配置文件样例</h2><blockquote><ol><li><code>language: zh-CN</code>: 语言的种类可以参考<code>themes/indigo/languages</code>目录下的文件</li><li><code>post_asset_folder: true</code>: 在创建博文的时候自动生成对应的文件夹，以存放该博文对应的图片</li><li>配置文件末尾的<code>feed</code>和<code>jsonContent</code>两部分分别是<code>hexo-generator-feed</code>和<code>hexo-generator-json-content</code>两个插件的配置，该部分说明在Indigo的说明文章中。</li></ol></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"></span><br><span class="line"><span class="attr">title:</span> <span class="string">RuanXinYu's</span> <span class="string">Blog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">路漫漫其修远兮，吾将上下而求索</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">阮新宇的成长记录</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">Ruandy</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">阮新宇</span></span><br><span class="line"><span class="attr">email:</span> <span class="number">1096421257</span><span class="string">@qq.com</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">http://ruanxinyu.github.io/</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  auto_detect:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  tab_replace:</span> <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = '')</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">  order_by:</span> <span class="bullet">-date</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="attr">HH:mm:ss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">indigo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@github.com:RuanXinyu/ruanxinyu.github.com.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">atom</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jsonContent:</span></span><br><span class="line"><span class="attr">  meta:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  pages:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  posts:</span></span><br><span class="line"><span class="attr">    title:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    date:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    path:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    raw:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    content:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    slug:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    updated:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    permalink:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    excerpt:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    categories:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    tags:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="Indigo配置文件样例"><a href="#Indigo配置文件样例" class="headerlink" title="Indigo配置文件样例"></a>Indigo配置文件样例</h2><blockquote><ol><li>该主题对应的图片在<code>themes/indigo/source/img</code>，请自行进行替换</li><li>样例内容配置了百度统计功能，下文有详细描述</li><li>样例内容配置了gitment的评论功能，下文有详细描述</li></ol></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-theme-indigo</span></span><br><span class="line"><span class="comment"># https://github.com/yscoder/hexo-theme-indigo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加新菜单项遵循以下规则</span></span><br><span class="line"><span class="comment"># menu:</span></span><br><span class="line"><span class="comment">#  link:               fontawesome图标，省略前缀，本主题前缀为 icon-，必须</span></span><br><span class="line"><span class="comment">#    text: About       菜单显示的文字，如果省略即默认与图标一致，首字母会转大写</span></span><br><span class="line"><span class="comment">#    url: /about       链接，绝对或相对路径，必须。</span></span><br><span class="line"><span class="comment">#    target: _blank    是否跳出，省略则在当前页面打开</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">  home:</span></span><br><span class="line"><span class="attr">    text:</span> <span class="string">主页</span></span><br><span class="line"><span class="attr">    url:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">  archives:</span></span><br><span class="line"><span class="attr">    text:</span> <span class="string">归档</span></span><br><span class="line"><span class="attr">    url:</span> <span class="string">/archives</span></span><br><span class="line"><span class="attr">  tags:</span></span><br><span class="line"><span class="attr">    text:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">    url:</span> <span class="string">/tags</span></span><br><span class="line"><span class="attr">  th-list:</span></span><br><span class="line"><span class="attr">    text:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">    url:</span> <span class="string">/categories</span></span><br><span class="line"><span class="attr">  github:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">https://github.com/RuanXinyu</span></span><br><span class="line"><span class="attr">    target:</span> <span class="string">_blank</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 你的头像url</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">/img/avatar.png</span></span><br><span class="line"><span class="comment"># avatar link</span></span><br><span class="line"><span class="attr">avatar_link:</span> <span class="string">/</span></span><br><span class="line"><span class="comment"># 头像背景图</span></span><br><span class="line"><span class="attr">brand:</span> <span class="string">/img/brand.jpg</span></span><br><span class="line"><span class="comment"># favicon</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/favicon.ico</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># email</span></span><br><span class="line"><span class="attr">email:</span> <span class="number">1096421257</span><span class="string">@qq.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Android L Chrome 浏览器状态栏颜色</span></span><br><span class="line"><span class="attr">color:</span> <span class="string">'#3F51B5'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 页面标题</span></span><br><span class="line"><span class="attr">tags_title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">archives_title:</span> <span class="string">归档</span></span><br><span class="line"><span class="attr">categories_title:</span> <span class="string">分类</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章截断</span></span><br><span class="line"><span class="attr">excerpt_render:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">excerpt_length:</span> <span class="number">200</span></span><br><span class="line"><span class="attr">excerpt_link:</span> <span class="string">阅读全文...</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">archive_yearly:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否显示文章最后更新时间</span></span><br><span class="line"><span class="attr">show_last_updated:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启分享</span></span><br><span class="line"><span class="attr">share:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启打赏，关闭 reward: false</span></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line"><span class="attr">  title:</span> <span class="string">谢谢您的打赏</span></span><br><span class="line"><span class="attr">  wechat:</span> <span class="string">/img/wechat.png</span>     <span class="comment">#微信，关闭设为 false</span></span><br><span class="line"><span class="attr">  alipay:</span> <span class="string">/img/alipay.jpg</span>     <span class="comment">#支付宝，关闭设为 false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启搜索</span></span><br><span class="line"><span class="attr">search:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否大屏幕下文章页隐藏导航</span></span><br><span class="line"><span class="attr">hideMenu:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启toc</span></span><br><span class="line"><span class="comment"># toc: false</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line"><span class="attr">  list_number:</span> <span class="literal">true</span>  <span class="comment"># 是否显示数字排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章页留言内容，hexo中所有变量及辅助函数等均可调用，具体请查阅 hexo.io</span></span><br><span class="line"><span class="attr">postMessage:</span> <span class="string">原始链接：&lt;a</span> <span class="string">href="&lt;%-</span> <span class="string">url_for(page.path).replace(/index\.html$/,</span> <span class="string">''</span><span class="string">)</span> <span class="string">%&gt;"</span> <span class="string">target="_blank"</span> <span class="string">rel="external"&gt;&lt;%-</span> <span class="string">page.permalink.replace(/index\.html$/,</span> <span class="string">''</span><span class="string">)</span> <span class="string">%&gt;&lt;/a&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 站长统计，如要开启，输入CNZZ站点id，如 cnzz: 1255152447</span></span><br><span class="line"><span class="attr">cnzz:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 百度统计，如要开启，改为你的 key</span></span><br><span class="line"><span class="attr">baidu_tongji:</span> <span class="string">b4c4998e548a16b827d4ffe9dbe2b47b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 腾讯分析，如要开启，输入站点id</span></span><br><span class="line"><span class="attr">tajs:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># google</span></span><br><span class="line"><span class="attr">google_analytics:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">google_site_verification:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sogou站长验证 http://zhanzhang.sogou.com/</span></span><br><span class="line"><span class="attr">sogou_site_verification:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># less</span></span><br><span class="line"><span class="attr">less:</span></span><br><span class="line"><span class="attr">  compress:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  paths:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">source/css/style.less</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下评论插件开启一个即可</span></span><br><span class="line"><span class="comment"># 是否开启 disqus</span></span><br><span class="line"><span class="attr">disqus_shortname:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 是否开启友言评论, 填写友言用户id</span></span><br><span class="line"><span class="attr">uyan_uid:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 是否使用 gitment，https://github.com/imsun/gitment</span></span><br><span class="line"><span class="comment">#gitment: false</span></span><br><span class="line"><span class="attr">gitment:</span></span><br><span class="line"><span class="attr">  owner:</span> <span class="string">RuanXinyu</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">ruanxinyu.github.com</span></span><br><span class="line"><span class="attr">  client_id:</span> <span class="number">2</span><span class="string">a6e23cf2e39e54ef316</span></span><br><span class="line"><span class="attr">  client_secret:</span> <span class="string">f237d3eb9fc94607a0454f894b143efe72eb8aca</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Valine Comment system. https://valine.js.org</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span> <span class="comment"># 如果你想使用valine，请将值设置为 true</span></span><br><span class="line"><span class="attr">  appId:</span>  <span class="comment"># your leancloud appId</span></span><br><span class="line"><span class="attr">  appKey:</span>  <span class="comment"># your leancloud appKey</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="literal">false</span> <span class="comment"># Mail notify</span></span><br><span class="line"><span class="attr">  verify:</span> <span class="literal">false</span> <span class="comment"># Verify code</span></span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">mm</span> <span class="comment"># Gravatar style : mm/identicon/monsterid/wavatar/retro/hide</span></span><br><span class="line"><span class="attr">  placeholder:</span> <span class="string">Just</span> <span class="string">go</span> <span class="string">go</span> <span class="comment"># Comment Box placeholder</span></span><br><span class="line"><span class="attr">  guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># Comment header info</span></span><br><span class="line"><span class="attr">  pageSize:</span> <span class="number">10</span> <span class="comment"># comment list page size</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启Hyper Comments，填写id则启用，false则禁用。http://hypercomments.com</span></span><br><span class="line"><span class="comment"># Hyper Comments support. Write your id here, or false to disable</span></span><br><span class="line"><span class="attr">hyper_id:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 规范网址</span></span><br><span class="line"><span class="comment"># 让搜索引擎重定向你的不同域名、不同子域、同域不同目录的站点到你期望的路径</span></span><br><span class="line"><span class="comment"># https://support.google.com/webmasters/answer/139066</span></span><br><span class="line"><span class="comment"># 假设配置为 canonical: http://imys.net，那么从搜索引擎中 www.imys.net 进入会重定向到 imys.net</span></span><br><span class="line"><span class="attr">canonical:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 版权起始年份</span></span><br><span class="line"><span class="attr">since_year:</span> <span class="number">2015</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户页面中作者相关的描述性文字，如不需要设为 false</span></span><br><span class="line"><span class="attr">about:</span> <span class="string">用户页面中作者相关的描述性文字，如不需要设为</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># “不蒜子”访问量统计，详见 http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line"><span class="attr">visit_counter:</span></span><br><span class="line"><span class="attr">  site_uv:</span> <span class="string">站点总访客数：</span></span><br><span class="line"><span class="attr">  site_pv:</span> <span class="string">站点总访问量：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态定义title</span></span><br><span class="line"><span class="attr">title_change:</span></span><br><span class="line"><span class="attr">  normal:</span> <span class="string">欢迎回来！</span></span><br><span class="line"><span class="attr">  leave:</span> <span class="string">您还会回来吗？</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置为 true 发布后将使用 unpkg cdn 最新的主题样式</span></span><br><span class="line"><span class="comment"># 如果想让你的自定义样式生效，把此项设为 false</span></span><br><span class="line"><span class="attr">cdn:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置为 true 将使用 lightbox render 图片</span></span><br><span class="line"><span class="attr">lightbox:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># icp备案号  ICP_license: 京ICP备1234556号-1</span></span><br><span class="line"><span class="attr">ICP_license:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h1 id="配置百度统计"><a href="#配置百度统计" class="headerlink" title="配置百度统计"></a>配置百度统计</h1><ol><li><p>百度统计是可以免费试用的，进入到<a href="https://tongji.baidu.com/web/homepage/index" target="_blank" rel="noopener">百度统计</a>注册账号，然后进入到管理页面添加你的网址，如下图所示：</p><img src="/posts/如何使用GitHubPages搭建个人博客/百度统计添加网站.png" title="[百度统计添加网站]"></li><li><p>添加完成之后，你就可以看到你的Key，如下图所示：</p><img src="/posts/如何使用GitHubPages搭建个人博客/百度统计key.png" title="[百度统计key]"></li><li><p>将你的key值添加到indigo主题的配置文件中即可，如下所示：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 百度统计，如要开启，改为你的 key</span></span><br><span class="line"><span class="attr">baidu_tongji:</span> <span class="string">b4c4998e548a16b827d4ffe9dbe2b47b</span></span><br></pre></td></tr></table></figure></li><li><p>访问百度统计查看你的网站访问情况等数据。</p><img src="/posts/如何使用GitHubPages搭建个人博客/百度统计结果.png" title="[百度统计结果]"></li></ol><h1 id="配置评论功能"><a href="#配置评论功能" class="headerlink" title="配置评论功能"></a>配置评论功能</h1><ol><li><p>友言评论功能已经关闭，因此采用的是gitment插件，该插件是依托于GitHub的Issue的功能的。采用<code>npm install --save gitment</code>命令安装gitment。</p></li><li><p>点击<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">此处</a>注册<code>OAuth Application</code>。其他内容可以随意填写，但要确保填入正确的 callback URL（一般是评论页面对应的域名，比如： <a href="https://ruanxinyu.github.io">https://ruanxinyu.github.io</a> ）。</p><img src="/posts/如何使用GitHubPages搭建个人博客/GitHubOAuth.png" title="[blog.ruanxinyu.cn]"></li><li><p>你会得到一个<code>client ID</code>和一个<code>client secret</code>，将其配置到indigo的配置文件中：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否使用 gitment，https://github.com/imsun/gitment</span></span><br><span class="line"><span class="comment">#gitment: false</span></span><br><span class="line"><span class="attr">gitment:</span></span><br><span class="line"><span class="attr">  owner:</span> <span class="string">RuanXinyu</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">ruanxinyu.github.com</span></span><br><span class="line"><span class="attr">  client_id:</span> <span class="number">2</span><span class="string">a6e23cf2e29e54ef316</span></span><br><span class="line"><span class="attr">  client_secret:</span> <span class="string">f237d3eb9fc94607a0354f894b143efe52eb8aca</span></span><br></pre></td></tr></table></figure></li><li><p>页面发布后，你需要访问页面并使用你的GitHub账号登录（<code>请确保你的账号是第二步所填repo的owner</code>），点击初始化按钮，之后其他用户即可在该页面发表评论。</p></li><li><p>如果初始化时出现<code>Error：validation failed</code>，则说明你的网址超过50个字符，这是由GitHub的Issue限制的，此时可以修改<code>themes\indigo\layout\_partial\plugins\gitment.ejs</code>文件的如下内容，以时间为ID：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span><br><span class="line">    id: <span class="string">'&lt;%- page.date %&gt;'</span>,</span><br><span class="line">    owner: <span class="string">'&lt;%- theme.gitment.owner %&gt;'</span>,</span><br><span class="line">    repo: <span class="string">'&lt;%- theme.gitment.repo %&gt;'</span>,</span><br><span class="line">    oauth: &#123;</span><br><span class="line">        client_id: <span class="string">'&lt;%- theme.gitment.client_id %&gt;'</span>,</span><br><span class="line">        client_secret: <span class="string">'&lt;%- theme.gitment.client_secret %&gt;'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>现在在你的博文下就可以进行评论了：</p><img src="/posts/如何使用GitHubPages搭建个人博客/博文评论.png" title="[博文评论]"></li><li><p>在你所指定的GitHub仓库中的Issue中也会有你的评论信息：</p><img src="/posts/如何使用GitHubPages搭建个人博客/GitHubIssue.png" title="[GitHubIssue]"></li></ol><blockquote><p>如果出现其他问题，可以参考：<a href="https://imsun.net/posts/gitment-introduction/" target="_blank" rel="noopener">https://imsun.net/posts/gitment-introduction/</a>和<a href="https://www.jianshu.com/p/57afa4844aaa" target="_blank" rel="noopener">https://www.jianshu.com/p/57afa4844aaa</a></p></blockquote><h1 id="使用个人独立域名"><a href="#使用个人独立域名" class="headerlink" title="使用个人独立域名"></a>使用个人独立域名</h1><p>经过上述的配置，我们的博客已经能够在公网访问，但是如果您还想需要自己的域名，而不是以<code>github.io</code>结尾的，比如我的域名为：<code>blog.ruanxinyu.cn</code>，那么您可以按照下面的说明进行配置。</p><h2 id="配置域名解析DNS"><a href="#配置域名解析DNS" class="headerlink" title="配置域名解析DNS"></a>配置域名解析DNS</h2><p>首先您需要购买自己的域名，比如通过阿里云进行购买<a href="https://wanwang.aliyun.com/?spm=5176.8142029.388261.275.a7236d3earZNnp" target="_blank" rel="noopener">https://wanwang.aliyun.com/?spm=5176.8142029.388261.275.a7236d3earZNnp</a>，该过程比较繁琐，需要认证。</p><p>域名认证通过之后，需要在添在云解析DNS中加一项<code>CNAME</code>将你的独立域名指向你的GitHub Pages网址，如下图所示，</p><blockquote><p>其中<code>ruanxinyu.cn</code>是我购买的域名；<code>blog</code>是我为我的博客分配的二级域名，二级域名是自己随意指定的；<code>ruanxinyu.github.io</code>是我的GitHub Pages地址。</p></blockquote><img src="/posts/如何使用GitHubPages搭建个人博客/阿里云域名解析设置.png" title="[阿里云域名解析设置]"><h2 id="配置GitHub仓库"><a href="#配置GitHub仓库" class="headerlink" title="配置GitHub仓库"></a>配置GitHub仓库</h2><p>进入到你的GitHub Pages所在的代码仓库的配置中，将您的域名配置进去：<br><img src="/posts/如何使用GitHubPages搭建个人博客/GitHub配置域名设置入口.png" title="[GitHub配置域名设置入口]"><br><img src="/posts/如何使用GitHubPages搭建个人博客/GitHub配置域名.png" title="[GitHub配置域名]"></p><p>到此，您就可以通过您的独立域名访问您的博客内容，比如我的：<a href="https://blog.ruanxinyu.cn" target="_blank" rel="noopener">https://blog.ruanxinyu.cn</a></p><blockquote><p>还存在一个小问题，每次你通过<code>hexo deploy -g</code>将你的博客推送到你的GitHubPages的时候，域名配置就丢失了，为了解决此问题，我们可以在我的Hexo工程添加一个<code>source/CNAME</code>文件，在该文件中写入你的独立域名，比如<code>blog.ruanxinyu.cn</code>，这样每次推送，都会自动给您设置域名。</p></blockquote><h1 id="通过Git的子模块功能管理主题"><a href="#通过Git的子模块功能管理主题" class="headerlink" title="通过Git的子模块功能管理主题"></a>通过Git的子模块功能管理主题</h1><p>为什么要用Git的子模块功能呢？</p><blockquote><p>我们的博客代码是存在我们自己仓库中的，而主题是从别人的仓库中拉取的，并且我们会修改主题中的配置文件。如果我们将主题的内容全部存到我们的仓库中，那么如果主题的作者更新了内容，我们想同步下来就会很费劲。而Git的子模块功能就是为了解决这个问题的，允许你将一个Git仓库当作另外一个Git仓库的子目录，允许你克隆另外一个仓库到你的项目中并且保持你的提交相对独立。</p></blockquote><h2 id="在华为DevCloud上建立私有代码仓"><a href="#在华为DevCloud上建立私有代码仓" class="headerlink" title="在华为DevCloud上建立私有代码仓"></a>在华为DevCloud上建立私有代码仓</h2><p>因为敏感信息问题，我不想将hexo工程源码放和主题的源码放在gitHub上，因此我在华为软件开发云上建立了两个私有仓库:</p><p>一个用于存放我的hexo工程源码，地址为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git@codehub.devcloud.huaweicloud.com:55d03e8e8ec445bfb3fffbc66b1001dd/Blog.git</span><br></pre></td></tr></table></figure></p><p>一个用于存放我修改后的indigo主题，该仓库是从indigo的官方仓库导入进来的, 如下图所示, 地址为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git@codehub.devcloud.huaweicloud.com:55d03e8e8ec445bfb3fffbc66b1001dd/hexo-theme-indigo.git</span><br></pre></td></tr></table></figure></p><img src="/posts/如何使用GitHubPages搭建个人博客/华为云创建仓库.png" title="[华为云创建仓库]"><h2 id="如何添加Git的子模块功能"><a href="#如何添加Git的子模块功能" class="headerlink" title="如何添加Git的子模块功能"></a>如何添加Git的子模块功能</h2><p>在第一次使用的时候，需要先添加子模块功能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add -b card git@codehub.devcloud.huaweicloud.com:55d03e8e8ec445bfb3fffbc66b1001dd/hexo-theme-indigo.git themes/indigo</span><br></pre></td></tr></table></figure></p><p>此时，会在你的代码目录下生成<code>.gitmodules</code>文件，该文件记录你的子模块信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[submodule &quot;themes/indigo&quot;]</span><br><span class="line">truepath = themes/indigo</span><br><span class="line">trueurl = git@codehub.devcloud.huaweicloud.com:55d03e8e8ec445bfb3fffbc66b1001dd/hexo-theme-indigo.git</span><br><span class="line">truebranch = card</span><br></pre></td></tr></table></figure></p><p>然后执行<code>git submodule init</code>和<code>git submodule update</code>命令将远端的代码同步下来。</p><h2 id="如何修改indigo主题的内容"><a href="#如何修改indigo主题的内容" class="headerlink" title="如何修改indigo主题的内容"></a>如何修改indigo主题的内容</h2><p>我们根据自己的需要修改主题文件夹中的文件，然后推送至我们的私有仓库即可，可以参考如下命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd themes/indigo</span><br><span class="line">git add .</span><br><span class="line">git commit -m '修改配置信息'</span><br><span class="line">git push origin card</span><br></pre></td></tr></table></figure></p><h2 id="如何同步indigo主题官方仓库的更新"><a href="#如何同步indigo主题官方仓库的更新" class="headerlink" title="如何同步indigo主题官方仓库的更新"></a>如何同步indigo主题官方仓库的更新</h2><p>首先，我们将我们的仓库与官方的仓库进行一下关联，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add office -t card https://github.com/yscoder/hexo-theme-indigo.git</span><br></pre></td></tr></table></figure></p><p>之后通过<code>git pull office</code>即可将官方的仓库合并到本地。</p><h2 id="如何修改Hexo工程代码的内容"><a href="#如何修改Hexo工程代码的内容" class="headerlink" title="如何修改Hexo工程代码的内容"></a>如何修改Hexo工程代码的内容</h2><p>Hexo工程就跟普通仓库一样维护即可，与子模块是相互独立的，当前两个仓库分开维护即可。Hexo工程代码并不会管理indigo主题的文件，而只是维护一个子模块的commit id。</p><h2 id="克隆已经添加子模块功能的hexo工程"><a href="#克隆已经添加子模块功能的hexo工程" class="headerlink" title="克隆已经添加子模块功能的hexo工程"></a>克隆已经添加子模块功能的hexo工程</h2><p>使用子模块之后，克隆Hexo工程代码可以加上<code>--recursive</code>参数，将子模组的内容一起克隆下来，如果没有加该参数，则需要手动执行一下<code>git submodule update</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --recursive git@codehub.devcloud.huaweicloud.com:55d03e8e8ec445bfb3fffbc66b1001dd/Blog.git</span><br></pre></td></tr></table></figure></p><h1 id="你可能会遇到的坑"><a href="#你可能会遇到的坑" class="headerlink" title="你可能会遇到的坑"></a>你可能会遇到的坑</h1><ol><li><p>执行<code>hexo deploy</code>时报<code>error deployer not found:github</code>错误</p><blockquote><p>您没有安装安装<code>hexo-deployer-git</code>造成的，通过 <code>npm install hexo-deployer-git --save</code>进行安装</p></blockquote></li><li><p>执行<code>hexo deploy</code>时报<code>Permission denied (publickey)</code>错误</p><blockquote><p>您的Github没有配置你的SSH key，配置方法参照上文的“配置GitHub Pages”章节</p></blockquote></li><li><p>执行<code>hexo deploy</code>时报<code>fatal: could not read Username for &#39;https://github.com&#39;: Invalid argument</code>错误</p><blockquote><p>在GitHub上设置SSH Key，同时将配置文件<code>deploy</code>配置下的git地址改为<code>git@</code>开头的ssh地址，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:RuanXinyu/ruanxinyu.github.com.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></blockquote></li><li><p>百度统计没有数据</p><blockquote><p>百度统计在初次添加后会有一定的延迟，可以手动检查是否添加成功，如下所示:</p><img src="/posts/如何使用GitHubPages搭建个人博客/百度统计检查状态.png" title="[百度统计检查状态]"></blockquote></li><li><p>gitment初始化评论时出现<code>Error：validation failed</code></p><blockquote><p>这是由于你的网址超过50个字符导致的，解决方式请参照上文“配置评论功能”中的第5条</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;我对个人博客的要求&quot;&gt;&lt;a href=&quot;#我对个人博客的要求&quot; class=&quot;headerlink&quot; title=&quot;我对个人博客的要求&quot;&gt;&lt;/a&gt;我对个人博客的要求&lt;/h1&gt;&lt;p&gt;我对个人博客有如下几点要求，因此最终选定通过&lt;code&gt;Hexo&lt;/code&gt;+&lt;c
      
    
    </summary>
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>JDK安装教程</title>
    <link href="http://ruanxinyu.github.io/posts/JDK%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>http://ruanxinyu.github.io/posts/JDK安装教程/</id>
    <published>2018-04-15T06:53:32.000Z</published>
    <updated>2018-10-01T04:55:58.833Z</updated>
    
    <content type="html"><![CDATA[<p>学习Java，首先得安装JDK(Java Development Kit)，那么下面就说一下如何在Windows和Linux下安装并验证JDK。</p><h1 id="JDK的下载"><a href="#JDK的下载" class="headerlink" title="JDK的下载"></a>JDK的下载</h1><p>JDK的官方下载地址为： <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html，" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/index.html，</a> 请根据需要下载对应操作系统的安装包。</p><blockquote><p>官方下载速度比较慢，因此可以从华为开源镜像站下载，地址为：<a href="https://mirrors.huaweicloud.com/repository/toolkit/java/jdk/" target="_blank" rel="noopener">https://mirrors.huaweicloud.com/repository/toolkit/java/jdk/</a></p></blockquote><h1 id="Windows下安装JDK"><a href="#Windows下安装JDK" class="headerlink" title="Windows下安装JDK"></a>Windows下安装JDK</h1><ol><li>以<code>jdk-8u151</code>为例，双击上一步下载下来的exe文件，默认安装即可。（备注：路径可以选择其他盘符，但是不建议路径中包含中文及特殊字符）</li><li>进入到系统环境变量的管理界面：<code>右键计算机图标=&gt;属性=&gt;高级系统设置=&gt;环境变量</code><img src="/posts/JDK安装教程/windows_install_01.png" title="[设置Windows环境变量]"></li><li><code>新建</code>变量<code>JAVA_HOME</code>，值为：<code>C:\Program Files\Java\jdk1.8.0_151</code></li><li><code>编辑</code>变量<code>PATH</code>，追加：<code>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</code></li><li><code>新建</code>变量<code>CLASSPATH</code>，值为：<code>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</code><img src="/posts/JDK安装教程/windows_install_02.png" title="[设置Windows环境变量]"></li></ol><h1 id="Linux下安装JDK"><a href="#Linux下安装JDK" class="headerlink" title="Linux下安装JDK"></a>Linux下安装JDK</h1><ol><li><p>以<code>jdk-8u151</code>为例，下载JDK后，将压缩包解压至特定的目录，一般解压至/usr/local目录，下载和解压命令可以参考如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.huaweicloud.com/repository/toolkit/java/jdk/8u151-b12/jdk-8u151-linux-x64.tar.gz</span><br><span class="line">tar -zxvf -C /usr/local/ jdk-8u151-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>经JDK的路径加入到环境变量中，在命令行中输入<code>vim /etc/profile</code>，编辑文件，在文件末尾增加如下的内容，然后执行<code>source /etc/profile</code>使环境变量生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk-8u151</span><br><span class="line">export JRE_HOME=/usr/local/jdk-8u151/jre</span><br><span class="line">export CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br></pre></td></tr></table></figure></li></ol><h1 id="JDK的验证"><a href="#JDK的验证" class="headerlink" title="JDK的验证"></a>JDK的验证</h1><p>windows打开<code>CMD</code>命令窗口，Linux打开终端端口，输入<code>java -version</code>命令，如果出现如下提示则Java安装成功。<br><img src="/posts/JDK安装教程/java_version.png" title="[Java的验证]"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学习Java，首先得安装JDK(Java Development Kit)，那么下面就说一下如何在Windows和Linux下安装并验证JDK。&lt;/p&gt;
&lt;h1 id=&quot;JDK的下载&quot;&gt;&lt;a href=&quot;#JDK的下载&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="环境搭建" scheme="http://ruanxinyu.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="Java" scheme="http://ruanxinyu.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
